
AHSM_0317.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000848c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08008660  08008660  00009660  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b6c  08008b6c  0000a1f4  2**0
                  CONTENTS
  4 .ARM          00000008  08008b6c  08008b6c  00009b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b74  08008b74  0000a1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b74  08008b74  00009b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b78  08008b78  00009b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08008b7c  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  200001f8  08008d70  0000a1f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  08008d70  0000a5f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af4f  00000000  00000000  0000a224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d39  00000000  00000000  00015173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  00016eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007a1  00000000  00000000  000178b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223ff  00000000  00000000  00018059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c37d  00000000  00000000  0003a458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb22f  00000000  00000000  000467d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111a04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038cc  00000000  00000000  00111a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00115314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008644 	.word	0x08008644

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	08008644 	.word	0x08008644

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2iz>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b84:	d215      	bcs.n	8000bb2 <__aeabi_d2iz+0x36>
 8000b86:	d511      	bpl.n	8000bac <__aeabi_d2iz+0x30>
 8000b88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d912      	bls.n	8000bb8 <__aeabi_d2iz+0x3c>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ba2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba6:	bf18      	it	ne
 8000ba8:	4240      	negne	r0, r0
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb6:	d105      	bne.n	8000bc4 <__aeabi_d2iz+0x48>
 8000bb8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bbc:	bf08      	it	eq
 8000bbe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2uiz>:
 8000bcc:	004a      	lsls	r2, r1, #1
 8000bce:	d211      	bcs.n	8000bf4 <__aeabi_d2uiz+0x28>
 8000bd0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd4:	d211      	bcs.n	8000bfa <__aeabi_d2uiz+0x2e>
 8000bd6:	d50d      	bpl.n	8000bf4 <__aeabi_d2uiz+0x28>
 8000bd8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be0:	d40e      	bmi.n	8000c00 <__aeabi_d2uiz+0x34>
 8000be2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	4770      	bx	lr
 8000bf4:	f04f 0000 	mov.w	r0, #0
 8000bf8:	4770      	bx	lr
 8000bfa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfe:	d102      	bne.n	8000c06 <__aeabi_d2uiz+0x3a>
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	4770      	bx	lr
 8000c06:	f04f 0000 	mov.w	r0, #0
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b9a0 	b.w	8000f64 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f83c 	bl	8000ca8 <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_d2lz>:
 8000c3c:	b538      	push	{r3, r4, r5, lr}
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2300      	movs	r3, #0
 8000c42:	4604      	mov	r4, r0
 8000c44:	460d      	mov	r5, r1
 8000c46:	f7ff ff71 	bl	8000b2c <__aeabi_dcmplt>
 8000c4a:	b928      	cbnz	r0, 8000c58 <__aeabi_d2lz+0x1c>
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	4629      	mov	r1, r5
 8000c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c54:	f000 b80a 	b.w	8000c6c <__aeabi_d2ulz>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c5e:	f000 f805 	bl	8000c6c <__aeabi_d2ulz>
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	bd38      	pop	{r3, r4, r5, pc}
 8000c6a:	bf00      	nop

08000c6c <__aeabi_d2ulz>:
 8000c6c:	b5d0      	push	{r4, r6, r7, lr}
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <__aeabi_d2ulz+0x34>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	4606      	mov	r6, r0
 8000c74:	460f      	mov	r7, r1
 8000c76:	f7ff fce7 	bl	8000648 <__aeabi_dmul>
 8000c7a:	f7ff ffa7 	bl	8000bcc <__aeabi_d2uiz>
 8000c7e:	4604      	mov	r4, r0
 8000c80:	f7ff fc68 	bl	8000554 <__aeabi_ui2d>
 8000c84:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <__aeabi_d2ulz+0x38>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f7ff fcde 	bl	8000648 <__aeabi_dmul>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4630      	mov	r0, r6
 8000c92:	4639      	mov	r1, r7
 8000c94:	f7ff fb20 	bl	80002d8 <__aeabi_dsub>
 8000c98:	f7ff ff98 	bl	8000bcc <__aeabi_d2uiz>
 8000c9c:	4621      	mov	r1, r4
 8000c9e:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca0:	3df00000 	.word	0x3df00000
 8000ca4:	41f00000 	.word	0x41f00000

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	460c      	mov	r4, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14e      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	458c      	cmp	ip, r1
 8000cb8:	4686      	mov	lr, r0
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	d962      	bls.n	8000d86 <__udivmoddi4+0xde>
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0320 	rsb	r3, r2, #32
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f f68c 	uxth.w	r6, ip
 8000cde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb04 f106 	mul.w	r1, r4, r6
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cfe:	f080 8112 	bcs.w	8000f26 <__udivmoddi4+0x27e>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 810f 	bls.w	8000f26 <__udivmoddi4+0x27e>
 8000d08:	3c02      	subs	r4, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	fa1f f38e 	uxth.w	r3, lr
 8000d12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d16:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f606 	mul.w	r6, r0, r6
 8000d22:	429e      	cmp	r6, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x94>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2e:	f080 80fc 	bcs.w	8000f2a <__udivmoddi4+0x282>
 8000d32:	429e      	cmp	r6, r3
 8000d34:	f240 80f9 	bls.w	8000f2a <__udivmoddi4+0x282>
 8000d38:	4463      	add	r3, ip
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d42:	2100      	movs	r1, #0
 8000d44:	b11d      	cbz	r5, 8000d4e <__udivmoddi4+0xa6>
 8000d46:	40d3      	lsrs	r3, r2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d905      	bls.n	8000d62 <__udivmoddi4+0xba>
 8000d56:	b10d      	cbz	r5, 8000d5c <__udivmoddi4+0xb4>
 8000d58:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e7f5      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d62:	fab3 f183 	clz	r1, r3
 8000d66:	2900      	cmp	r1, #0
 8000d68:	d146      	bne.n	8000df8 <__udivmoddi4+0x150>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xcc>
 8000d6e:	4290      	cmp	r0, r2
 8000d70:	f0c0 80f0 	bcc.w	8000f54 <__udivmoddi4+0x2ac>
 8000d74:	1a86      	subs	r6, r0, r2
 8000d76:	eb64 0303 	sbc.w	r3, r4, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d0e6      	beq.n	8000d4e <__udivmoddi4+0xa6>
 8000d80:	e9c5 6300 	strd	r6, r3, [r5]
 8000d84:	e7e3      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	f040 8090 	bne.w	8000eac <__udivmoddi4+0x204>
 8000d8c:	eba1 040c 	sub.w	r4, r1, ip
 8000d90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb08 4416 	mls	r4, r8, r6, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb07 f006 	mul.w	r0, r7, r6
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x11c>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x11a>
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	f200 80cd 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000dc2:	4626      	mov	r6, r4
 8000dc4:	1a1c      	subs	r4, r3, r0
 8000dc6:	fa1f f38e 	uxth.w	r3, lr
 8000dca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dce:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb00 f707 	mul.w	r7, r0, r7
 8000dda:	429f      	cmp	r7, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x148>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x146>
 8000de8:	429f      	cmp	r7, r3
 8000dea:	f200 80b0 	bhi.w	8000f4e <__udivmoddi4+0x2a6>
 8000dee:	4620      	mov	r0, r4
 8000df0:	1bdb      	subs	r3, r3, r7
 8000df2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0x9c>
 8000df8:	f1c1 0620 	rsb	r6, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	431f      	orrs	r7, r3
 8000e04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e08:	fa04 f301 	lsl.w	r3, r4, r1
 8000e0c:	ea43 030c 	orr.w	r3, r3, ip
 8000e10:	40f4      	lsrs	r4, r6
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	0c38      	lsrs	r0, r7, #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e20:	fa1f fc87 	uxth.w	ip, r7
 8000e24:	fb00 441e 	mls	r4, r0, lr, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	d90a      	bls.n	8000e4e <__udivmoddi4+0x1a6>
 8000e38:	193c      	adds	r4, r7, r4
 8000e3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e3e:	f080 8084 	bcs.w	8000f4a <__udivmoddi4+0x2a2>
 8000e42:	45a1      	cmp	r9, r4
 8000e44:	f240 8081 	bls.w	8000f4a <__udivmoddi4+0x2a2>
 8000e48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	eba4 0409 	sub.w	r4, r4, r9
 8000e52:	fa1f f983 	uxth.w	r9, r3
 8000e56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	45a4      	cmp	ip, r4
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x1d2>
 8000e6a:	193c      	adds	r4, r7, r4
 8000e6c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e70:	d267      	bcs.n	8000f42 <__udivmoddi4+0x29a>
 8000e72:	45a4      	cmp	ip, r4
 8000e74:	d965      	bls.n	8000f42 <__udivmoddi4+0x29a>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e82:	eba4 040c 	sub.w	r4, r4, ip
 8000e86:	429c      	cmp	r4, r3
 8000e88:	46ce      	mov	lr, r9
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	d351      	bcc.n	8000f32 <__udivmoddi4+0x28a>
 8000e8e:	d04e      	beq.n	8000f2e <__udivmoddi4+0x286>
 8000e90:	b155      	cbz	r5, 8000ea8 <__udivmoddi4+0x200>
 8000e92:	ebb8 030e 	subs.w	r3, r8, lr
 8000e96:	eb64 040c 	sbc.w	r4, r4, ip
 8000e9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	431e      	orrs	r6, r3
 8000ea2:	40cc      	lsrs	r4, r1
 8000ea4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	e750      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ebc:	4094      	lsls	r4, r2
 8000ebe:	430c      	orrs	r4, r1
 8000ec0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec8:	fa1f f78c 	uxth.w	r7, ip
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed4:	0c23      	lsrs	r3, r4, #16
 8000ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eda:	fb00 f107 	mul.w	r1, r0, r7
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x24c>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eea:	d22c      	bcs.n	8000f46 <__udivmoddi4+0x29e>
 8000eec:	4299      	cmp	r1, r3
 8000eee:	d92a      	bls.n	8000f46 <__udivmoddi4+0x29e>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b2a4      	uxth	r4, r4
 8000ef8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000efc:	fb08 3311 	mls	r3, r8, r1, r3
 8000f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f04:	fb01 f307 	mul.w	r3, r1, r7
 8000f08:	42a3      	cmp	r3, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x276>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f14:	d213      	bcs.n	8000f3e <__udivmoddi4+0x296>
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	d911      	bls.n	8000f3e <__udivmoddi4+0x296>
 8000f1a:	3902      	subs	r1, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	1ae4      	subs	r4, r4, r3
 8000f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f24:	e739      	b.n	8000d9a <__udivmoddi4+0xf2>
 8000f26:	4604      	mov	r4, r0
 8000f28:	e6f0      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e706      	b.n	8000d3c <__udivmoddi4+0x94>
 8000f2e:	45c8      	cmp	r8, r9
 8000f30:	d2ae      	bcs.n	8000e90 <__udivmoddi4+0x1e8>
 8000f32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7a8      	b.n	8000e90 <__udivmoddi4+0x1e8>
 8000f3e:	4631      	mov	r1, r6
 8000f40:	e7ed      	b.n	8000f1e <__udivmoddi4+0x276>
 8000f42:	4603      	mov	r3, r0
 8000f44:	e799      	b.n	8000e7a <__udivmoddi4+0x1d2>
 8000f46:	4630      	mov	r0, r6
 8000f48:	e7d4      	b.n	8000ef4 <__udivmoddi4+0x24c>
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	e77f      	b.n	8000e4e <__udivmoddi4+0x1a6>
 8000f4e:	4463      	add	r3, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e74d      	b.n	8000df0 <__udivmoddi4+0x148>
 8000f54:	4606      	mov	r6, r0
 8000f56:	4623      	mov	r3, r4
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e70f      	b.n	8000d7c <__udivmoddi4+0xd4>
 8000f5c:	3e02      	subs	r6, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	e730      	b.n	8000dc4 <__udivmoddi4+0x11c>
 8000f62:	bf00      	nop

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int flagexti = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0){
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d125      	bne.n	8000fc4 <HAL_GPIO_EXTI_Callback+0x5c>
		flagexti++;
 8000f78:	4b53      	ldr	r3, [pc, #332]	@ (80010c8 <HAL_GPIO_EXTI_Callback+0x160>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	4a52      	ldr	r2, [pc, #328]	@ (80010c8 <HAL_GPIO_EXTI_Callback+0x160>)
 8000f80:	6013      	str	r3, [r2, #0]
		if (motor1_flag == 0){
 8000f82:	4b52      	ldr	r3, [pc, #328]	@ (80010cc <HAL_GPIO_EXTI_Callback+0x164>)
 8000f84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	f04f 0300 	mov.w	r3, #0
 8000f90:	f7ff fdc2 	bl	8000b18 <__aeabi_dcmpeq>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00e      	beq.n	8000fb8 <HAL_GPIO_EXTI_Callback+0x50>
			motor1.current_angle_step = -19500; // it was -19500 => --9750
 8000f9a:	4b4d      	ldr	r3, [pc, #308]	@ (80010d0 <HAL_GPIO_EXTI_Callback+0x168>)
 8000f9c:	4a4d      	ldr	r2, [pc, #308]	@ (80010d4 <HAL_GPIO_EXTI_Callback+0x16c>)
 8000f9e:	615a      	str	r2, [r3, #20]
			motor1.set_desired_angle(&motor1, 0);
 8000fa0:	4b4b      	ldr	r3, [pc, #300]	@ (80010d0 <HAL_GPIO_EXTI_Callback+0x168>)
 8000fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fa4:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80010c0 <HAL_GPIO_EXTI_Callback+0x158>
 8000fa8:	4849      	ldr	r0, [pc, #292]	@ (80010d0 <HAL_GPIO_EXTI_Callback+0x168>)
 8000faa:	4798      	blx	r3
			motor1_flag=-1;
 8000fac:	4947      	ldr	r1, [pc, #284]	@ (80010cc <HAL_GPIO_EXTI_Callback+0x164>)
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	4b49      	ldr	r3, [pc, #292]	@ (80010d8 <HAL_GPIO_EXTI_Callback+0x170>)
 8000fb4:	e9c1 2300 	strd	r2, r3, [r1]

		}
		flag_01++;
 8000fb8:	4b48      	ldr	r3, [pc, #288]	@ (80010dc <HAL_GPIO_EXTI_Callback+0x174>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	4a47      	ldr	r2, [pc, #284]	@ (80010dc <HAL_GPIO_EXTI_Callback+0x174>)
 8000fc0:	6013      	str	r3, [r2, #0]
			motor4_flag = -1;
			//			motor4.step_speed=50;
		}
		//		flagexti = 4;
	}
}
 8000fc2:	e077      	b.n	80010b4 <HAL_GPIO_EXTI_Callback+0x14c>
	else if (GPIO_Pin == GPIO_PIN_1) {
 8000fc4:	88fb      	ldrh	r3, [r7, #6]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d11f      	bne.n	800100a <HAL_GPIO_EXTI_Callback+0xa2>
		if (motor2_flag == 0) {
 8000fca:	4b45      	ldr	r3, [pc, #276]	@ (80010e0 <HAL_GPIO_EXTI_Callback+0x178>)
 8000fcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	f04f 0300 	mov.w	r3, #0
 8000fd8:	f7ff fd9e 	bl	8000b18 <__aeabi_dcmpeq>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d100      	bne.n	8000fe4 <HAL_GPIO_EXTI_Callback+0x7c>
}
 8000fe2:	e067      	b.n	80010b4 <HAL_GPIO_EXTI_Callback+0x14c>
			motor2.current_angle_step = 0;
 8000fe4:	4b3f      	ldr	r3, [pc, #252]	@ (80010e4 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	615a      	str	r2, [r3, #20]
			motor2.set_desired_angle(&motor2, 0);
 8000fea:	4b3e      	ldr	r3, [pc, #248]	@ (80010e4 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fee:	ed9f 0b34 	vldr	d0, [pc, #208]	@ 80010c0 <HAL_GPIO_EXTI_Callback+0x158>
 8000ff2:	483c      	ldr	r0, [pc, #240]	@ (80010e4 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000ff4:	4798      	blx	r3
			motor2_flag = -1;
 8000ff6:	493a      	ldr	r1, [pc, #232]	@ (80010e0 <HAL_GPIO_EXTI_Callback+0x178>)
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	4b36      	ldr	r3, [pc, #216]	@ (80010d8 <HAL_GPIO_EXTI_Callback+0x170>)
 8000ffe:	e9c1 2300 	strd	r2, r3, [r1]
			motor2.step_speed=50;
 8001002:	4b38      	ldr	r3, [pc, #224]	@ (80010e4 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001004:	2232      	movs	r2, #50	@ 0x32
 8001006:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001008:	e054      	b.n	80010b4 <HAL_GPIO_EXTI_Callback+0x14c>
	else if (GPIO_Pin == GPIO_PIN_2) {
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	2b04      	cmp	r3, #4
 800100e:	d132      	bne.n	8001076 <HAL_GPIO_EXTI_Callback+0x10e>
		if (motor3_flag == 0) {
 8001010:	4b35      	ldr	r3, [pc, #212]	@ (80010e8 <HAL_GPIO_EXTI_Callback+0x180>)
 8001012:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	f04f 0300 	mov.w	r3, #0
 800101e:	f7ff fd7b 	bl	8000b18 <__aeabi_dcmpeq>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d100      	bne.n	800102a <HAL_GPIO_EXTI_Callback+0xc2>
}
 8001028:	e044      	b.n	80010b4 <HAL_GPIO_EXTI_Callback+0x14c>
			motor3.current_angle_step = 0;
 800102a:	4b30      	ldr	r3, [pc, #192]	@ (80010ec <HAL_GPIO_EXTI_Callback+0x184>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
			motor3.set_desired_angle(&motor3, 0);
 8001030:	4b2e      	ldr	r3, [pc, #184]	@ (80010ec <HAL_GPIO_EXTI_Callback+0x184>)
 8001032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001034:	ed9f 0b22 	vldr	d0, [pc, #136]	@ 80010c0 <HAL_GPIO_EXTI_Callback+0x158>
 8001038:	482c      	ldr	r0, [pc, #176]	@ (80010ec <HAL_GPIO_EXTI_Callback+0x184>)
 800103a:	4798      	blx	r3
			motor3_flag = -1;
 800103c:	492a      	ldr	r1, [pc, #168]	@ (80010e8 <HAL_GPIO_EXTI_Callback+0x180>)
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	4b25      	ldr	r3, [pc, #148]	@ (80010d8 <HAL_GPIO_EXTI_Callback+0x170>)
 8001044:	e9c1 2300 	strd	r2, r3, [r1]
			motor2.set_desired_angle(&motor2, 0);
 8001048:	4b26      	ldr	r3, [pc, #152]	@ (80010e4 <HAL_GPIO_EXTI_Callback+0x17c>)
 800104a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800104c:	ed9f 0b1c 	vldr	d0, [pc, #112]	@ 80010c0 <HAL_GPIO_EXTI_Callback+0x158>
 8001050:	4824      	ldr	r0, [pc, #144]	@ (80010e4 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001052:	4798      	blx	r3
			motor2.current_angle_step = 2400;
 8001054:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001056:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 800105a:	615a      	str	r2, [r3, #20]
			motor2_flag = 0;
 800105c:	4920      	ldr	r1, [pc, #128]	@ (80010e0 <HAL_GPIO_EXTI_Callback+0x178>)
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	e9c1 2300 	strd	r2, r3, [r1]
			flag_C++;
 800106a:	4b21      	ldr	r3, [pc, #132]	@ (80010f0 <HAL_GPIO_EXTI_Callback+0x188>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3301      	adds	r3, #1
 8001070:	4a1f      	ldr	r2, [pc, #124]	@ (80010f0 <HAL_GPIO_EXTI_Callback+0x188>)
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	e01e      	b.n	80010b4 <HAL_GPIO_EXTI_Callback+0x14c>
	else if (GPIO_Pin == GPIO_PIN_3) {
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	2b08      	cmp	r3, #8
 800107a:	d11b      	bne.n	80010b4 <HAL_GPIO_EXTI_Callback+0x14c>
		if (motor4_flag == 0) {
 800107c:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <HAL_GPIO_EXTI_Callback+0x18c>)
 800107e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	f7ff fd45 	bl	8000b18 <__aeabi_dcmpeq>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d100      	bne.n	8001096 <HAL_GPIO_EXTI_Callback+0x12e>
}
 8001094:	e00e      	b.n	80010b4 <HAL_GPIO_EXTI_Callback+0x14c>
			motor4.set_desired_angle(&motor4, 0);
 8001096:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <HAL_GPIO_EXTI_Callback+0x190>)
 8001098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800109a:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 80010c0 <HAL_GPIO_EXTI_Callback+0x158>
 800109e:	4816      	ldr	r0, [pc, #88]	@ (80010f8 <HAL_GPIO_EXTI_Callback+0x190>)
 80010a0:	4798      	blx	r3
			motor4.current_angle_step = 0;
 80010a2:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <HAL_GPIO_EXTI_Callback+0x190>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	615a      	str	r2, [r3, #20]
			motor4_flag = -1;
 80010a8:	4912      	ldr	r1, [pc, #72]	@ (80010f4 <HAL_GPIO_EXTI_Callback+0x18c>)
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <HAL_GPIO_EXTI_Callback+0x170>)
 80010b0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	f3af 8000 	nop.w
	...
 80010c8:	2000049c 	.word	0x2000049c
 80010cc:	20000478 	.word	0x20000478
 80010d0:	20000358 	.word	0x20000358
 80010d4:	ffffb3d4 	.word	0xffffb3d4
 80010d8:	bff00000 	.word	0xbff00000
 80010dc:	20000328 	.word	0x20000328
 80010e0:	20000480 	.word	0x20000480
 80010e4:	200003a0 	.word	0x200003a0
 80010e8:	20000488 	.word	0x20000488
 80010ec:	200003e8 	.word	0x200003e8
 80010f0:	2000032c 	.word	0x2000032c
 80010f4:	20000490 	.word	0x20000490
 80010f8:	20000430 	.word	0x20000430

080010fc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	//rx_buffer7[0]++;
	if (huart == &huart5) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a1a      	ldr	r2, [pc, #104]	@ (8001170 <HAL_UART_RxCpltCallback+0x74>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d12c      	bne.n	8001166 <HAL_UART_RxCpltCallback+0x6a>
		rx_data5[data_length5++] = rx_buffer5[0];
 800110c:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <HAL_UART_RxCpltCallback+0x78>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	1c5a      	adds	r2, r3, #1
 8001112:	b2d1      	uxtb	r1, r2
 8001114:	4a17      	ldr	r2, [pc, #92]	@ (8001174 <HAL_UART_RxCpltCallback+0x78>)
 8001116:	7011      	strb	r1, [r2, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b17      	ldr	r3, [pc, #92]	@ (8001178 <HAL_UART_RxCpltCallback+0x7c>)
 800111c:	7819      	ldrb	r1, [r3, #0]
 800111e:	4b17      	ldr	r3, [pc, #92]	@ (800117c <HAL_UART_RxCpltCallback+0x80>)
 8001120:	5499      	strb	r1, [r3, r2]
		if (rx_buffer5[0] == '\n' || data_length5 >= RX_BUFFER_SIZE - 1) {
 8001122:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <HAL_UART_RxCpltCallback+0x7c>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b0a      	cmp	r3, #10
 8001128:	d003      	beq.n	8001132 <HAL_UART_RxCpltCallback+0x36>
 800112a:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <HAL_UART_RxCpltCallback+0x78>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001130:	d914      	bls.n	800115c <HAL_UART_RxCpltCallback+0x60>
			HAL_UART_Transmit(&huart5, rx_data5, data_length5, HAL_MAX_DELAY);
 8001132:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <HAL_UART_RxCpltCallback+0x78>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	f04f 33ff 	mov.w	r3, #4294967295
 800113c:	490f      	ldr	r1, [pc, #60]	@ (800117c <HAL_UART_RxCpltCallback+0x80>)
 800113e:	480c      	ldr	r0, [pc, #48]	@ (8001170 <HAL_UART_RxCpltCallback+0x74>)
 8001140:	f003 fc18 	bl	8004974 <HAL_UART_Transmit>
			rx_data5[data_length5 - 1] = '\0';
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <HAL_UART_RxCpltCallback+0x78>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	3b01      	subs	r3, #1
 800114a:	4a0c      	ldr	r2, [pc, #48]	@ (800117c <HAL_UART_RxCpltCallback+0x80>)
 800114c:	2100      	movs	r1, #0
 800114e:	54d1      	strb	r1, [r2, r3]
			data_length5 = 0;
 8001150:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <HAL_UART_RxCpltCallback+0x78>)
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]
			uart_flag = 1;
 8001156:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <HAL_UART_RxCpltCallback+0x84>)
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart5, rx_buffer5, 1);
 800115c:	2201      	movs	r2, #1
 800115e:	4906      	ldr	r1, [pc, #24]	@ (8001178 <HAL_UART_RxCpltCallback+0x7c>)
 8001160:	4803      	ldr	r0, [pc, #12]	@ (8001170 <HAL_UART_RxCpltCallback+0x74>)
 8001162:	f003 fc92 	bl	8004a8a <HAL_UART_Receive_IT>
		//		flagexti++;
	}
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200002ac 	.word	0x200002ac
 8001174:	20000294 	.word	0x20000294
 8001178:	20000214 	.word	0x20000214
 800117c:	20000254 	.word	0x20000254
 8001180:	20000295 	.word	0x20000295

08001184 <uart_decoder>:
void uart_decoder()
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b08d      	sub	sp, #52	@ 0x34
 8001188:	af00      	add	r7, sp, #0
	if (uart_flag == 1) {
 800118a:	4bb0      	ldr	r3, [pc, #704]	@ (800144c <uart_decoder+0x2c8>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b01      	cmp	r3, #1
 8001190:	f040 8280 	bne.w	8001694 <uart_decoder+0x510>
		char *token;
		token = strtok(rx_data5, ",");
 8001194:	49ae      	ldr	r1, [pc, #696]	@ (8001450 <uart_decoder+0x2cc>)
 8001196:	48af      	ldr	r0, [pc, #700]	@ (8001454 <uart_decoder+0x2d0>)
 8001198:	f005 fb26 	bl	80067e8 <strtok>
 800119c:	62f8      	str	r0, [r7, #44]	@ 0x2c
		strcpy(command, token);
 800119e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80011a0:	48ad      	ldr	r0, [pc, #692]	@ (8001458 <uart_decoder+0x2d4>)
 80011a2:	f005 fbf0 	bl	8006986 <strcpy>
		if ((token != NULL)) {
 80011a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 8270 	beq.w	800168e <uart_decoder+0x50a>
			if (strncmp(command, "Bping", 5) == 0) {
 80011ae:	2205      	movs	r2, #5
 80011b0:	49aa      	ldr	r1, [pc, #680]	@ (800145c <uart_decoder+0x2d8>)
 80011b2:	48a9      	ldr	r0, [pc, #676]	@ (8001458 <uart_decoder+0x2d4>)
 80011b4:	f005 fb05 	bl	80067c2 <strncmp>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d113      	bne.n	80011e6 <uart_decoder+0x62>
				uint8_t print[] = "pong\n";
 80011be:	4aa8      	ldr	r2, [pc, #672]	@ (8001460 <uart_decoder+0x2dc>)
 80011c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011c8:	6018      	str	r0, [r3, #0]
 80011ca:	3304      	adds	r3, #4
 80011cc:	8019      	strh	r1, [r3, #0]
				HAL_UART_Transmit(&huart5, print, sizeof(print) - 1,
 80011ce:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	2205      	movs	r2, #5
 80011d8:	48a2      	ldr	r0, [pc, #648]	@ (8001464 <uart_decoder+0x2e0>)
 80011da:	f003 fbcb 	bl	8004974 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				testflag=12;
 80011de:	4ba2      	ldr	r3, [pc, #648]	@ (8001468 <uart_decoder+0x2e4>)
 80011e0:	220c      	movs	r2, #12
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	e253      	b.n	800168e <uart_decoder+0x50a>
			} else if (strncmp(command, "init", 4) == 0) {
 80011e6:	2204      	movs	r2, #4
 80011e8:	49a0      	ldr	r1, [pc, #640]	@ (800146c <uart_decoder+0x2e8>)
 80011ea:	489b      	ldr	r0, [pc, #620]	@ (8001458 <uart_decoder+0x2d4>)
 80011ec:	f005 fae9 	bl	80067c2 <strncmp>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <uart_decoder+0x78>
				motor_pos_init();
 80011f6:	f000 fb0f 	bl	8001818 <motor_pos_init>
 80011fa:	e248      	b.n	800168e <uart_decoder+0x50a>

			} else if (strncmp(command, "setlen", 6) == 0) {
 80011fc:	2206      	movs	r2, #6
 80011fe:	499c      	ldr	r1, [pc, #624]	@ (8001470 <uart_decoder+0x2ec>)
 8001200:	4895      	ldr	r0, [pc, #596]	@ (8001458 <uart_decoder+0x2d4>)
 8001202:	f005 fade 	bl	80067c2 <strncmp>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d11c      	bne.n	8001246 <uart_decoder+0xc2>
				//				testflag=123;
				token = strtok(NULL, ",");
 800120c:	4990      	ldr	r1, [pc, #576]	@ (8001450 <uart_decoder+0x2cc>)
 800120e:	2000      	movs	r0, #0
 8001210:	f005 faea 	bl	80067e8 <strtok>
 8001214:	62f8      	str	r0, [r7, #44]	@ 0x2c
				hairang = atof(token);
 8001216:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001218:	f004 fbb2 	bl	8005980 <atof>
 800121c:	eeb0 7a40 	vmov.f32	s14, s0
 8001220:	eef0 7a60 	vmov.f32	s15, s1
 8001224:	4b93      	ldr	r3, [pc, #588]	@ (8001474 <uart_decoder+0x2f0>)
 8001226:	ed83 7b00 	vstr	d7, [r3]
				hairang = hairang - 1.0;
 800122a:	4b92      	ldr	r3, [pc, #584]	@ (8001474 <uart_decoder+0x2f0>)
 800122c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	4b90      	ldr	r3, [pc, #576]	@ (8001478 <uart_decoder+0x2f4>)
 8001236:	f7ff f84f 	bl	80002d8 <__aeabi_dsub>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	498d      	ldr	r1, [pc, #564]	@ (8001474 <uart_decoder+0x2f0>)
 8001240:	e9c1 2300 	strd	r2, r3, [r1]
 8001244:	e223      	b.n	800168e <uart_decoder+0x50a>
			} else if (strncmp(command, "end", 3) == 0) {
 8001246:	2203      	movs	r2, #3
 8001248:	498c      	ldr	r1, [pc, #560]	@ (800147c <uart_decoder+0x2f8>)
 800124a:	4883      	ldr	r0, [pc, #524]	@ (8001458 <uart_decoder+0x2d4>)
 800124c:	f005 fab9 	bl	80067c2 <strncmp>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d113      	bne.n	800127e <uart_decoder+0xfa>
				systemRunning = 0;
 8001256:	4b8a      	ldr	r3, [pc, #552]	@ (8001480 <uart_decoder+0x2fc>)
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
				isRunning=0;
 800125c:	4b89      	ldr	r3, [pc, #548]	@ (8001484 <uart_decoder+0x300>)
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
				solV_blow_OFF();
 8001262:	f001 fe19 	bl	8002e98 <solV_blow_OFF>
				solV_9_OFF();
 8001266:	f001 fd27 	bl	8002cb8 <solV_9_OFF>
				step=0;
 800126a:	4b87      	ldr	r3, [pc, #540]	@ (8001488 <uart_decoder+0x304>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
				step2=0;
 8001270:	4b86      	ldr	r3, [pc, #536]	@ (800148c <uart_decoder+0x308>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
				step4=0;
 8001276:	4b86      	ldr	r3, [pc, #536]	@ (8001490 <uart_decoder+0x30c>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	e207      	b.n	800168e <uart_decoder+0x50a>

			} else if (strncmp(command, "test1", 5) == 0) {
 800127e:	2205      	movs	r2, #5
 8001280:	4984      	ldr	r1, [pc, #528]	@ (8001494 <uart_decoder+0x310>)
 8001282:	4875      	ldr	r0, [pc, #468]	@ (8001458 <uart_decoder+0x2d4>)
 8001284:	f005 fa9d 	bl	80067c2 <strncmp>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d111      	bne.n	80012b2 <uart_decoder+0x12e>
				token = strtok(NULL, ",");
 800128e:	4970      	ldr	r1, [pc, #448]	@ (8001450 <uart_decoder+0x2cc>)
 8001290:	2000      	movs	r0, #0
 8001292:	f005 faa9 	bl	80067e8 <strtok>
 8001296:	62f8      	str	r0, [r7, #44]	@ 0x2c
				test1 = atof(token);
 8001298:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800129a:	f004 fb71 	bl	8005980 <atof>
 800129e:	ec53 2b10 	vmov	r2, r3, d0
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fc69 	bl	8000b7c <__aeabi_d2iz>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4a7a      	ldr	r2, [pc, #488]	@ (8001498 <uart_decoder+0x314>)
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	e1ed      	b.n	800168e <uart_decoder+0x50a>

			} else if (strncmp(command, "z", 1) == 0) {
 80012b2:	4b69      	ldr	r3, [pc, #420]	@ (8001458 <uart_decoder+0x2d4>)
 80012b4:	781a      	ldrb	r2, [r3, #0]
 80012b6:	4b79      	ldr	r3, [pc, #484]	@ (800149c <uart_decoder+0x318>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d12b      	bne.n	8001318 <uart_decoder+0x194>
				token = strtok(NULL, ",");
 80012c0:	4963      	ldr	r1, [pc, #396]	@ (8001450 <uart_decoder+0x2cc>)
 80012c2:	2000      	movs	r0, #0
 80012c4:	f005 fa90 	bl	80067e8 <strtok>
 80012c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
				if (atof(token)>500) {
 80012ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80012cc:	f004 fb58 	bl	8005980 <atof>
 80012d0:	ec51 0b10 	vmov	r0, r1, d0
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	4b71      	ldr	r3, [pc, #452]	@ (80014a0 <uart_decoder+0x31c>)
 80012da:	f7ff fc45 	bl	8000b68 <__aeabi_dcmpgt>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00c      	beq.n	80012fe <uart_decoder+0x17a>
					solV_Grab_ON();
 80012e4:	f001 fdfc 	bl	8002ee0 <solV_Grab_ON>
					//					testflag = 10;
					solV_8_ON();
 80012e8:	f001 fcc2 	bl	8002c70 <solV_8_ON>
					solV_12_ON();
 80012ec:	f001 fd20 	bl	8002d30 <solV_12_ON>
					solV_16_ON();
 80012f0:	f001 fd7e 	bl	8002df0 <solV_16_ON>
					solV_14_ON();
 80012f4:	f001 fd4c 	bl	8002d90 <solV_14_ON>
					solV_18_ON();
 80012f8:	f001 fdaa 	bl	8002e50 <solV_18_ON>
 80012fc:	e1c7      	b.n	800168e <uart_decoder+0x50a>
				} else {
					solV_Grab_OFF();
 80012fe:	f001 fdfb 	bl	8002ef8 <solV_Grab_OFF>
					//					testflag = 11;
					solV_8_OFF();
 8001302:	f001 fcc1 	bl	8002c88 <solV_8_OFF>
					solV_12_OFF();
 8001306:	f001 fd1f 	bl	8002d48 <solV_12_OFF>
					solV_16_OFF();
 800130a:	f001 fd7d 	bl	8002e08 <solV_16_OFF>
					solV_14_OFF();
 800130e:	f001 fd4b 	bl	8002da8 <solV_14_OFF>
					solV_18_OFF();
 8001312:	f001 fda9 	bl	8002e68 <solV_18_OFF>
 8001316:	e1ba      	b.n	800168e <uart_decoder+0x50a>
				}



			} else if (strncmp(command, "01", 2) == 0) {
 8001318:	2202      	movs	r2, #2
 800131a:	4962      	ldr	r1, [pc, #392]	@ (80014a4 <uart_decoder+0x320>)
 800131c:	484e      	ldr	r0, [pc, #312]	@ (8001458 <uart_decoder+0x2d4>)
 800131e:	f005 fa50 	bl	80067c2 <strncmp>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d102      	bne.n	800132e <uart_decoder+0x1aa>
				solV_1_ON();
 8001328:	f001 fc1e 	bl	8002b68 <solV_1_ON>
 800132c:	e1af      	b.n	800168e <uart_decoder+0x50a>
			} else if (strncmp(command, "02", 2) == 0) {
 800132e:	2202      	movs	r2, #2
 8001330:	495d      	ldr	r1, [pc, #372]	@ (80014a8 <uart_decoder+0x324>)
 8001332:	4849      	ldr	r0, [pc, #292]	@ (8001458 <uart_decoder+0x2d4>)
 8001334:	f005 fa45 	bl	80067c2 <strncmp>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d102      	bne.n	8001344 <uart_decoder+0x1c0>
				solV_2_ON();
 800133e:	f001 fc1f 	bl	8002b80 <solV_2_ON>
 8001342:	e1a4      	b.n	800168e <uart_decoder+0x50a>
			} else if (strncmp(command, "03", 2) == 0) {
 8001344:	2202      	movs	r2, #2
 8001346:	4959      	ldr	r1, [pc, #356]	@ (80014ac <uart_decoder+0x328>)
 8001348:	4843      	ldr	r0, [pc, #268]	@ (8001458 <uart_decoder+0x2d4>)
 800134a:	f005 fa3a 	bl	80067c2 <strncmp>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <uart_decoder+0x1d6>
				solV_3_ON();
 8001354:	f001 fc20 	bl	8002b98 <solV_3_ON>
 8001358:	e199      	b.n	800168e <uart_decoder+0x50a>
			} else if (strncmp(command, "04", 2) == 0) {
 800135a:	2202      	movs	r2, #2
 800135c:	4954      	ldr	r1, [pc, #336]	@ (80014b0 <uart_decoder+0x32c>)
 800135e:	483e      	ldr	r0, [pc, #248]	@ (8001458 <uart_decoder+0x2d4>)
 8001360:	f005 fa2f 	bl	80067c2 <strncmp>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d102      	bne.n	8001370 <uart_decoder+0x1ec>
				solV_4_ON();
 800136a:	f001 fc21 	bl	8002bb0 <solV_4_ON>
 800136e:	e18e      	b.n	800168e <uart_decoder+0x50a>
			} else if (strncmp(command, "05", 2) == 0) {
 8001370:	2202      	movs	r2, #2
 8001372:	4950      	ldr	r1, [pc, #320]	@ (80014b4 <uart_decoder+0x330>)
 8001374:	4838      	ldr	r0, [pc, #224]	@ (8001458 <uart_decoder+0x2d4>)
 8001376:	f005 fa24 	bl	80067c2 <strncmp>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d102      	bne.n	8001386 <uart_decoder+0x202>
				solV_5_ON();
 8001380:	f001 fc2e 	bl	8002be0 <solV_5_ON>
 8001384:	e183      	b.n	800168e <uart_decoder+0x50a>
			} else if (strncmp(command, "06", 2) == 0) {
 8001386:	2202      	movs	r2, #2
 8001388:	494b      	ldr	r1, [pc, #300]	@ (80014b8 <uart_decoder+0x334>)
 800138a:	4833      	ldr	r0, [pc, #204]	@ (8001458 <uart_decoder+0x2d4>)
 800138c:	f005 fa19 	bl	80067c2 <strncmp>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d102      	bne.n	800139c <uart_decoder+0x218>
				solV_6_ON();
 8001396:	f001 fc3b 	bl	8002c10 <solV_6_ON>
 800139a:	e178      	b.n	800168e <uart_decoder+0x50a>
			} else if (strncmp(command, "07", 2) == 0) {
 800139c:	2202      	movs	r2, #2
 800139e:	4947      	ldr	r1, [pc, #284]	@ (80014bc <uart_decoder+0x338>)
 80013a0:	482d      	ldr	r0, [pc, #180]	@ (8001458 <uart_decoder+0x2d4>)
 80013a2:	f005 fa0e 	bl	80067c2 <strncmp>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <uart_decoder+0x22e>
				solV_7_ON();
 80013ac:	f001 fc48 	bl	8002c40 <solV_7_ON>
 80013b0:	e16d      	b.n	800168e <uart_decoder+0x50a>
			} else if (strncmp(command, "08", 2) == 0) {
 80013b2:	2202      	movs	r2, #2
 80013b4:	4942      	ldr	r1, [pc, #264]	@ (80014c0 <uart_decoder+0x33c>)
 80013b6:	4828      	ldr	r0, [pc, #160]	@ (8001458 <uart_decoder+0x2d4>)
 80013b8:	f005 fa03 	bl	80067c2 <strncmp>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d102      	bne.n	80013c8 <uart_decoder+0x244>
				solV_8_ON();
 80013c2:	f001 fc55 	bl	8002c70 <solV_8_ON>
 80013c6:	e162      	b.n	800168e <uart_decoder+0x50a>
			} else if (strncmp(command, "09", 2) == 0) {
 80013c8:	2202      	movs	r2, #2
 80013ca:	493e      	ldr	r1, [pc, #248]	@ (80014c4 <uart_decoder+0x340>)
 80013cc:	4822      	ldr	r0, [pc, #136]	@ (8001458 <uart_decoder+0x2d4>)
 80013ce:	f005 f9f8 	bl	80067c2 <strncmp>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <uart_decoder+0x25a>
				solV_9_ON();
 80013d8:	f001 fc62 	bl	8002ca0 <solV_9_ON>
 80013dc:	e157      	b.n	800168e <uart_decoder+0x50a>
			} else if (strncmp(command, "10", 2) == 0) {
 80013de:	2202      	movs	r2, #2
 80013e0:	4939      	ldr	r1, [pc, #228]	@ (80014c8 <uart_decoder+0x344>)
 80013e2:	481d      	ldr	r0, [pc, #116]	@ (8001458 <uart_decoder+0x2d4>)
 80013e4:	f005 f9ed 	bl	80067c2 <strncmp>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d102      	bne.n	80013f4 <uart_decoder+0x270>
				solV_10_ON();
 80013ee:	f001 fc6f 	bl	8002cd0 <solV_10_ON>
 80013f2:	e14c      	b.n	800168e <uart_decoder+0x50a>
			} else if (strncmp(command, "11", 2) == 0) {
 80013f4:	2202      	movs	r2, #2
 80013f6:	4935      	ldr	r1, [pc, #212]	@ (80014cc <uart_decoder+0x348>)
 80013f8:	4817      	ldr	r0, [pc, #92]	@ (8001458 <uart_decoder+0x2d4>)
 80013fa:	f005 f9e2 	bl	80067c2 <strncmp>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d102      	bne.n	800140a <uart_decoder+0x286>
				solV_11_ON();
 8001404:	f001 fc7c 	bl	8002d00 <solV_11_ON>
 8001408:	e141      	b.n	800168e <uart_decoder+0x50a>
			} else if (strncmp(command, "12", 2) == 0) {
 800140a:	2202      	movs	r2, #2
 800140c:	4930      	ldr	r1, [pc, #192]	@ (80014d0 <uart_decoder+0x34c>)
 800140e:	4812      	ldr	r0, [pc, #72]	@ (8001458 <uart_decoder+0x2d4>)
 8001410:	f005 f9d7 	bl	80067c2 <strncmp>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d102      	bne.n	8001420 <uart_decoder+0x29c>
				solV_12_ON();
 800141a:	f001 fc89 	bl	8002d30 <solV_12_ON>
 800141e:	e136      	b.n	800168e <uart_decoder+0x50a>
			} else if (strncmp(command, "13", 2) == 0) {
 8001420:	2202      	movs	r2, #2
 8001422:	492c      	ldr	r1, [pc, #176]	@ (80014d4 <uart_decoder+0x350>)
 8001424:	480c      	ldr	r0, [pc, #48]	@ (8001458 <uart_decoder+0x2d4>)
 8001426:	f005 f9cc 	bl	80067c2 <strncmp>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d102      	bne.n	8001436 <uart_decoder+0x2b2>
				solV_13_ON();
 8001430:	f001 fc96 	bl	8002d60 <solV_13_ON>
 8001434:	e12b      	b.n	800168e <uart_decoder+0x50a>
			} else if (strncmp(command, "14", 2) == 0) {
 8001436:	2202      	movs	r2, #2
 8001438:	4927      	ldr	r1, [pc, #156]	@ (80014d8 <uart_decoder+0x354>)
 800143a:	4807      	ldr	r0, [pc, #28]	@ (8001458 <uart_decoder+0x2d4>)
 800143c:	f005 f9c1 	bl	80067c2 <strncmp>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d14a      	bne.n	80014dc <uart_decoder+0x358>
				solV_14_ON();
 8001446:	f001 fca3 	bl	8002d90 <solV_14_ON>
 800144a:	e120      	b.n	800168e <uart_decoder+0x50a>
 800144c:	20000295 	.word	0x20000295
 8001450:	08008660 	.word	0x08008660
 8001454:	20000254 	.word	0x20000254
 8001458:	20000298 	.word	0x20000298
 800145c:	08008664 	.word	0x08008664
 8001460:	0800870c 	.word	0x0800870c
 8001464:	200002ac 	.word	0x200002ac
 8001468:	20000314 	.word	0x20000314
 800146c:	0800866c 	.word	0x0800866c
 8001470:	08008674 	.word	0x08008674
 8001474:	20000018 	.word	0x20000018
 8001478:	3ff00000 	.word	0x3ff00000
 800147c:	0800867c 	.word	0x0800867c
 8001480:	2000031c 	.word	0x2000031c
 8001484:	20000310 	.word	0x20000310
 8001488:	20000340 	.word	0x20000340
 800148c:	20000344 	.word	0x20000344
 8001490:	2000034c 	.word	0x2000034c
 8001494:	08008680 	.word	0x08008680
 8001498:	20000338 	.word	0x20000338
 800149c:	08008688 	.word	0x08008688
 80014a0:	407f4000 	.word	0x407f4000
 80014a4:	0800868c 	.word	0x0800868c
 80014a8:	08008690 	.word	0x08008690
 80014ac:	08008694 	.word	0x08008694
 80014b0:	08008698 	.word	0x08008698
 80014b4:	0800869c 	.word	0x0800869c
 80014b8:	080086a0 	.word	0x080086a0
 80014bc:	080086a4 	.word	0x080086a4
 80014c0:	080086a8 	.word	0x080086a8
 80014c4:	080086ac 	.word	0x080086ac
 80014c8:	080086b0 	.word	0x080086b0
 80014cc:	080086b4 	.word	0x080086b4
 80014d0:	080086b8 	.word	0x080086b8
 80014d4:	080086bc 	.word	0x080086bc
 80014d8:	080086c0 	.word	0x080086c0
			} else if (strncmp(command, "15", 2) == 0) {
 80014dc:	2202      	movs	r2, #2
 80014de:	496f      	ldr	r1, [pc, #444]	@ (800169c <uart_decoder+0x518>)
 80014e0:	486f      	ldr	r0, [pc, #444]	@ (80016a0 <uart_decoder+0x51c>)
 80014e2:	f005 f96e 	bl	80067c2 <strncmp>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <uart_decoder+0x36e>
				solV_15_ON();
 80014ec:	f001 fc68 	bl	8002dc0 <solV_15_ON>
 80014f0:	e0cd      	b.n	800168e <uart_decoder+0x50a>
			} else if (strncmp(command, "16", 2) == 0) {
 80014f2:	2202      	movs	r2, #2
 80014f4:	496b      	ldr	r1, [pc, #428]	@ (80016a4 <uart_decoder+0x520>)
 80014f6:	486a      	ldr	r0, [pc, #424]	@ (80016a0 <uart_decoder+0x51c>)
 80014f8:	f005 f963 	bl	80067c2 <strncmp>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d102      	bne.n	8001508 <uart_decoder+0x384>
				solV_16_ON();
 8001502:	f001 fc75 	bl	8002df0 <solV_16_ON>
 8001506:	e0c2      	b.n	800168e <uart_decoder+0x50a>
			} else if (strncmp(command, "17", 2) == 0) {
 8001508:	2202      	movs	r2, #2
 800150a:	4967      	ldr	r1, [pc, #412]	@ (80016a8 <uart_decoder+0x524>)
 800150c:	4864      	ldr	r0, [pc, #400]	@ (80016a0 <uart_decoder+0x51c>)
 800150e:	f005 f958 	bl	80067c2 <strncmp>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <uart_decoder+0x39a>
				solV_17_ON();
 8001518:	f001 fc82 	bl	8002e20 <solV_17_ON>
 800151c:	e0b7      	b.n	800168e <uart_decoder+0x50a>
			} else if (strncmp(command, "18", 2) == 0) {
 800151e:	2202      	movs	r2, #2
 8001520:	4962      	ldr	r1, [pc, #392]	@ (80016ac <uart_decoder+0x528>)
 8001522:	485f      	ldr	r0, [pc, #380]	@ (80016a0 <uart_decoder+0x51c>)
 8001524:	f005 f94d 	bl	80067c2 <strncmp>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d102      	bne.n	8001534 <uart_decoder+0x3b0>
				solV_18_ON();
 800152e:	f001 fc8f 	bl	8002e50 <solV_18_ON>
 8001532:	e0ac      	b.n	800168e <uart_decoder+0x50a>

			} else if (strncmp(command, "Start", 5) == 0) {
 8001534:	2205      	movs	r2, #5
 8001536:	495e      	ldr	r1, [pc, #376]	@ (80016b0 <uart_decoder+0x52c>)
 8001538:	4859      	ldr	r0, [pc, #356]	@ (80016a0 <uart_decoder+0x51c>)
 800153a:	f005 f942 	bl	80067c2 <strncmp>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10d      	bne.n	8001560 <uart_decoder+0x3dc>
				test1 = 0;
 8001544:	4b5b      	ldr	r3, [pc, #364]	@ (80016b4 <uart_decoder+0x530>)
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
				systemRunning = 1;
 800154a:	4b5b      	ldr	r3, [pc, #364]	@ (80016b8 <uart_decoder+0x534>)
 800154c:	2201      	movs	r2, #1
 800154e:	601a      	str	r2, [r3, #0]
				isRunning=1;
 8001550:	4b5a      	ldr	r3, [pc, #360]	@ (80016bc <uart_decoder+0x538>)
 8001552:	2201      	movs	r2, #1
 8001554:	601a      	str	r2, [r3, #0]
				solV_16_OFF();
 8001556:	f001 fc57 	bl	8002e08 <solV_16_OFF>
				solV_12_OFF();
 800155a:	f001 fbf5 	bl	8002d48 <solV_12_OFF>
 800155e:	e096      	b.n	800168e <uart_decoder+0x50a>

			} else if (strncmp(command, "stop", 5) == 0) {
 8001560:	4957      	ldr	r1, [pc, #348]	@ (80016c0 <uart_decoder+0x53c>)
 8001562:	484f      	ldr	r0, [pc, #316]	@ (80016a0 <uart_decoder+0x51c>)
 8001564:	f7fe fe54 	bl	8000210 <strcmp>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d108      	bne.n	8001580 <uart_decoder+0x3fc>
				systemRunning = 0;
 800156e:	4b52      	ldr	r3, [pc, #328]	@ (80016b8 <uart_decoder+0x534>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
				isRunning=0;
 8001574:	4b51      	ldr	r3, [pc, #324]	@ (80016bc <uart_decoder+0x538>)
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
				solV_blow_OFF();
 800157a:	f001 fc8d 	bl	8002e98 <solV_blow_OFF>
 800157e:	e086      	b.n	800168e <uart_decoder+0x50a>


			} else if (strncmp(command, "reset", 5) == 0) {
 8001580:	2205      	movs	r2, #5
 8001582:	4950      	ldr	r1, [pc, #320]	@ (80016c4 <uart_decoder+0x540>)
 8001584:	4846      	ldr	r0, [pc, #280]	@ (80016a0 <uart_decoder+0x51c>)
 8001586:	f005 f91c 	bl	80067c2 <strncmp>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <uart_decoder+0x412>
				LED_Sequence_stop();
 8001590:	f001 fa72 	bl	8002a78 <LED_Sequence_stop>
 8001594:	e07b      	b.n	800168e <uart_decoder+0x50a>

			} else if (strncmp(command, "force", 5) == 0) {
 8001596:	2205      	movs	r2, #5
 8001598:	494b      	ldr	r1, [pc, #300]	@ (80016c8 <uart_decoder+0x544>)
 800159a:	4841      	ldr	r0, [pc, #260]	@ (80016a0 <uart_decoder+0x51c>)
 800159c:	f005 f911 	bl	80067c2 <strncmp>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d104      	bne.n	80015b0 <uart_decoder+0x42c>

				solV_16_ON();
 80015a6:	f001 fc23 	bl	8002df0 <solV_16_ON>
				solV_12_ON();
 80015aa:	f001 fbc1 	bl	8002d30 <solV_12_ON>
 80015ae:	e06e      	b.n	800168e <uart_decoder+0x50a>


			} else if (strncmp(command, "motors", 6) == 0) {
 80015b0:	2206      	movs	r2, #6
 80015b2:	4946      	ldr	r1, [pc, #280]	@ (80016cc <uart_decoder+0x548>)
 80015b4:	483a      	ldr	r0, [pc, #232]	@ (80016a0 <uart_decoder+0x51c>)
 80015b6:	f005 f904 	bl	80067c2 <strncmp>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d113      	bne.n	80015e8 <uart_decoder+0x464>

				uint8_t print[] = "rp go\n";
 80015c0:	4a43      	ldr	r2, [pc, #268]	@ (80016d0 <uart_decoder+0x54c>)
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015ca:	6018      	str	r0, [r3, #0]
 80015cc:	3304      	adds	r3, #4
 80015ce:	8019      	strh	r1, [r3, #0]
 80015d0:	3302      	adds	r3, #2
 80015d2:	0c0a      	lsrs	r2, r1, #16
 80015d4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart5, print, sizeof(print) - 1,
 80015d6:	f107 011c 	add.w	r1, r7, #28
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
 80015de:	2206      	movs	r2, #6
 80015e0:	483c      	ldr	r0, [pc, #240]	@ (80016d4 <uart_decoder+0x550>)
 80015e2:	f003 f9c7 	bl	8004974 <HAL_UART_Transmit>
 80015e6:	e052      	b.n	800168e <uart_decoder+0x50a>
						HAL_MAX_DELAY);

			} else if (strncmp(command, "roll", 4) == 0) {
 80015e8:	2204      	movs	r2, #4
 80015ea:	493b      	ldr	r1, [pc, #236]	@ (80016d8 <uart_decoder+0x554>)
 80015ec:	482c      	ldr	r0, [pc, #176]	@ (80016a0 <uart_decoder+0x51c>)
 80015ee:	f005 f8e8 	bl	80067c2 <strncmp>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d122      	bne.n	800163e <uart_decoder+0x4ba>
				token = strtok(NULL, ",");
 80015f8:	4938      	ldr	r1, [pc, #224]	@ (80016dc <uart_decoder+0x558>)
 80015fa:	2000      	movs	r0, #0
 80015fc:	f005 f8f4 	bl	80067e8 <strtok>
 8001600:	62f8      	str	r0, [r7, #44]	@ 0x2c
				uint8_t print[] = "roll go\n";
 8001602:	4a37      	ldr	r2, [pc, #220]	@ (80016e0 <uart_decoder+0x55c>)
 8001604:	f107 0310 	add.w	r3, r7, #16
 8001608:	ca07      	ldmia	r2, {r0, r1, r2}
 800160a:	c303      	stmia	r3!, {r0, r1}
 800160c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart5, print, sizeof(print) - 1,
 800160e:	f107 0110 	add.w	r1, r7, #16
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
 8001616:	2208      	movs	r2, #8
 8001618:	482e      	ldr	r0, [pc, #184]	@ (80016d4 <uart_decoder+0x550>)
 800161a:	f003 f9ab 	bl	8004974 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				motor1.set_desired_angle(&motor2, atof(token));
 800161e:	4b31      	ldr	r3, [pc, #196]	@ (80016e4 <uart_decoder+0x560>)
 8001620:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8001622:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001624:	f004 f9ac 	bl	8005980 <atof>
 8001628:	eeb0 7a40 	vmov.f32	s14, s0
 800162c:	eef0 7a60 	vmov.f32	s15, s1
 8001630:	eeb0 0a47 	vmov.f32	s0, s14
 8001634:	eef0 0a67 	vmov.f32	s1, s15
 8001638:	482b      	ldr	r0, [pc, #172]	@ (80016e8 <uart_decoder+0x564>)
 800163a:	47a0      	blx	r4
 800163c:	e027      	b.n	800168e <uart_decoder+0x50a>
			} else if (strncmp(command, "pitch", 5) == 0) {
 800163e:	2205      	movs	r2, #5
 8001640:	492a      	ldr	r1, [pc, #168]	@ (80016ec <uart_decoder+0x568>)
 8001642:	4817      	ldr	r0, [pc, #92]	@ (80016a0 <uart_decoder+0x51c>)
 8001644:	f005 f8bd 	bl	80067c2 <strncmp>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d11f      	bne.n	800168e <uart_decoder+0x50a>
				token = strtok(NULL, ",");
 800164e:	4923      	ldr	r1, [pc, #140]	@ (80016dc <uart_decoder+0x558>)
 8001650:	2000      	movs	r0, #0
 8001652:	f005 f8c9 	bl	80067e8 <strtok>
 8001656:	62f8      	str	r0, [r7, #44]	@ 0x2c
				//				step_go_degree(atof(token));
				uint8_t print[] = "pitch go\n";
 8001658:	4a25      	ldr	r2, [pc, #148]	@ (80016f0 <uart_decoder+0x56c>)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	ca07      	ldmia	r2, {r0, r1, r2}
 800165e:	c303      	stmia	r3!, {r0, r1}
 8001660:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart5, print, sizeof(print) - 1,
 8001662:	1d39      	adds	r1, r7, #4
 8001664:	f04f 33ff 	mov.w	r3, #4294967295
 8001668:	2209      	movs	r2, #9
 800166a:	481a      	ldr	r0, [pc, #104]	@ (80016d4 <uart_decoder+0x550>)
 800166c:	f003 f982 	bl	8004974 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				motor1.set_desired_angle(&motor1, atof(token));
 8001670:	4b1c      	ldr	r3, [pc, #112]	@ (80016e4 <uart_decoder+0x560>)
 8001672:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8001674:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001676:	f004 f983 	bl	8005980 <atof>
 800167a:	eeb0 7a40 	vmov.f32	s14, s0
 800167e:	eef0 7a60 	vmov.f32	s15, s1
 8001682:	eeb0 0a47 	vmov.f32	s0, s14
 8001686:	eef0 0a67 	vmov.f32	s1, s15
 800168a:	4816      	ldr	r0, [pc, #88]	@ (80016e4 <uart_decoder+0x560>)
 800168c:	47a0      	blx	r4
			}
		}
		uart_flag = 0;
 800168e:	4b19      	ldr	r3, [pc, #100]	@ (80016f4 <uart_decoder+0x570>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
	}
}
 8001694:	bf00      	nop
 8001696:	3734      	adds	r7, #52	@ 0x34
 8001698:	46bd      	mov	sp, r7
 800169a:	bd90      	pop	{r4, r7, pc}
 800169c:	080086c4 	.word	0x080086c4
 80016a0:	20000298 	.word	0x20000298
 80016a4:	080086c8 	.word	0x080086c8
 80016a8:	080086cc 	.word	0x080086cc
 80016ac:	080086d0 	.word	0x080086d0
 80016b0:	080086d4 	.word	0x080086d4
 80016b4:	20000338 	.word	0x20000338
 80016b8:	2000031c 	.word	0x2000031c
 80016bc:	20000310 	.word	0x20000310
 80016c0:	080086dc 	.word	0x080086dc
 80016c4:	080086e4 	.word	0x080086e4
 80016c8:	080086ec 	.word	0x080086ec
 80016cc:	080086f4 	.word	0x080086f4
 80016d0:	08008714 	.word	0x08008714
 80016d4:	200002ac 	.word	0x200002ac
 80016d8:	080086fc 	.word	0x080086fc
 80016dc:	08008660 	.word	0x08008660
 80016e0:	0800871c 	.word	0x0800871c
 80016e4:	20000358 	.word	0x20000358
 80016e8:	200003a0 	.word	0x200003a0
 80016ec:	08008704 	.word	0x08008704
 80016f0:	08008728 	.word	0x08008728
 80016f4:	20000295 	.word	0x20000295

080016f8 <Polling_Buttons>:


void Polling_Buttons(void) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80016fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001700:	4838      	ldr	r0, [pc, #224]	@ (80017e4 <Polling_Buttons+0xec>)
 8001702:	f002 fa9b 	bl	8003c3c <HAL_GPIO_ReadPin>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d11d      	bne.n	8001748 <Polling_Buttons+0x50>
		if (HAL_GetTick() - LastTimePC13 > DEBOUNCE_DELAY){
 800170c:	f001 ff2e 	bl	800356c <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	4b35      	ldr	r3, [pc, #212]	@ (80017e8 <Polling_Buttons+0xf0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b64      	cmp	r3, #100	@ 0x64
 800171a:	d915      	bls.n	8001748 <Polling_Buttons+0x50>
			LastTimePC13 = HAL_GetTick();
 800171c:	f001 ff26 	bl	800356c <HAL_GetTick>
 8001720:	4603      	mov	r3, r0
 8001722:	4a31      	ldr	r2, [pc, #196]	@ (80017e8 <Polling_Buttons+0xf0>)
 8001724:	6013      	str	r3, [r2, #0]

			emergencyStop = 1;
 8001726:	4b31      	ldr	r3, [pc, #196]	@ (80017ec <Polling_Buttons+0xf4>)
 8001728:	2201      	movs	r2, #1
 800172a:	601a      	str	r2, [r3, #0]
			Stop_All();
 800172c:	f000 f93c 	bl	80019a8 <Stop_All>
			currentSequence = 0;
 8001730:	4b2f      	ldr	r3, [pc, #188]	@ (80017f0 <Polling_Buttons+0xf8>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
			systemRunning = 0;
 8001736:	4b2f      	ldr	r3, [pc, #188]	@ (80017f4 <Polling_Buttons+0xfc>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
			ledSequence = 1;
 800173c:	4b2e      	ldr	r3, [pc, #184]	@ (80017f8 <Polling_Buttons+0x100>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]
			sequencePaused = 0;
 8001742:	4b2e      	ldr	r3, [pc, #184]	@ (80017fc <Polling_Buttons+0x104>)
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
		}
	}

	if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == GPIO_PIN_RESET) {
 8001748:	2140      	movs	r1, #64	@ 0x40
 800174a:	482d      	ldr	r0, [pc, #180]	@ (8001800 <Polling_Buttons+0x108>)
 800174c:	f002 fa76 	bl	8003c3c <HAL_GPIO_ReadPin>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d134      	bne.n	80017c0 <Polling_Buttons+0xc8>
		if (HAL_GetTick() - LastTimePE6>DEBOUNCE_DELAY){
 8001756:	f001 ff09 	bl	800356c <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	4b29      	ldr	r3, [pc, #164]	@ (8001804 <Polling_Buttons+0x10c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	@ 0x64
 8001764:	d93c      	bls.n	80017e0 <Polling_Buttons+0xe8>
			LastTimePE6=HAL_GetTick();
 8001766:	f001 ff01 	bl	800356c <HAL_GetTick>
 800176a:	4603      	mov	r3, r0
 800176c:	4a25      	ldr	r2, [pc, #148]	@ (8001804 <Polling_Buttons+0x10c>)
 800176e:	6013      	str	r3, [r2, #0]
			if (Laststate == 0) {
 8001770:	4b25      	ldr	r3, [pc, #148]	@ (8001808 <Polling_Buttons+0x110>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d133      	bne.n	80017e0 <Polling_Buttons+0xe8>
				Laststate = 1;
 8001778:	4b23      	ldr	r3, [pc, #140]	@ (8001808 <Polling_Buttons+0x110>)
 800177a:	2201      	movs	r2, #1
 800177c:	601a      	str	r2, [r3, #0]
				testflag++;
 800177e:	4b23      	ldr	r3, [pc, #140]	@ (800180c <Polling_Buttons+0x114>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	3301      	adds	r3, #1
 8001784:	4a21      	ldr	r2, [pc, #132]	@ (800180c <Polling_Buttons+0x114>)
 8001786:	6013      	str	r3, [r2, #0]
				if (emergencyStop == 0) {
 8001788:	4b18      	ldr	r3, [pc, #96]	@ (80017ec <Polling_Buttons+0xf4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d127      	bne.n	80017e0 <Polling_Buttons+0xe8>
					if (systemRunning == 0) {
 8001790:	4b18      	ldr	r3, [pc, #96]	@ (80017f4 <Polling_Buttons+0xfc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d106      	bne.n	80017a6 <Polling_Buttons+0xae>
						systemRunning = 1;
 8001798:	4b16      	ldr	r3, [pc, #88]	@ (80017f4 <Polling_Buttons+0xfc>)
 800179a:	2201      	movs	r2, #1
 800179c:	601a      	str	r2, [r3, #0]
						isRunning = 1;
 800179e:	4b1c      	ldr	r3, [pc, #112]	@ (8001810 <Polling_Buttons+0x118>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	601a      	str	r2, [r3, #0]
			LastTimePE6=HAL_GetTick();
			Laststate = 0;

		}
	}
}
 80017a4:	e01c      	b.n	80017e0 <Polling_Buttons+0xe8>
					} else if (systemRunning == 1) {
 80017a6:	4b13      	ldr	r3, [pc, #76]	@ (80017f4 <Polling_Buttons+0xfc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d118      	bne.n	80017e0 <Polling_Buttons+0xe8>
						systemRunning = 0;
 80017ae:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <Polling_Buttons+0xfc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
						isRunning = 0;
 80017b4:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <Polling_Buttons+0x118>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
						solV_blow_OFF();
 80017ba:	f001 fb6d 	bl	8002e98 <solV_blow_OFF>
}
 80017be:	e00f      	b.n	80017e0 <Polling_Buttons+0xe8>
		if (HAL_GetTick() - LastTimePE6>DEBOUNCE_DELAY){
 80017c0:	f001 fed4 	bl	800356c <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <Polling_Buttons+0x10c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b64      	cmp	r3, #100	@ 0x64
 80017ce:	d907      	bls.n	80017e0 <Polling_Buttons+0xe8>
			LastTimePE6=HAL_GetTick();
 80017d0:	f001 fecc 	bl	800356c <HAL_GetTick>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001804 <Polling_Buttons+0x10c>)
 80017d8:	6013      	str	r3, [r2, #0]
			Laststate = 0;
 80017da:	4b0b      	ldr	r3, [pc, #44]	@ (8001808 <Polling_Buttons+0x110>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40020800 	.word	0x40020800
 80017e8:	20000354 	.word	0x20000354
 80017ec:	2000030c 	.word	0x2000030c
 80017f0:	20000308 	.word	0x20000308
 80017f4:	2000031c 	.word	0x2000031c
 80017f8:	20000320 	.word	0x20000320
 80017fc:	20000324 	.word	0x20000324
 8001800:	40021000 	.word	0x40021000
 8001804:	20000350 	.word	0x20000350
 8001808:	20000498 	.word	0x20000498
 800180c:	20000314 	.word	0x20000314
 8001810:	20000310 	.word	0x20000310
 8001814:	00000000 	.word	0x00000000

08001818 <motor_pos_init>:
void motor_pos_init(void){
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	solV_8_ON();
 800181c:	f001 fa28 	bl	8002c70 <solV_8_ON>
	solV_12_ON();solV_16_ON();
 8001820:	f001 fa86 	bl	8002d30 <solV_12_ON>
 8001824:	f001 fae4 	bl	8002df0 <solV_16_ON>
	solV_10_OFF();
 8001828:	f001 fa5e 	bl	8002ce8 <solV_10_OFF>
	solV_4_OFF();
 800182c:	f001 f9cc 	bl	8002bc8 <solV_4_OFF>
	solV_5_OFF();
 8001830:	f001 f9e2 	bl	8002bf8 <solV_5_OFF>
	step=0;
 8001834:	4b4e      	ldr	r3, [pc, #312]	@ (8001970 <motor_pos_init+0x158>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
	step2=0;
 800183a:	4b4e      	ldr	r3, [pc, #312]	@ (8001974 <motor_pos_init+0x15c>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
	//step3=0;
	step4=0;
 8001840:	4b4d      	ldr	r3, [pc, #308]	@ (8001978 <motor_pos_init+0x160>)
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]

	motor1.step_speed=5;
 8001846:	4b4d      	ldr	r3, [pc, #308]	@ (800197c <motor_pos_init+0x164>)
 8001848:	2205      	movs	r2, #5
 800184a:	639a      	str	r2, [r3, #56]	@ 0x38
	motor2.step_speed=250;
 800184c:	4b4c      	ldr	r3, [pc, #304]	@ (8001980 <motor_pos_init+0x168>)
 800184e:	22fa      	movs	r2, #250	@ 0xfa
 8001850:	639a      	str	r2, [r3, #56]	@ 0x38
	motor3.step_speed=50;
 8001852:	4b4c      	ldr	r3, [pc, #304]	@ (8001984 <motor_pos_init+0x16c>)
 8001854:	2232      	movs	r2, #50	@ 0x32
 8001856:	639a      	str	r2, [r3, #56]	@ 0x38
	motor4.step_speed=250;
 8001858:	4b4b      	ldr	r3, [pc, #300]	@ (8001988 <motor_pos_init+0x170>)
 800185a:	22fa      	movs	r2, #250	@ 0xfa
 800185c:	639a      	str	r2, [r3, #56]	@ 0x38
	motor1.set_desired_angle(&motor1, 0);
 800185e:	4b47      	ldr	r3, [pc, #284]	@ (800197c <motor_pos_init+0x164>)
 8001860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001862:	ed9f 0b3d 	vldr	d0, [pc, #244]	@ 8001958 <motor_pos_init+0x140>
 8001866:	4845      	ldr	r0, [pc, #276]	@ (800197c <motor_pos_init+0x164>)
 8001868:	4798      	blx	r3
	motor2.set_desired_angle(&motor2, 0);
 800186a:	4b45      	ldr	r3, [pc, #276]	@ (8001980 <motor_pos_init+0x168>)
 800186c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800186e:	ed9f 0b3a 	vldr	d0, [pc, #232]	@ 8001958 <motor_pos_init+0x140>
 8001872:	4843      	ldr	r0, [pc, #268]	@ (8001980 <motor_pos_init+0x168>)
 8001874:	4798      	blx	r3
	motor3.set_desired_angle(&motor3, 0);
 8001876:	4b43      	ldr	r3, [pc, #268]	@ (8001984 <motor_pos_init+0x16c>)
 8001878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800187a:	ed9f 0b37 	vldr	d0, [pc, #220]	@ 8001958 <motor_pos_init+0x140>
 800187e:	4841      	ldr	r0, [pc, #260]	@ (8001984 <motor_pos_init+0x16c>)
 8001880:	4798      	blx	r3
	motor4.set_desired_angle(&motor4, 0);
 8001882:	4b41      	ldr	r3, [pc, #260]	@ (8001988 <motor_pos_init+0x170>)
 8001884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001886:	ed9f 0b34 	vldr	d0, [pc, #208]	@ 8001958 <motor_pos_init+0x140>
 800188a:	483f      	ldr	r0, [pc, #252]	@ (8001988 <motor_pos_init+0x170>)
 800188c:	4798      	blx	r3
	//-----------MOTOR A initialize--------------------//
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0)){ //sensor off
 800188e:	2101      	movs	r1, #1
 8001890:	483e      	ldr	r0, [pc, #248]	@ (800198c <motor_pos_init+0x174>)
 8001892:	f002 f9d3 	bl	8003c3c <HAL_GPIO_ReadPin>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d00b      	beq.n	80018b4 <motor_pos_init+0x9c>
		//		motor1.set_desired_angle(&motor1, -10);
		motor1.current_angle_step = 25000;//25000=>12500
 800189c:	4b37      	ldr	r3, [pc, #220]	@ (800197c <motor_pos_init+0x164>)
 800189e:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80018a2:	615a      	str	r2, [r3, #20]
		//HAL_NVIC_EnableIRQ(EXTI0_IRQn);
		motor1_flag = 0;
 80018a4:	493a      	ldr	r1, [pc, #232]	@ (8001990 <motor_pos_init+0x178>)
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	e9c1 2300 	strd	r2, r3, [r1]
 80018b2:	e008      	b.n	80018c6 <motor_pos_init+0xae>
	} else {
		//		motor1.set_desired_angle(&motor1, 10);
		motor1.current_angle_step = -1000;//-1000=>-500
 80018b4:	4b31      	ldr	r3, [pc, #196]	@ (800197c <motor_pos_init+0x164>)
 80018b6:	4a37      	ldr	r2, [pc, #220]	@ (8001994 <motor_pos_init+0x17c>)
 80018b8:	615a      	str	r2, [r3, #20]
		motor1_flag =5000;
 80018ba:	4935      	ldr	r1, [pc, #212]	@ (8001990 <motor_pos_init+0x178>)
 80018bc:	a328      	add	r3, pc, #160	@ (adr r3, 8001960 <motor_pos_init+0x148>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	e9c1 2300 	strd	r2, r3, [r1]
	}
	//Initialize_Motors_StepByStep();
	//-----------MOTOR C initialize--------------------//

	if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_2)){ //sensor off
 80018c6:	2104      	movs	r1, #4
 80018c8:	4833      	ldr	r0, [pc, #204]	@ (8001998 <motor_pos_init+0x180>)
 80018ca:	f002 f9b7 	bl	8003c3c <HAL_GPIO_ReadPin>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00b      	beq.n	80018ec <motor_pos_init+0xd4>
		//		motor1.set_desired_angle(&motor1, -10);
		motor3.current_angle_step = 1000; //5000=> 500
 80018d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001984 <motor_pos_init+0x16c>)
 80018d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018da:	615a      	str	r2, [r3, #20]
		//HAL_NVIC_EnableIRQ(EXTI0_IRQn);
		motor3_flag = 0;
 80018dc:	492f      	ldr	r1, [pc, #188]	@ (800199c <motor_pos_init+0x184>)
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	e9c1 2300 	strd	r2, r3, [r1]
 80018ea:	e008      	b.n	80018fe <motor_pos_init+0xe6>
	} else {
		//		motor1.set_desired_angle(&motor1, 10);
		motor3.current_angle_step = -1000;//-5000=> -500
 80018ec:	4b25      	ldr	r3, [pc, #148]	@ (8001984 <motor_pos_init+0x16c>)
 80018ee:	4a29      	ldr	r2, [pc, #164]	@ (8001994 <motor_pos_init+0x17c>)
 80018f0:	615a      	str	r2, [r3, #20]
		motor3_flag =5000;
 80018f2:	492a      	ldr	r1, [pc, #168]	@ (800199c <motor_pos_init+0x184>)
 80018f4:	a31a      	add	r3, pc, #104	@ (adr r3, 8001960 <motor_pos_init+0x148>)
 80018f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fa:	e9c1 2300 	strd	r2, r3, [r1]

	}
	motor2.current_angle_step = -100;
 80018fe:	4b20      	ldr	r3, [pc, #128]	@ (8001980 <motor_pos_init+0x168>)
 8001900:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8001904:	615a      	str	r2, [r3, #20]
	//-----------MOTOR D initialize--------------------//
	if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3)){ //sensor off
 8001906:	2108      	movs	r1, #8
 8001908:	4823      	ldr	r0, [pc, #140]	@ (8001998 <motor_pos_init+0x180>)
 800190a:	f002 f997 	bl	8003c3c <HAL_GPIO_ReadPin>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00a      	beq.n	800192a <motor_pos_init+0x112>
		motor4.current_angle_step = -2400;//4000=> 400
 8001914:	4b1c      	ldr	r3, [pc, #112]	@ (8001988 <motor_pos_init+0x170>)
 8001916:	4a22      	ldr	r2, [pc, #136]	@ (80019a0 <motor_pos_init+0x188>)
 8001918:	615a      	str	r2, [r3, #20]
		motor4_flag = 0;
 800191a:	4922      	ldr	r1, [pc, #136]	@ (80019a4 <motor_pos_init+0x18c>)
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	e9c1 2300 	strd	r2, r3, [r1]
 8001928:	e009      	b.n	800193e <motor_pos_init+0x126>
	} else {
		motor4.current_angle_step = 2000;//-4000=> -400
 800192a:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <motor_pos_init+0x170>)
 800192c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001930:	615a      	str	r2, [r3, #20]
		motor4_flag =10000;
 8001932:	491c      	ldr	r1, [pc, #112]	@ (80019a4 <motor_pos_init+0x18c>)
 8001934:	a30c      	add	r3, pc, #48	@ (adr r3, 8001968 <motor_pos_init+0x150>)
 8001936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193a:	e9c1 2300 	strd	r2, r3, [r1]
	}
	HAL_Delay(2000);
 800193e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001942:	f001 fe1f 	bl	8003584 <HAL_Delay>
	solV_12_OFF();solV_16_OFF();solV_9_OFF();
 8001946:	f001 f9ff 	bl	8002d48 <solV_12_OFF>
 800194a:	f001 fa5d 	bl	8002e08 <solV_16_OFF>
 800194e:	f001 f9b3 	bl	8002cb8 <solV_9_OFF>
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
	...
 8001964:	40b38800 	.word	0x40b38800
 8001968:	00000000 	.word	0x00000000
 800196c:	40c38800 	.word	0x40c38800
 8001970:	20000340 	.word	0x20000340
 8001974:	20000344 	.word	0x20000344
 8001978:	2000034c 	.word	0x2000034c
 800197c:	20000358 	.word	0x20000358
 8001980:	200003a0 	.word	0x200003a0
 8001984:	200003e8 	.word	0x200003e8
 8001988:	20000430 	.word	0x20000430
 800198c:	40020c00 	.word	0x40020c00
 8001990:	20000478 	.word	0x20000478
 8001994:	fffffc18 	.word	0xfffffc18
 8001998:	40021400 	.word	0x40021400
 800199c:	20000488 	.word	0x20000488
 80019a0:	fffff6a0 	.word	0xfffff6a0
 80019a4:	20000490 	.word	0x20000490

080019a8 <Stop_All>:

void Stop_All(void) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	f240 71ec 	movw	r1, #2028	@ 0x7ec
 80019b2:	481d      	ldr	r0, [pc, #116]	@ (8001a28 <Stop_All+0x80>)
 80019b4:	f002 f95a 	bl	8003c6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7 , GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	2180      	movs	r1, #128	@ 0x80
 80019bc:	481b      	ldr	r0, [pc, #108]	@ (8001a2c <Stop_All+0x84>)
 80019be:	f002 f955 	bl	8003c6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_9, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	f44f 711c 	mov.w	r1, #624	@ 0x270
 80019c8:	4819      	ldr	r0, [pc, #100]	@ (8001a30 <Stop_All+0x88>)
 80019ca:	f002 f94f 	bl	8003c6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 |GPIO_PIN_11 | GPIO_PIN_13 , GPIO_PIN_RESET);
 80019ce:	2200      	movs	r2, #0
 80019d0:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 80019d4:	4817      	ldr	r0, [pc, #92]	@ (8001a34 <Stop_All+0x8c>)
 80019d6:	f002 f949 	bl	8003c6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12 | GPIO_PIN_10 | GPIO_PIN_14, GPIO_PIN_RESET);
 80019da:	2200      	movs	r2, #0
 80019dc:	f44f 41a8 	mov.w	r1, #21504	@ 0x5400
 80019e0:	4815      	ldr	r0, [pc, #84]	@ (8001a38 <Stop_All+0x90>)
 80019e2:	f002 f943 	bl	8003c6c <HAL_GPIO_WritePin>


	motor1.set_desired_angle(&motor1, 0);
 80019e6:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <Stop_All+0x94>)
 80019e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019ea:	ed9f 0b0d 	vldr	d0, [pc, #52]	@ 8001a20 <Stop_All+0x78>
 80019ee:	4813      	ldr	r0, [pc, #76]	@ (8001a3c <Stop_All+0x94>)
 80019f0:	4798      	blx	r3
	motor2.set_desired_angle(&motor2, 0);
 80019f2:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <Stop_All+0x98>)
 80019f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019f6:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8001a20 <Stop_All+0x78>
 80019fa:	4811      	ldr	r0, [pc, #68]	@ (8001a40 <Stop_All+0x98>)
 80019fc:	4798      	blx	r3
	motor3.set_desired_angle(&motor3, 0);
 80019fe:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <Stop_All+0x9c>)
 8001a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a02:	ed9f 0b07 	vldr	d0, [pc, #28]	@ 8001a20 <Stop_All+0x78>
 8001a06:	480f      	ldr	r0, [pc, #60]	@ (8001a44 <Stop_All+0x9c>)
 8001a08:	4798      	blx	r3
	motor4.set_desired_angle(&motor4, 0);
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <Stop_All+0xa0>)
 8001a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a0e:	ed9f 0b04 	vldr	d0, [pc, #16]	@ 8001a20 <Stop_All+0x78>
 8001a12:	480d      	ldr	r0, [pc, #52]	@ (8001a48 <Stop_All+0xa0>)
 8001a14:	4798      	blx	r3
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	f3af 8000 	nop.w
	...
 8001a28:	40020000 	.word	0x40020000
 8001a2c:	40020800 	.word	0x40020800
 8001a30:	40020400 	.word	0x40020400
 8001a34:	40020c00 	.word	0x40020c00
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	20000358 	.word	0x20000358
 8001a40:	200003a0 	.word	0x200003a0
 8001a44:	200003e8 	.word	0x200003e8
 8001a48:	20000430 	.word	0x20000430
 8001a4c:	00000000 	.word	0x00000000

08001a50 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af02      	add	r7, sp, #8

	/* USER CODE BEGIN 1 */
	tf=1;
 8001a56:	4ba0      	ldr	r3, [pc, #640]	@ (8001cd8 <main+0x288>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a5c:	f001 fd20 	bl	80034a0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a60:	f000 f96e 	bl	8001d40 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a64:	f000 fa02 	bl	8001e6c <MX_GPIO_Init>
	MX_UART5_Init();
 8001a68:	f000 f9d6 	bl	8001e18 <MX_UART5_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart5, rx_buffer5, 1);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	499b      	ldr	r1, [pc, #620]	@ (8001cdc <main+0x28c>)
 8001a70:	489b      	ldr	r0, [pc, #620]	@ (8001ce0 <main+0x290>)
 8001a72:	f003 f80a 	bl	8004a8a <HAL_UART_Receive_IT>
	testflag++;
 8001a76:	4b9b      	ldr	r3, [pc, #620]	@ (8001ce4 <main+0x294>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	4a99      	ldr	r2, [pc, #612]	@ (8001ce4 <main+0x294>)
 8001a7e:	6013      	str	r3, [r2, #0]
	initStepMotor(&motor1, GPIOG, GPIO_PIN_7,GPIOG, GPIO_PIN_4);
 8001a80:	2310      	movs	r3, #16
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	4b98      	ldr	r3, [pc, #608]	@ (8001ce8 <main+0x298>)
 8001a86:	2280      	movs	r2, #128	@ 0x80
 8001a88:	4997      	ldr	r1, [pc, #604]	@ (8001ce8 <main+0x298>)
 8001a8a:	4898      	ldr	r0, [pc, #608]	@ (8001cec <main+0x29c>)
 8001a8c:	f001 fad0 	bl	8003030 <initStepMotor>
	motor1.deg_step_ratio = 360.0/5000.0;
 8001a90:	4996      	ldr	r1, [pc, #600]	@ (8001cec <main+0x29c>)
 8001a92:	a38f      	add	r3, pc, #572	@ (adr r3, 8001cd0 <main+0x280>)
 8001a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a98:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	//initStepMotor(&motor2, GPIOF, GPIO_PIN_4,GPIOE, GPIO_PIN_8);//original code
	initStepMotor(&motor2, GPIOC, GPIO_PIN_4,GPIOF, GPIO_PIN_5); //changed code(temporal)
 8001a9c:	2320      	movs	r3, #32
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	4b93      	ldr	r3, [pc, #588]	@ (8001cf0 <main+0x2a0>)
 8001aa2:	2210      	movs	r2, #16
 8001aa4:	4993      	ldr	r1, [pc, #588]	@ (8001cf4 <main+0x2a4>)
 8001aa6:	4894      	ldr	r0, [pc, #592]	@ (8001cf8 <main+0x2a8>)
 8001aa8:	f001 fac2 	bl	8003030 <initStepMotor>
	initStepMotor(&motor3, GPIOF, GPIO_PIN_10,GPIOE, GPIO_PIN_7);
 8001aac:	2380      	movs	r3, #128	@ 0x80
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	4b92      	ldr	r3, [pc, #584]	@ (8001cfc <main+0x2ac>)
 8001ab2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ab6:	498e      	ldr	r1, [pc, #568]	@ (8001cf0 <main+0x2a0>)
 8001ab8:	4891      	ldr	r0, [pc, #580]	@ (8001d00 <main+0x2b0>)
 8001aba:	f001 fab9 	bl	8003030 <initStepMotor>
	initStepMotor(&motor4, GPIOD, GPIO_PIN_14,GPIOD, GPIO_PIN_15);
 8001abe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	4b8f      	ldr	r3, [pc, #572]	@ (8001d04 <main+0x2b4>)
 8001ac6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001aca:	498e      	ldr	r1, [pc, #568]	@ (8001d04 <main+0x2b4>)
 8001acc:	488e      	ldr	r0, [pc, #568]	@ (8001d08 <main+0x2b8>)
 8001ace:	f001 faaf 	bl	8003030 <initStepMotor>




	HAL_Delay(500);
 8001ad2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ad6:	f001 fd55 	bl	8003584 <HAL_Delay>
	motor_pos_init();
 8001ada:	f7ff fe9d 	bl	8001818 <motor_pos_init>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ade:	2006      	movs	r0, #6
 8001ae0:	f001 fe6b 	bl	80037ba <HAL_NVIC_EnableIRQ>
		////////////////////////////////TESTING//////////////////////

		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
		////////////////////////////////////////////////////

		testflag_hair=(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_0)== GPIO_PIN_SET);
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	4882      	ldr	r0, [pc, #520]	@ (8001cf0 <main+0x2a0>)
 8001ae8:	f002 f8a8 	bl	8003c3c <HAL_GPIO_ReadPin>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	bf0c      	ite	eq
 8001af2:	2301      	moveq	r3, #1
 8001af4:	2300      	movne	r3, #0
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b84      	ldr	r3, [pc, #528]	@ (8001d0c <main+0x2bc>)
 8001afc:	601a      	str	r2, [r3, #0]
		//		testflag== 2;
		uart_decoder();
 8001afe:	f7ff fb41 	bl	8001184 <uart_decoder>
		Polling_Buttons();
 8001b02:	f7ff fdf9 	bl	80016f8 <Polling_Buttons>
		motor1.step_while(&motor1);
 8001b06:	4b79      	ldr	r3, [pc, #484]	@ (8001cec <main+0x29c>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	4878      	ldr	r0, [pc, #480]	@ (8001cec <main+0x29c>)
 8001b0c:	4798      	blx	r3
		motor2.step_while(&motor2);
 8001b0e:	4b7a      	ldr	r3, [pc, #488]	@ (8001cf8 <main+0x2a8>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b12:	4879      	ldr	r0, [pc, #484]	@ (8001cf8 <main+0x2a8>)
 8001b14:	4798      	blx	r3
		motor3.step_while(&motor3);
 8001b16:	4b7a      	ldr	r3, [pc, #488]	@ (8001d00 <main+0x2b0>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	4879      	ldr	r0, [pc, #484]	@ (8001d00 <main+0x2b0>)
 8001b1c:	4798      	blx	r3
		motor4.step_while(&motor4);
 8001b1e:	4b7a      	ldr	r3, [pc, #488]	@ (8001d08 <main+0x2b8>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	4879      	ldr	r0, [pc, #484]	@ (8001d08 <main+0x2b8>)
 8001b24:	4798      	blx	r3



		//		flagexti = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_0);

		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0)){
 8001b26:	2101      	movs	r1, #1
 8001b28:	4876      	ldr	r0, [pc, #472]	@ (8001d04 <main+0x2b4>)
 8001b2a:	f002 f887 	bl	8003c3c <HAL_GPIO_ReadPin>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d02e      	beq.n	8001b92 <main+0x142>
			if(motor1_flag > 1){
 8001b34:	4b76      	ldr	r3, [pc, #472]	@ (8001d10 <main+0x2c0>)
 8001b36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	4b75      	ldr	r3, [pc, #468]	@ (8001d14 <main+0x2c4>)
 8001b40:	f7ff f812 	bl	8000b68 <__aeabi_dcmpgt>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00d      	beq.n	8001b66 <main+0x116>
				motor1_flag= motor1_flag -1 ;
 8001b4a:	4b71      	ldr	r3, [pc, #452]	@ (8001d10 <main+0x2c0>)
 8001b4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	4b6f      	ldr	r3, [pc, #444]	@ (8001d14 <main+0x2c4>)
 8001b56:	f7fe fbbf 	bl	80002d8 <__aeabi_dsub>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	496c      	ldr	r1, [pc, #432]	@ (8001d10 <main+0x2c0>)
 8001b60:	e9c1 2300 	strd	r2, r3, [r1]
 8001b64:	e015      	b.n	8001b92 <main+0x142>
			}
			else if (motor1_flag == 1 ) {
 8001b66:	4b6a      	ldr	r3, [pc, #424]	@ (8001d10 <main+0x2c0>)
 8001b68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	4b68      	ldr	r3, [pc, #416]	@ (8001d14 <main+0x2c4>)
 8001b72:	f7fe ffd1 	bl	8000b18 <__aeabi_dcmpeq>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00a      	beq.n	8001b92 <main+0x142>
				motor1.current_angle_step = 1200;//1200 =>600
 8001b7c:	4b5b      	ldr	r3, [pc, #364]	@ (8001cec <main+0x29c>)
 8001b7e:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8001b82:	615a      	str	r2, [r3, #20]
				motor1_flag = 0;
 8001b84:	4962      	ldr	r1, [pc, #392]	@ (8001d10 <main+0x2c0>)
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	e9c1 2300 	strd	r2, r3, [r1]
		//				motor2_flag = 0;
		//			}
		//		}
		//motor3.step_while(&motor3);

		if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_2)){
 8001b92:	2104      	movs	r1, #4
 8001b94:	4856      	ldr	r0, [pc, #344]	@ (8001cf0 <main+0x2a0>)
 8001b96:	f002 f851 	bl	8003c3c <HAL_GPIO_ReadPin>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d02e      	beq.n	8001bfe <main+0x1ae>
			if(motor3_flag > 1){
 8001ba0:	4b5d      	ldr	r3, [pc, #372]	@ (8001d18 <main+0x2c8>)
 8001ba2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	4b5a      	ldr	r3, [pc, #360]	@ (8001d14 <main+0x2c4>)
 8001bac:	f7fe ffdc 	bl	8000b68 <__aeabi_dcmpgt>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00d      	beq.n	8001bd2 <main+0x182>
				motor3_flag= motor3_flag - 1 ;
 8001bb6:	4b58      	ldr	r3, [pc, #352]	@ (8001d18 <main+0x2c8>)
 8001bb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	4b54      	ldr	r3, [pc, #336]	@ (8001d14 <main+0x2c4>)
 8001bc2:	f7fe fb89 	bl	80002d8 <__aeabi_dsub>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4953      	ldr	r1, [pc, #332]	@ (8001d18 <main+0x2c8>)
 8001bcc:	e9c1 2300 	strd	r2, r3, [r1]
 8001bd0:	e015      	b.n	8001bfe <main+0x1ae>
			}
			else if (motor3_flag == 1 ) {
 8001bd2:	4b51      	ldr	r3, [pc, #324]	@ (8001d18 <main+0x2c8>)
 8001bd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	4b4d      	ldr	r3, [pc, #308]	@ (8001d14 <main+0x2c4>)
 8001bde:	f7fe ff9b 	bl	8000b18 <__aeabi_dcmpeq>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00a      	beq.n	8001bfe <main+0x1ae>
				motor3.current_angle_step = 1600;//8000=> 800
 8001be8:	4b45      	ldr	r3, [pc, #276]	@ (8001d00 <main+0x2b0>)
 8001bea:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8001bee:	615a      	str	r2, [r3, #20]
				motor3_flag = 0;
 8001bf0:	4949      	ldr	r1, [pc, #292]	@ (8001d18 <main+0x2c8>)
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	e9c1 2300 	strd	r2, r3, [r1]
			}

			//motor4.step_while(&motor4);

		}if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3)){
 8001bfe:	2108      	movs	r1, #8
 8001c00:	483b      	ldr	r0, [pc, #236]	@ (8001cf0 <main+0x2a0>)
 8001c02:	f002 f81b 	bl	8003c3c <HAL_GPIO_ReadPin>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d02d      	beq.n	8001c68 <main+0x218>
			if(motor4_flag > 1){
 8001c0c:	4b43      	ldr	r3, [pc, #268]	@ (8001d1c <main+0x2cc>)
 8001c0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	4b3f      	ldr	r3, [pc, #252]	@ (8001d14 <main+0x2c4>)
 8001c18:	f7fe ffa6 	bl	8000b68 <__aeabi_dcmpgt>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00d      	beq.n	8001c3e <main+0x1ee>
				motor4_flag= motor4_flag - 1 ;
 8001c22:	4b3e      	ldr	r3, [pc, #248]	@ (8001d1c <main+0x2cc>)
 8001c24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	4b39      	ldr	r3, [pc, #228]	@ (8001d14 <main+0x2c4>)
 8001c2e:	f7fe fb53 	bl	80002d8 <__aeabi_dsub>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4939      	ldr	r1, [pc, #228]	@ (8001d1c <main+0x2cc>)
 8001c38:	e9c1 2300 	strd	r2, r3, [r1]
 8001c3c:	e014      	b.n	8001c68 <main+0x218>

			}
			else if (motor4_flag == 1 ) {
 8001c3e:	4b37      	ldr	r3, [pc, #220]	@ (8001d1c <main+0x2cc>)
 8001c40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	4b32      	ldr	r3, [pc, #200]	@ (8001d14 <main+0x2c4>)
 8001c4a:	f7fe ff65 	bl	8000b18 <__aeabi_dcmpeq>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d009      	beq.n	8001c68 <main+0x218>
				motor4.current_angle_step = -2000;//5000=> 500
 8001c54:	4b2c      	ldr	r3, [pc, #176]	@ (8001d08 <main+0x2b8>)
 8001c56:	4a32      	ldr	r2, [pc, #200]	@ (8001d20 <main+0x2d0>)
 8001c58:	615a      	str	r2, [r3, #20]
				motor4_flag = 0;
 8001c5a:	4930      	ldr	r1, [pc, #192]	@ (8001d1c <main+0x2cc>)
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	e9c1 2300 	strd	r2, r3, [r1]

			}
		}

		if (systemRunning == 1 && !emergencyStop) {
 8001c68:	4b2e      	ldr	r3, [pc, #184]	@ (8001d24 <main+0x2d4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d125      	bne.n	8001cbc <main+0x26c>
 8001c70:	4b2d      	ldr	r3, [pc, #180]	@ (8001d28 <main+0x2d8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d121      	bne.n	8001cbc <main+0x26c>
			//sw_test();

			LED_Sequence_01();
 8001c78:	f000 fa92 	bl	80021a0 <LED_Sequence_01>
			LED_Sequence_02();
 8001c7c:	f000 fb78 	bl	8002370 <LED_Sequence_02>
			LED_Sequence_04();
 8001c80:	f000 fe78 	bl	8002974 <LED_Sequence_04>
			//add_port_test();
			//LED_Sequence_stop();
			//LED_Sequence_test();
			if ((HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_0) == GPIO_PIN_SET) && step==6  && test1 ==0)
 8001c84:	2101      	movs	r1, #1
 8001c86:	481a      	ldr	r0, [pc, #104]	@ (8001cf0 <main+0x2a0>)
 8001c88:	f001 ffd8 	bl	8003c3c <HAL_GPIO_ReadPin>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d10a      	bne.n	8001ca8 <main+0x258>
 8001c92:	4b26      	ldr	r3, [pc, #152]	@ (8001d2c <main+0x2dc>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d106      	bne.n	8001ca8 <main+0x258>
 8001c9a:	4b25      	ldr	r3, [pc, #148]	@ (8001d30 <main+0x2e0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d102      	bne.n	8001ca8 <main+0x258>
			{
				hair_detect=1;
 8001ca2:	4b24      	ldr	r3, [pc, #144]	@ (8001d34 <main+0x2e4>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]

			}
			if (step2==13){
 8001ca8:	4b23      	ldr	r3, [pc, #140]	@ (8001d38 <main+0x2e8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b0d      	cmp	r3, #13
 8001cae:	d105      	bne.n	8001cbc <main+0x26c>
				hair_detect=0;
 8001cb0:	4b20      	ldr	r3, [pc, #128]	@ (8001d34 <main+0x2e4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
				sequence_01=1;
 8001cb6:	4b21      	ldr	r3, [pc, #132]	@ (8001d3c <main+0x2ec>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	601a      	str	r2, [r3, #0]



		}

		if (emergencyStop) {
 8001cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d28 <main+0x2d8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f43f af0f 	beq.w	8001ae4 <main+0x94>
			Stop_All();
 8001cc6:	f7ff fe6f 	bl	80019a8 <Stop_All>
		testflag_hair=(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_0)== GPIO_PIN_SET);
 8001cca:	e70b      	b.n	8001ae4 <main+0x94>
 8001ccc:	f3af 8000 	nop.w
 8001cd0:	8d4fdf3b 	.word	0x8d4fdf3b
 8001cd4:	3fb26e97 	.word	0x3fb26e97
 8001cd8:	200002f4 	.word	0x200002f4
 8001cdc:	20000214 	.word	0x20000214
 8001ce0:	200002ac 	.word	0x200002ac
 8001ce4:	20000314 	.word	0x20000314
 8001ce8:	40021800 	.word	0x40021800
 8001cec:	20000358 	.word	0x20000358
 8001cf0:	40021400 	.word	0x40021400
 8001cf4:	40020800 	.word	0x40020800
 8001cf8:	200003a0 	.word	0x200003a0
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	200003e8 	.word	0x200003e8
 8001d04:	40020c00 	.word	0x40020c00
 8001d08:	20000430 	.word	0x20000430
 8001d0c:	20000318 	.word	0x20000318
 8001d10:	20000478 	.word	0x20000478
 8001d14:	3ff00000 	.word	0x3ff00000
 8001d18:	20000488 	.word	0x20000488
 8001d1c:	20000490 	.word	0x20000490
 8001d20:	fffff830 	.word	0xfffff830
 8001d24:	2000031c 	.word	0x2000031c
 8001d28:	2000030c 	.word	0x2000030c
 8001d2c:	20000340 	.word	0x20000340
 8001d30:	20000338 	.word	0x20000338
 8001d34:	20000330 	.word	0x20000330
 8001d38:	20000344 	.word	0x20000344
 8001d3c:	20000000 	.word	0x20000000

08001d40 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b094      	sub	sp, #80	@ 0x50
 8001d44:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d46:	f107 031c 	add.w	r3, r7, #28
 8001d4a:	2234      	movs	r2, #52	@ 0x34
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f004 fd2f 	bl	80067b2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d54:	f107 0308 	add.w	r3, r7, #8
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001d64:	2300      	movs	r3, #0
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	4b29      	ldr	r3, [pc, #164]	@ (8001e10 <SystemClock_Config+0xd0>)
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6c:	4a28      	ldr	r2, [pc, #160]	@ (8001e10 <SystemClock_Config+0xd0>)
 8001d6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d72:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d74:	4b26      	ldr	r3, [pc, #152]	@ (8001e10 <SystemClock_Config+0xd0>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d80:	2300      	movs	r3, #0
 8001d82:	603b      	str	r3, [r7, #0]
 8001d84:	4b23      	ldr	r3, [pc, #140]	@ (8001e14 <SystemClock_Config+0xd4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001d8c:	4a21      	ldr	r2, [pc, #132]	@ (8001e14 <SystemClock_Config+0xd4>)
 8001d8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	4b1f      	ldr	r3, [pc, #124]	@ (8001e14 <SystemClock_Config+0xd4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001da0:	2302      	movs	r3, #2
 8001da2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001da4:	2301      	movs	r3, #1
 8001da6:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001da8:	2310      	movs	r3, #16
 8001daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dac:	2302      	movs	r3, #2
 8001dae:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001db0:	2300      	movs	r3, #0
 8001db2:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001db4:	2308      	movs	r3, #8
 8001db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 64;
 8001db8:	2340      	movs	r3, #64	@ 0x40
 8001dba:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc8:	f107 031c 	add.w	r3, r7, #28
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f002 fae3 	bl	8004398 <HAL_RCC_OscConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8001dd8:	f001 f89a 	bl	8002f10 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ddc:	230f      	movs	r3, #15
 8001dde:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de0:	2302      	movs	r3, #2
 8001de2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de4:	2300      	movs	r3, #0
 8001de6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001de8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dec:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	2102      	movs	r1, #2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f001 ff83 	bl	8003d04 <HAL_RCC_ClockConfig>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <SystemClock_Config+0xc8>
	{
		Error_Handler();
 8001e04:	f001 f884 	bl	8002f10 <Error_Handler>
	}
}
 8001e08:	bf00      	nop
 8001e0a:	3750      	adds	r7, #80	@ 0x50
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40007000 	.word	0x40007000

08001e18 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8001e1c:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <MX_UART5_Init+0x4c>)
 8001e1e:	4a12      	ldr	r2, [pc, #72]	@ (8001e68 <MX_UART5_Init+0x50>)
 8001e20:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8001e22:	4b10      	ldr	r3, [pc, #64]	@ (8001e64 <MX_UART5_Init+0x4c>)
 8001e24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e28:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e64 <MX_UART5_Init+0x4c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001e30:	4b0c      	ldr	r3, [pc, #48]	@ (8001e64 <MX_UART5_Init+0x4c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8001e36:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <MX_UART5_Init+0x4c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001e3c:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <MX_UART5_Init+0x4c>)
 8001e3e:	220c      	movs	r2, #12
 8001e40:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e42:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <MX_UART5_Init+0x4c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e48:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <MX_UART5_Init+0x4c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK)
 8001e4e:	4805      	ldr	r0, [pc, #20]	@ (8001e64 <MX_UART5_Init+0x4c>)
 8001e50:	f002 fd40 	bl	80048d4 <HAL_UART_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_UART5_Init+0x46>
	{
		Error_Handler();
 8001e5a:	f001 f859 	bl	8002f10 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200002ac 	.word	0x200002ac
 8001e68:	40005000 	.word	0x40005000

08001e6c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08e      	sub	sp, #56	@ 0x38
 8001e70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
 8001e80:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
 8001e86:	4bb9      	ldr	r3, [pc, #740]	@ (800216c <MX_GPIO_Init+0x300>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	4ab8      	ldr	r2, [pc, #736]	@ (800216c <MX_GPIO_Init+0x300>)
 8001e8c:	f043 0310 	orr.w	r3, r3, #16
 8001e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e92:	4bb6      	ldr	r3, [pc, #728]	@ (800216c <MX_GPIO_Init+0x300>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	623b      	str	r3, [r7, #32]
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
 8001ea2:	4bb2      	ldr	r3, [pc, #712]	@ (800216c <MX_GPIO_Init+0x300>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	4ab1      	ldr	r2, [pc, #708]	@ (800216c <MX_GPIO_Init+0x300>)
 8001ea8:	f043 0304 	orr.w	r3, r3, #4
 8001eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eae:	4baf      	ldr	r3, [pc, #700]	@ (800216c <MX_GPIO_Init+0x300>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	61fb      	str	r3, [r7, #28]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
 8001ebe:	4bab      	ldr	r3, [pc, #684]	@ (800216c <MX_GPIO_Init+0x300>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	4aaa      	ldr	r2, [pc, #680]	@ (800216c <MX_GPIO_Init+0x300>)
 8001ec4:	f043 0320 	orr.w	r3, r3, #32
 8001ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eca:	4ba8      	ldr	r3, [pc, #672]	@ (800216c <MX_GPIO_Init+0x300>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	f003 0320 	and.w	r3, r3, #32
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	4ba4      	ldr	r3, [pc, #656]	@ (800216c <MX_GPIO_Init+0x300>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	4aa3      	ldr	r2, [pc, #652]	@ (800216c <MX_GPIO_Init+0x300>)
 8001ee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee6:	4ba1      	ldr	r3, [pc, #644]	@ (800216c <MX_GPIO_Init+0x300>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	4b9d      	ldr	r3, [pc, #628]	@ (800216c <MX_GPIO_Init+0x300>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	4a9c      	ldr	r2, [pc, #624]	@ (800216c <MX_GPIO_Init+0x300>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f02:	4b9a      	ldr	r3, [pc, #616]	@ (800216c <MX_GPIO_Init+0x300>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	4b96      	ldr	r3, [pc, #600]	@ (800216c <MX_GPIO_Init+0x300>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	4a95      	ldr	r2, [pc, #596]	@ (800216c <MX_GPIO_Init+0x300>)
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1e:	4b93      	ldr	r3, [pc, #588]	@ (800216c <MX_GPIO_Init+0x300>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	4b8f      	ldr	r3, [pc, #572]	@ (800216c <MX_GPIO_Init+0x300>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	4a8e      	ldr	r2, [pc, #568]	@ (800216c <MX_GPIO_Init+0x300>)
 8001f34:	f043 0308 	orr.w	r3, r3, #8
 8001f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3a:	4b8c      	ldr	r3, [pc, #560]	@ (800216c <MX_GPIO_Init+0x300>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	4b88      	ldr	r3, [pc, #544]	@ (800216c <MX_GPIO_Init+0x300>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	4a87      	ldr	r2, [pc, #540]	@ (800216c <MX_GPIO_Init+0x300>)
 8001f50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f56:	4b85      	ldr	r3, [pc, #532]	@ (800216c <MX_GPIO_Init+0x300>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_12
 8001f62:	2200      	movs	r2, #0
 8001f64:	f247 4130 	movw	r1, #29744	@ 0x7430
 8001f68:	4881      	ldr	r0, [pc, #516]	@ (8002170 <MX_GPIO_Init+0x304>)
 8001f6a:	f001 fe7f 	bl	8003c6c <HAL_GPIO_WritePin>
			|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2102      	movs	r1, #2
 8001f72:	4880      	ldr	r0, [pc, #512]	@ (8002174 <MX_GPIO_Init+0x308>)
 8001f74:	f001 fe7a 	bl	8003c6c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8001f7e:	487e      	ldr	r0, [pc, #504]	@ (8002178 <MX_GPIO_Init+0x30c>)
 8001f80:	f001 fe74 	bl	8003c6c <HAL_GPIO_WritePin>
			|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
			|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001f84:	2200      	movs	r2, #0
 8001f86:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001f8a:	487c      	ldr	r0, [pc, #496]	@ (800217c <MX_GPIO_Init+0x310>)
 8001f8c:	f001 fe6e 	bl	8003c6c <HAL_GPIO_WritePin>
			|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001f90:	2200      	movs	r2, #0
 8001f92:	f645 7181 	movw	r1, #24449	@ 0x5f81
 8001f96:	487a      	ldr	r0, [pc, #488]	@ (8002180 <MX_GPIO_Init+0x314>)
 8001f98:	f001 fe68 	bl	8003c6c <HAL_GPIO_WritePin>
			|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_0, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f246 71f8 	movw	r1, #26616	@ 0x67f8
 8001fa2:	4878      	ldr	r0, [pc, #480]	@ (8002184 <MX_GPIO_Init+0x318>)
 8001fa4:	f001 fe62 	bl	8003c6c <HAL_GPIO_WritePin>
			|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
			|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8001fae:	4876      	ldr	r0, [pc, #472]	@ (8002188 <MX_GPIO_Init+0x31c>)
 8001fb0:	f001 fe5c 	bl	8003c6c <HAL_GPIO_WritePin>
			|GPIO_PIN_15, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f64a 4190 	movw	r1, #44176	@ 0xac90
 8001fba:	4874      	ldr	r0, [pc, #464]	@ (800218c <MX_GPIO_Init+0x320>)
 8001fbc:	f001 fe56 	bl	8003c6c <HAL_GPIO_WritePin>
			|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);

	/*Configure GPIO pins : PE5 PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001fc0:	2360      	movs	r3, #96	@ 0x60
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	486b      	ldr	r0, [pc, #428]	@ (8002180 <MX_GPIO_Init+0x314>)
 8001fd4:	f001 fc9e 	bl	8003914 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC13 PC14 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001fd8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001fdc:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fea:	4619      	mov	r1, r3
 8001fec:	4863      	ldr	r0, [pc, #396]	@ (800217c <MX_GPIO_Init+0x310>)
 8001fee:	f001 fc91 	bl	8003914 <HAL_GPIO_Init>

	/*Configure GPIO pin : PF0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ffe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002002:	4619      	mov	r1, r3
 8002004:	485a      	ldr	r0, [pc, #360]	@ (8002170 <MX_GPIO_Init+0x304>)
 8002006:	f001 fc85 	bl	8003914 <HAL_GPIO_Init>

	/*Configure GPIO pins : PF2 PF3 */
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800200a:	230c      	movs	r3, #12
 800200c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800200e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002012:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002018:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800201c:	4619      	mov	r1, r3
 800201e:	4854      	ldr	r0, [pc, #336]	@ (8002170 <MX_GPIO_Init+0x304>)
 8002020:	f001 fc78 	bl	8003914 <HAL_GPIO_Init>

	/*Configure GPIO pins : PF4 PF5 PF10 PF12
                           PF13 PF14 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_12
 8002024:	f247 4330 	movw	r3, #29744	@ 0x7430
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
			|GPIO_PIN_13|GPIO_PIN_14;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202a:	2301      	movs	r3, #1
 800202c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002036:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800203a:	4619      	mov	r1, r3
 800203c:	484c      	ldr	r0, [pc, #304]	@ (8002170 <MX_GPIO_Init+0x304>)
 800203e:	f001 fc69 	bl	8003914 <HAL_GPIO_Init>

	/*Configure GPIO pin : PH1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002042:	2302      	movs	r3, #2
 8002044:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002046:	2301      	movs	r3, #1
 8002048:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204e:	2300      	movs	r3, #0
 8002050:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002052:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002056:	4619      	mov	r1, r3
 8002058:	4846      	ldr	r0, [pc, #280]	@ (8002174 <MX_GPIO_Init+0x308>)
 800205a:	f001 fc5b 	bl	8003914 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800205e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
			|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
			|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002064:	2301      	movs	r3, #1
 8002066:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206c:	2300      	movs	r3, #0
 800206e:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002070:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002074:	4619      	mov	r1, r3
 8002076:	4840      	ldr	r0, [pc, #256]	@ (8002178 <MX_GPIO_Init+0x30c>)
 8002078:	f001 fc4c 	bl	8003914 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC4 PC6 PC7 PC8
                           PC9 PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800207c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002080:	627b      	str	r3, [r7, #36]	@ 0x24
			|GPIO_PIN_9|GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002082:	2301      	movs	r3, #1
 8002084:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	2300      	movs	r3, #0
 800208c:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800208e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002092:	4619      	mov	r1, r3
 8002094:	4839      	ldr	r0, [pc, #228]	@ (800217c <MX_GPIO_Init+0x310>)
 8002096:	f001 fc3d 	bl	8003914 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE14 PE0 */
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800209a:	f645 7381 	movw	r3, #24449	@ 0x5f81
 800209e:	627b      	str	r3, [r7, #36]	@ 0x24
			|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_0;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a0:	2301      	movs	r3, #1
 80020a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	2300      	movs	r3, #0
 80020aa:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020b0:	4619      	mov	r1, r3
 80020b2:	4833      	ldr	r0, [pc, #204]	@ (8002180 <MX_GPIO_Init+0x314>)
 80020b4:	f001 fc2e 	bl	8003914 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB13 PB14 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3
 80020b8:	f246 73f8 	movw	r3, #26616	@ 0x67f8
 80020bc:	627b      	str	r3, [r7, #36]	@ 0x24
			|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
			|GPIO_PIN_8|GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020be:	2301      	movs	r3, #1
 80020c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ce:	4619      	mov	r1, r3
 80020d0:	482c      	ldr	r0, [pc, #176]	@ (8002184 <MX_GPIO_Init+0x318>)
 80020d2:	f001 fc1f 	bl	8003914 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD11 PD12 PD13 PD14
                           PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80020d6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80020da:	627b      	str	r3, [r7, #36]	@ 0x24
			|GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020dc:	2301      	movs	r3, #1
 80020de:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e4:	2300      	movs	r3, #0
 80020e6:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ec:	4619      	mov	r1, r3
 80020ee:	4826      	ldr	r0, [pc, #152]	@ (8002188 <MX_GPIO_Init+0x31c>)
 80020f0:	f001 fc10 	bl	8003914 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG4 PG7 PG10 PG11
                           PG13 PG15 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11
 80020f4:	f64a 4390 	movw	r3, #44176	@ 0xac90
 80020f8:	627b      	str	r3, [r7, #36]	@ 0x24
			|GPIO_PIN_13|GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fa:	2301      	movs	r3, #1
 80020fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002106:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800210a:	4619      	mov	r1, r3
 800210c:	481f      	ldr	r0, [pc, #124]	@ (800218c <MX_GPIO_Init+0x320>)
 800210e:	f001 fc01 	bl	8003914 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD0 PD1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002112:	2303      	movs	r3, #3
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002116:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800211a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002120:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002124:	4619      	mov	r1, r3
 8002126:	4818      	ldr	r0, [pc, #96]	@ (8002188 <MX_GPIO_Init+0x31c>)
 8002128:	f001 fbf4 	bl	8003914 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800212c:	2200      	movs	r2, #0
 800212e:	2100      	movs	r1, #0
 8002130:	2006      	movs	r0, #6
 8002132:	f001 fb26 	bl	8003782 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002136:	2006      	movs	r0, #6
 8002138:	f001 fb3f 	bl	80037ba <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800213c:	2200      	movs	r2, #0
 800213e:	2100      	movs	r1, #0
 8002140:	2007      	movs	r0, #7
 8002142:	f001 fb1e 	bl	8003782 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002146:	2007      	movs	r0, #7
 8002148:	f001 fb37 	bl	80037ba <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800214c:	2200      	movs	r2, #0
 800214e:	2100      	movs	r1, #0
 8002150:	2008      	movs	r0, #8
 8002152:	f001 fb16 	bl	8003782 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002156:	2008      	movs	r0, #8
 8002158:	f001 fb2f 	bl	80037ba <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800215c:	2200      	movs	r2, #0
 800215e:	2100      	movs	r1, #0
 8002160:	2009      	movs	r0, #9
 8002162:	f001 fb0e 	bl	8003782 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002166:	2009      	movs	r0, #9
 8002168:	e012      	b.n	8002190 <MX_GPIO_Init+0x324>
 800216a:	bf00      	nop
 800216c:	40023800 	.word	0x40023800
 8002170:	40021400 	.word	0x40021400
 8002174:	40021c00 	.word	0x40021c00
 8002178:	40020000 	.word	0x40020000
 800217c:	40020800 	.word	0x40020800
 8002180:	40021000 	.word	0x40021000
 8002184:	40020400 	.word	0x40020400
 8002188:	40020c00 	.word	0x40020c00
 800218c:	40021800 	.word	0x40021800
 8002190:	f001 fb13 	bl	80037ba <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002194:	bf00      	nop
 8002196:	3738      	adds	r7, #56	@ 0x38
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	0000      	movs	r0, r0
	...

080021a0 <LED_Sequence_01>:
}



void LED_Sequence_01(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
	//static int step = 0;
	//	static int caseIntervals1 = 5000;

	if (HAL_GetTick() - lastTime1 >= caseIntervals1 && sequence_01==1)
 80021a4:	f001 f9e2 	bl	800356c <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	4b67      	ldr	r3, [pc, #412]	@ (8002348 <LED_Sequence_01+0x1a8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	4a66      	ldr	r2, [pc, #408]	@ (800234c <LED_Sequence_01+0x1ac>)
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	4293      	cmp	r3, r2
 80021b6:	f0c0 80b5 	bcc.w	8002324 <LED_Sequence_01+0x184>
 80021ba:	4b65      	ldr	r3, [pc, #404]	@ (8002350 <LED_Sequence_01+0x1b0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	f040 80b0 	bne.w	8002324 <LED_Sequence_01+0x184>
	{
		lastTime1 = HAL_GetTick();
 80021c4:	f001 f9d2 	bl	800356c <HAL_GetTick>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4a5f      	ldr	r2, [pc, #380]	@ (8002348 <LED_Sequence_01+0x1a8>)
 80021cc:	6013      	str	r3, [r2, #0]
		motor1.step_speed=1;
 80021ce:	4b61      	ldr	r3, [pc, #388]	@ (8002354 <LED_Sequence_01+0x1b4>)
 80021d0:	2201      	movs	r2, #1
 80021d2:	639a      	str	r2, [r3, #56]	@ 0x38
		switch (step)
 80021d4:	4b60      	ldr	r3, [pc, #384]	@ (8002358 <LED_Sequence_01+0x1b8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b09      	cmp	r3, #9
 80021da:	f200 8093 	bhi.w	8002304 <LED_Sequence_01+0x164>
 80021de:	a201      	add	r2, pc, #4	@ (adr r2, 80021e4 <LED_Sequence_01+0x44>)
 80021e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e4:	0800220d 	.word	0x0800220d
 80021e8:	08002229 	.word	0x08002229
 80021ec:	08002243 	.word	0x08002243
 80021f0:	08002255 	.word	0x08002255
 80021f4:	08002263 	.word	0x08002263
 80021f8:	08002279 	.word	0x08002279
 80021fc:	08002281 	.word	0x08002281
 8002200:	080022cd 	.word	0x080022cd
 8002204:	080022db 	.word	0x080022db
 8002208:	080022fd 	.word	0x080022fd
		case 0: // All solV off
			/*HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 , GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7 , GPIO_PIN_RESET);
			 */
			solV_5_OFF();
 800220c:	f000 fcf4 	bl	8002bf8 <solV_5_OFF>
			solV_4_OFF();
 8002210:	f000 fcda 	bl	8002bc8 <solV_4_OFF>
			case_01_flag ++;
 8002214:	4b51      	ldr	r3, [pc, #324]	@ (800235c <LED_Sequence_01+0x1bc>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	3301      	adds	r3, #1
 800221a:	4a50      	ldr	r2, [pc, #320]	@ (800235c <LED_Sequence_01+0x1bc>)
 800221c:	6013      	str	r3, [r2, #0]
			caseIntervals1 = 300;
 800221e:	4b4b      	ldr	r3, [pc, #300]	@ (800234c <LED_Sequence_01+0x1ac>)
 8002220:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002224:	601a      	str	r2, [r3, #0]
			break;
 8002226:	e06d      	b.n	8002304 <LED_Sequence_01+0x164>
		case 1:
			motor1.set_desired_angle(&motor1, 00);
 8002228:	4b4a      	ldr	r3, [pc, #296]	@ (8002354 <LED_Sequence_01+0x1b4>)
 800222a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800222c:	ed9f 0b3e 	vldr	d0, [pc, #248]	@ 8002328 <LED_Sequence_01+0x188>
 8002230:	4848      	ldr	r0, [pc, #288]	@ (8002354 <LED_Sequence_01+0x1b4>)
 8002232:	4798      	blx	r3
			solV_blow_Hair_ON();
 8002234:	f000 fe3c 	bl	8002eb0 <solV_blow_Hair_ON>
			caseIntervals1 = 500;
 8002238:	4b44      	ldr	r3, [pc, #272]	@ (800234c <LED_Sequence_01+0x1ac>)
 800223a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800223e:	601a      	str	r2, [r3, #0]
			break;
 8002240:	e060      	b.n	8002304 <LED_Sequence_01+0x164>

		case 2:
			solV_4_ON();
 8002242:	f000 fcb5 	bl	8002bb0 <solV_4_ON>
			solV_blow_Hair_OFF();
 8002246:	f000 fe3f 	bl	8002ec8 <solV_blow_Hair_OFF>
			caseIntervals1 = 500;
 800224a:	4b40      	ldr	r3, [pc, #256]	@ (800234c <LED_Sequence_01+0x1ac>)
 800224c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002250:	601a      	str	r2, [r3, #0]
			break;
 8002252:	e057      	b.n	8002304 <LED_Sequence_01+0x164>
		case 3: // solV with motor clip on
			solV_5_ON();;
 8002254:	f000 fcc4 	bl	8002be0 <solV_5_ON>
			caseIntervals1 = 500;
 8002258:	4b3c      	ldr	r3, [pc, #240]	@ (800234c <LED_Sequence_01+0x1ac>)
 800225a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800225e:	601a      	str	r2, [r3, #0]
			break;
 8002260:	e050      	b.n	8002304 <LED_Sequence_01+0x164>
		case 4:
			motor1.set_desired_angle(&motor1, -170);// motor go front
 8002262:	4b3c      	ldr	r3, [pc, #240]	@ (8002354 <LED_Sequence_01+0x1b4>)
 8002264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002266:	ed9f 0b32 	vldr	d0, [pc, #200]	@ 8002330 <LED_Sequence_01+0x190>
 800226a:	483a      	ldr	r0, [pc, #232]	@ (8002354 <LED_Sequence_01+0x1b4>)
 800226c:	4798      	blx	r3

			caseIntervals1 = 3000;
 800226e:	4b37      	ldr	r3, [pc, #220]	@ (800234c <LED_Sequence_01+0x1ac>)
 8002270:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002274:	601a      	str	r2, [r3, #0]
			break;
 8002276:	e045      	b.n	8002304 <LED_Sequence_01+0x164>
		case 5:

			caseIntervals1 = 1;
 8002278:	4b34      	ldr	r3, [pc, #208]	@ (800234c <LED_Sequence_01+0x1ac>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]
			break;
 800227e:	e041      	b.n	8002304 <LED_Sequence_01+0x164>
		case 6:// solV with clip down
			if (hair_detect==1)
 8002280:	4b37      	ldr	r3, [pc, #220]	@ (8002360 <LED_Sequence_01+0x1c0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d106      	bne.n	8002296 <LED_Sequence_01+0xf6>
			{
				motor1.set_desired_angle(&motor1, -710);// motor go front
 8002288:	4b32      	ldr	r3, [pc, #200]	@ (8002354 <LED_Sequence_01+0x1b4>)
 800228a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800228c:	ed9f 0b2a 	vldr	d0, [pc, #168]	@ 8002338 <LED_Sequence_01+0x198>
 8002290:	4830      	ldr	r0, [pc, #192]	@ (8002354 <LED_Sequence_01+0x1b4>)
 8002292:	4798      	blx	r3
 8002294:	e015      	b.n	80022c2 <LED_Sequence_01+0x122>
			}else
			{
				step=0;
 8002296:	4b30      	ldr	r3, [pc, #192]	@ (8002358 <LED_Sequence_01+0x1b8>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
				solV_5_OFF();solV_4_OFF();solV_6_OFF();
 800229c:	f000 fcac 	bl	8002bf8 <solV_5_OFF>
 80022a0:	f000 fc92 	bl	8002bc8 <solV_4_OFF>
 80022a4:	f000 fcc0 	bl	8002c28 <solV_6_OFF>
				motor1.set_desired_angle(&motor1, 0);
 80022a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002354 <LED_Sequence_01+0x1b4>)
 80022aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ac:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8002328 <LED_Sequence_01+0x188>
 80022b0:	4828      	ldr	r0, [pc, #160]	@ (8002354 <LED_Sequence_01+0x1b4>)
 80022b2:	4798      	blx	r3
				motor1.step_speed=5;
 80022b4:	4b27      	ldr	r3, [pc, #156]	@ (8002354 <LED_Sequence_01+0x1b4>)
 80022b6:	2205      	movs	r2, #5
 80022b8:	639a      	str	r2, [r3, #56]	@ 0x38

				caseIntervals1 = 1000;
 80022ba:	4b24      	ldr	r3, [pc, #144]	@ (800234c <LED_Sequence_01+0x1ac>)
 80022bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022c0:	601a      	str	r2, [r3, #0]
			}

			caseIntervals1 = 1500;
 80022c2:	4b22      	ldr	r3, [pc, #136]	@ (800234c <LED_Sequence_01+0x1ac>)
 80022c4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80022c8:	601a      	str	r2, [r3, #0]
			break;
 80022ca:	e01b      	b.n	8002304 <LED_Sequence_01+0x164>
		case 7:// clip on #5 GPIO_PIN_12 onI
			solV_6_ON();
 80022cc:	f000 fca0 	bl	8002c10 <solV_6_ON>
			caseIntervals1 = 500;
 80022d0:	4b1e      	ldr	r3, [pc, #120]	@ (800234c <LED_Sequence_01+0x1ac>)
 80022d2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80022d6:	601a      	str	r2, [r3, #0]
			break;
 80022d8:	e014      	b.n	8002304 <LED_Sequence_01+0x164>
		case 8:// solV with limit switch down
			motor1.set_desired_angle(&motor1, -675);// motor go front
 80022da:	4b1e      	ldr	r3, [pc, #120]	@ (8002354 <LED_Sequence_01+0x1b4>)
 80022dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022de:	ed9f 0b18 	vldr	d0, [pc, #96]	@ 8002340 <LED_Sequence_01+0x1a0>
 80022e2:	481c      	ldr	r0, [pc, #112]	@ (8002354 <LED_Sequence_01+0x1b4>)
 80022e4:	4798      	blx	r3
			sequence_01=0;
 80022e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002350 <LED_Sequence_01+0x1b0>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
			sequence_02=1;
 80022ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002364 <LED_Sequence_01+0x1c4>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
			caseIntervals1 = 1000;
 80022f2:	4b16      	ldr	r3, [pc, #88]	@ (800234c <LED_Sequence_01+0x1ac>)
 80022f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022f8:	601a      	str	r2, [r3, #0]
			break;
 80022fa:	e003      	b.n	8002304 <LED_Sequence_01+0x164>
		case 9:
			caseIntervals1 = 1;
 80022fc:	4b13      	ldr	r3, [pc, #76]	@ (800234c <LED_Sequence_01+0x1ac>)
 80022fe:	2201      	movs	r2, #1
 8002300:	601a      	str	r2, [r3, #0]
			break;
 8002302:	bf00      	nop



		}

		step = (step + 1) % 10;
 8002304:	4b14      	ldr	r3, [pc, #80]	@ (8002358 <LED_Sequence_01+0x1b8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	1c59      	adds	r1, r3, #1
 800230a:	4b17      	ldr	r3, [pc, #92]	@ (8002368 <LED_Sequence_01+0x1c8>)
 800230c:	fb83 2301 	smull	r2, r3, r3, r1
 8002310:	109a      	asrs	r2, r3, #2
 8002312:	17cb      	asrs	r3, r1, #31
 8002314:	1ad2      	subs	r2, r2, r3
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	1aca      	subs	r2, r1, r3
 8002320:	4b0d      	ldr	r3, [pc, #52]	@ (8002358 <LED_Sequence_01+0x1b8>)
 8002322:	601a      	str	r2, [r3, #0]
	}
}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}
	...
 8002334:	c0654000 	.word	0xc0654000
 8002338:	00000000 	.word	0x00000000
 800233c:	c0863000 	.word	0xc0863000
 8002340:	00000000 	.word	0x00000000
 8002344:	c0851800 	.word	0xc0851800
 8002348:	200002f8 	.word	0x200002f8
 800234c:	20000008 	.word	0x20000008
 8002350:	20000000 	.word	0x20000000
 8002354:	20000358 	.word	0x20000358
 8002358:	20000340 	.word	0x20000340
 800235c:	2000033c 	.word	0x2000033c
 8002360:	20000330 	.word	0x20000330
 8002364:	20000004 	.word	0x20000004
 8002368:	66666667 	.word	0x66666667
 800236c:	00000000 	.word	0x00000000

08002370 <LED_Sequence_02>:

/* LED_Sequence2 Function */
void LED_Sequence_02(void)
{
 8002370:	b590      	push	{r4, r7, lr}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - lastTime2) >= caseIntervals2&&sequence_02==1)
 8002376:	f001 f8f9 	bl	800356c <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	4baa      	ldr	r3, [pc, #680]	@ (8002628 <LED_Sequence_02+0x2b8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	4aaa      	ldr	r2, [pc, #680]	@ (800262c <LED_Sequence_02+0x2bc>)
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	4293      	cmp	r3, r2
 8002388:	f0c0 82db 	bcc.w	8002942 <LED_Sequence_02+0x5d2>
 800238c:	4ba8      	ldr	r3, [pc, #672]	@ (8002630 <LED_Sequence_02+0x2c0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b01      	cmp	r3, #1
 8002392:	f040 82d6 	bne.w	8002942 <LED_Sequence_02+0x5d2>
	{
		lastTime2 = HAL_GetTick();
 8002396:	f001 f8e9 	bl	800356c <HAL_GetTick>
 800239a:	4603      	mov	r3, r0
 800239c:	4aa2      	ldr	r2, [pc, #648]	@ (8002628 <LED_Sequence_02+0x2b8>)
 800239e:	6013      	str	r3, [r2, #0]
		motor2.step_speed=25;
 80023a0:	4ba4      	ldr	r3, [pc, #656]	@ (8002634 <LED_Sequence_02+0x2c4>)
 80023a2:	2219      	movs	r2, #25
 80023a4:	639a      	str	r2, [r3, #56]	@ 0x38
		motor3.step_speed=7;
 80023a6:	4ba4      	ldr	r3, [pc, #656]	@ (8002638 <LED_Sequence_02+0x2c8>)
 80023a8:	2207      	movs	r2, #7
 80023aa:	639a      	str	r2, [r3, #56]	@ 0x38
		motor4.step_speed=40;
 80023ac:	4ba3      	ldr	r3, [pc, #652]	@ (800263c <LED_Sequence_02+0x2cc>)
 80023ae:	2228      	movs	r2, #40	@ 0x28
 80023b0:	639a      	str	r2, [r3, #56]	@ 0x38
		switch (step2)
 80023b2:	4ba3      	ldr	r3, [pc, #652]	@ (8002640 <LED_Sequence_02+0x2d0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b22      	cmp	r3, #34	@ 0x22
 80023b8:	f200 82b1 	bhi.w	800291e <LED_Sequence_02+0x5ae>
 80023bc:	a201      	add	r2, pc, #4	@ (adr r2, 80023c4 <LED_Sequence_02+0x54>)
 80023be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c2:	bf00      	nop
 80023c4:	08002451 	.word	0x08002451
 80023c8:	08002457 	.word	0x08002457
 80023cc:	08002465 	.word	0x08002465
 80023d0:	08002493 	.word	0x08002493
 80023d4:	080024a5 	.word	0x080024a5
 80023d8:	080024bf 	.word	0x080024bf
 80023dc:	080024cd 	.word	0x080024cd
 80023e0:	080024ef 	.word	0x080024ef
 80023e4:	08002503 	.word	0x08002503
 80023e8:	08002519 	.word	0x08002519
 80023ec:	08002539 	.word	0x08002539
 80023f0:	08002541 	.word	0x08002541
 80023f4:	08002569 	.word	0x08002569
 80023f8:	08002575 	.word	0x08002575
 80023fc:	08002583 	.word	0x08002583
 8002400:	08002599 	.word	0x08002599
 8002404:	080025b9 	.word	0x080025b9
 8002408:	080025f1 	.word	0x080025f1
 800240c:	08002655 	.word	0x08002655
 8002410:	0800268d 	.word	0x0800268d
 8002414:	080026cd 	.word	0x080026cd
 8002418:	080026e9 	.word	0x080026e9
 800241c:	08002727 	.word	0x08002727
 8002420:	0800273d 	.word	0x0800273d
 8002424:	08002789 	.word	0x08002789
 8002428:	080027c5 	.word	0x080027c5
 800242c:	080027d3 	.word	0x080027d3
 8002430:	080027f3 	.word	0x080027f3
 8002434:	080027ff 	.word	0x080027ff
 8002438:	0800280d 	.word	0x0800280d
 800243c:	08002821 	.word	0x08002821
 8002440:	08002841 	.word	0x08002841
 8002444:	0800284d 	.word	0x0800284d
 8002448:	08002865 	.word	0x08002865
 800244c:	080028b9 	.word	0x080028b9
		{
		case 0:
			//motor4.set_desired_angle(&motor4, 65);

			caseIntervals2 = 10;
 8002450:	4b76      	ldr	r3, [pc, #472]	@ (800262c <LED_Sequence_02+0x2bc>)
 8002452:	220a      	movs	r2, #10
 8002454:	601a      	str	r2, [r3, #0]
		case 1:

			solV_8_ON();
 8002456:	f000 fc0b 	bl	8002c70 <solV_8_ON>
			caseIntervals2 = 500;
 800245a:	4b74      	ldr	r3, [pc, #464]	@ (800262c <LED_Sequence_02+0x2bc>)
 800245c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002460:	601a      	str	r2, [r3, #0]
			break;
 8002462:	e25c      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 2:

			motor2.set_desired_angle(&motor2, 0);
 8002464:	4b73      	ldr	r3, [pc, #460]	@ (8002634 <LED_Sequence_02+0x2c4>)
 8002466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002468:	ed9f 0b65 	vldr	d0, [pc, #404]	@ 8002600 <LED_Sequence_02+0x290>
 800246c:	4871      	ldr	r0, [pc, #452]	@ (8002634 <LED_Sequence_02+0x2c4>)
 800246e:	4798      	blx	r3

			motor2.step_speed = 250;
 8002470:	4b70      	ldr	r3, [pc, #448]	@ (8002634 <LED_Sequence_02+0x2c4>)
 8002472:	22fa      	movs	r2, #250	@ 0xfa
 8002474:	639a      	str	r2, [r3, #56]	@ 0x38

			solV_9_ON();
 8002476:	f000 fc13 	bl	8002ca0 <solV_9_ON>

			if(hair_detect==1)
 800247a:	4b72      	ldr	r3, [pc, #456]	@ (8002644 <LED_Sequence_02+0x2d4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d002      	beq.n	8002488 <LED_Sequence_02+0x118>
			{

			}
			else
			{
				sequence_02=0;
 8002482:	4b6b      	ldr	r3, [pc, #428]	@ (8002630 <LED_Sequence_02+0x2c0>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
			}
			caseIntervals2 = 800;
 8002488:	4b68      	ldr	r3, [pc, #416]	@ (800262c <LED_Sequence_02+0x2bc>)
 800248a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800248e:	601a      	str	r2, [r3, #0]
			break;
 8002490:	e245      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 3:
			solV_8_OFF();
 8002492:	f000 fbf9 	bl	8002c88 <solV_8_OFF>
			solV_11_OFF();
 8002496:	f000 fc3f 	bl	8002d18 <solV_11_OFF>
			caseIntervals2 = 800;
 800249a:	4b64      	ldr	r3, [pc, #400]	@ (800262c <LED_Sequence_02+0x2bc>)
 800249c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80024a0:	601a      	str	r2, [r3, #0]
			break;
 80024a2:	e23c      	b.n	800291e <LED_Sequence_02+0x5ae>

		case 4:
			motor4.step_speed = 250;
 80024a4:	4b65      	ldr	r3, [pc, #404]	@ (800263c <LED_Sequence_02+0x2cc>)
 80024a6:	22fa      	movs	r2, #250	@ 0xfa
 80024a8:	639a      	str	r2, [r3, #56]	@ 0x38
			motor4.set_desired_angle(&motor4, 0); //70->0 (25.08.22)
 80024aa:	4b64      	ldr	r3, [pc, #400]	@ (800263c <LED_Sequence_02+0x2cc>)
 80024ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ae:	ed9f 0b54 	vldr	d0, [pc, #336]	@ 8002600 <LED_Sequence_02+0x290>
 80024b2:	4862      	ldr	r0, [pc, #392]	@ (800263c <LED_Sequence_02+0x2cc>)
 80024b4:	4798      	blx	r3
			caseIntervals2 = 100;
 80024b6:	4b5d      	ldr	r3, [pc, #372]	@ (800262c <LED_Sequence_02+0x2bc>)
 80024b8:	2264      	movs	r2, #100	@ 0x64
 80024ba:	601a      	str	r2, [r3, #0]
			break;
 80024bc:	e22f      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 5:
			motor4.step_speed=250;
 80024be:	4b5f      	ldr	r3, [pc, #380]	@ (800263c <LED_Sequence_02+0x2cc>)
 80024c0:	22fa      	movs	r2, #250	@ 0xfa
 80024c2:	639a      	str	r2, [r3, #56]	@ 0x38
			caseIntervals2 = 1;
 80024c4:	4b59      	ldr	r3, [pc, #356]	@ (800262c <LED_Sequence_02+0x2bc>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	601a      	str	r2, [r3, #0]
			break;
 80024ca:	e228      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 6:
			motor1.set_desired_angle(&motor1, -710);
 80024cc:	4b5e      	ldr	r3, [pc, #376]	@ (8002648 <LED_Sequence_02+0x2d8>)
 80024ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d0:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8002608 <LED_Sequence_02+0x298>
 80024d4:	485c      	ldr	r0, [pc, #368]	@ (8002648 <LED_Sequence_02+0x2d8>)
 80024d6:	4798      	blx	r3
			motor1.step_speed=5;
 80024d8:	4b5b      	ldr	r3, [pc, #364]	@ (8002648 <LED_Sequence_02+0x2d8>)
 80024da:	2205      	movs	r2, #5
 80024dc:	639a      	str	r2, [r3, #56]	@ 0x38
			motor4.step_speed=250;
 80024de:	4b57      	ldr	r3, [pc, #348]	@ (800263c <LED_Sequence_02+0x2cc>)
 80024e0:	22fa      	movs	r2, #250	@ 0xfa
 80024e2:	639a      	str	r2, [r3, #56]	@ 0x38
			caseIntervals2 = 800;
 80024e4:	4b51      	ldr	r3, [pc, #324]	@ (800262c <LED_Sequence_02+0x2bc>)
 80024e6:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80024ea:	601a      	str	r2, [r3, #0]
			break;
 80024ec:	e217      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 7:
			solV_7_ON();
 80024ee:	f000 fba7 	bl	8002c40 <solV_7_ON>
			caseIntervals2 = 500;
 80024f2:	4b4e      	ldr	r3, [pc, #312]	@ (800262c <LED_Sequence_02+0x2bc>)
 80024f4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80024f8:	601a      	str	r2, [r3, #0]
			motor4.step_speed=250;
 80024fa:	4b50      	ldr	r3, [pc, #320]	@ (800263c <LED_Sequence_02+0x2cc>)
 80024fc:	22fa      	movs	r2, #250	@ 0xfa
 80024fe:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8002500:	e20d      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 8:
			solV_5_OFF();
 8002502:	f000 fb79 	bl	8002bf8 <solV_5_OFF>
			solV_6_OFF();
 8002506:	f000 fb8f 	bl	8002c28 <solV_6_OFF>
			solV_4_OFF();
 800250a:	f000 fb5d 	bl	8002bc8 <solV_4_OFF>

			//hair_detect=0;
			caseIntervals2 = 300;
 800250e:	4b47      	ldr	r3, [pc, #284]	@ (800262c <LED_Sequence_02+0x2bc>)
 8002510:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002514:	601a      	str	r2, [r3, #0]
			break;
 8002516:	e202      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 9:
			solV_8_ON();
 8002518:	f000 fbaa 	bl	8002c70 <solV_8_ON>

			motor1.set_desired_angle(&motor1, 10);
 800251c:	4b4a      	ldr	r3, [pc, #296]	@ (8002648 <LED_Sequence_02+0x2d8>)
 800251e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002520:	ed9f 0b3b 	vldr	d0, [pc, #236]	@ 8002610 <LED_Sequence_02+0x2a0>
 8002524:	4848      	ldr	r0, [pc, #288]	@ (8002648 <LED_Sequence_02+0x2d8>)
 8002526:	4798      	blx	r3
			motor1.step_speed=1;
 8002528:	4b47      	ldr	r3, [pc, #284]	@ (8002648 <LED_Sequence_02+0x2d8>)
 800252a:	2201      	movs	r2, #1
 800252c:	639a      	str	r2, [r3, #56]	@ 0x38
			caseIntervals2 = 1000;
 800252e:	4b3f      	ldr	r3, [pc, #252]	@ (800262c <LED_Sequence_02+0x2bc>)
 8002530:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002534:	601a      	str	r2, [r3, #0]
			break;
 8002536:	e1f2      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 10:
			caseIntervals2 = 1;
 8002538:	4b3c      	ldr	r3, [pc, #240]	@ (800262c <LED_Sequence_02+0x2bc>)
 800253a:	2201      	movs	r2, #1
 800253c:	601a      	str	r2, [r3, #0]
			break;
 800253e:	e1ee      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 11:
			solV_9_OFF();
 8002540:	f000 fbba 	bl	8002cb8 <solV_9_OFF>
			solV_blow_ON();
 8002544:	f000 fc9c 	bl	8002e80 <solV_blow_ON>
			motor2.set_desired_angle(&motor2, hairang);
 8002548:	4b3a      	ldr	r3, [pc, #232]	@ (8002634 <LED_Sequence_02+0x2c4>)
 800254a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800254c:	4a3f      	ldr	r2, [pc, #252]	@ (800264c <LED_Sequence_02+0x2dc>)
 800254e:	ed92 7b00 	vldr	d7, [r2]
 8002552:	eeb0 0a47 	vmov.f32	s0, s14
 8002556:	eef0 0a67 	vmov.f32	s1, s15
 800255a:	4836      	ldr	r0, [pc, #216]	@ (8002634 <LED_Sequence_02+0x2c4>)
 800255c:	4798      	blx	r3
			caseIntervals2 = 900;
 800255e:	4b33      	ldr	r3, [pc, #204]	@ (800262c <LED_Sequence_02+0x2bc>)
 8002560:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8002564:	601a      	str	r2, [r3, #0]
			break;
 8002566:	e1da      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 12:
			solV_10_ON();
 8002568:	f000 fbb2 	bl	8002cd0 <solV_10_ON>
			caseIntervals2 = 100;
 800256c:	4b2f      	ldr	r3, [pc, #188]	@ (800262c <LED_Sequence_02+0x2bc>)
 800256e:	2264      	movs	r2, #100	@ 0x64
 8002570:	601a      	str	r2, [r3, #0]
			break;
 8002572:	e1d4      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 13:
			solV_8_OFF();
 8002574:	f000 fb88 	bl	8002c88 <solV_8_OFF>
			caseIntervals2 = 600;
 8002578:	4b2c      	ldr	r3, [pc, #176]	@ (800262c <LED_Sequence_02+0x2bc>)
 800257a:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800257e:	601a      	str	r2, [r3, #0]
			break;// sequence Checked now
 8002580:	e1cd      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 14:
			motor3.set_desired_angle(&motor3, 390);
 8002582:	4b2d      	ldr	r3, [pc, #180]	@ (8002638 <LED_Sequence_02+0x2c8>)
 8002584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002586:	ed9f 0b24 	vldr	d0, [pc, #144]	@ 8002618 <LED_Sequence_02+0x2a8>
 800258a:	482b      	ldr	r0, [pc, #172]	@ (8002638 <LED_Sequence_02+0x2c8>)
 800258c:	4798      	blx	r3
			caseIntervals2 = 800;
 800258e:	4b27      	ldr	r3, [pc, #156]	@ (800262c <LED_Sequence_02+0x2bc>)
 8002590:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002594:	601a      	str	r2, [r3, #0]
			break;
 8002596:	e1c2      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 15:
			motor4.set_desired_angle(&motor4, 6); // 76->6 (25.08.22)
 8002598:	4b28      	ldr	r3, [pc, #160]	@ (800263c <LED_Sequence_02+0x2cc>)
 800259a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800259c:	ed9f 0b20 	vldr	d0, [pc, #128]	@ 8002620 <LED_Sequence_02+0x2b0>
 80025a0:	4826      	ldr	r0, [pc, #152]	@ (800263c <LED_Sequence_02+0x2cc>)
 80025a2:	4798      	blx	r3
			motor4.step_speed=100;
 80025a4:	4b25      	ldr	r3, [pc, #148]	@ (800263c <LED_Sequence_02+0x2cc>)
 80025a6:	2264      	movs	r2, #100	@ 0x64
 80025a8:	639a      	str	r2, [r3, #56]	@ 0x38
			solV_10_OFF();
 80025aa:	f000 fb9d 	bl	8002ce8 <solV_10_OFF>
			caseIntervals2 = 500;
 80025ae:	4b1f      	ldr	r3, [pc, #124]	@ (800262c <LED_Sequence_02+0x2bc>)
 80025b0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80025b4:	601a      	str	r2, [r3, #0]
			break;
 80025b6:	e1b2      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 16:
			motor2.set_desired_angle(&motor2, hairang+5);
 80025b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002634 <LED_Sequence_02+0x2c4>)
 80025ba:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 80025bc:	4b23      	ldr	r3, [pc, #140]	@ (800264c <LED_Sequence_02+0x2dc>)
 80025be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	4b22      	ldr	r3, [pc, #136]	@ (8002650 <LED_Sequence_02+0x2e0>)
 80025c8:	f7fd fe88 	bl	80002dc <__adddf3>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	ec43 2b17 	vmov	d7, r2, r3
 80025d4:	eeb0 0a47 	vmov.f32	s0, s14
 80025d8:	eef0 0a67 	vmov.f32	s1, s15
 80025dc:	4815      	ldr	r0, [pc, #84]	@ (8002634 <LED_Sequence_02+0x2c4>)
 80025de:	47a0      	blx	r4
			motor2.step_speed=100;
 80025e0:	4b14      	ldr	r3, [pc, #80]	@ (8002634 <LED_Sequence_02+0x2c4>)
 80025e2:	2264      	movs	r2, #100	@ 0x64
 80025e4:	639a      	str	r2, [r3, #56]	@ 0x38
			caseIntervals2 =400;
 80025e6:	4b11      	ldr	r3, [pc, #68]	@ (800262c <LED_Sequence_02+0x2bc>)
 80025e8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80025ec:	601a      	str	r2, [r3, #0]

			break;
 80025ee:	e196      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 17:
			solV_11_ON();
 80025f0:	f000 fb86 	bl	8002d00 <solV_11_ON>
			caseIntervals2 =300;
 80025f4:	4b0d      	ldr	r3, [pc, #52]	@ (800262c <LED_Sequence_02+0x2bc>)
 80025f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80025fa:	601a      	str	r2, [r3, #0]

			break;
 80025fc:	e18f      	b.n	800291e <LED_Sequence_02+0x5ae>
 80025fe:	bf00      	nop
	...
 800260c:	c0863000 	.word	0xc0863000
 8002610:	00000000 	.word	0x00000000
 8002614:	40240000 	.word	0x40240000
 8002618:	00000000 	.word	0x00000000
 800261c:	40786000 	.word	0x40786000
 8002620:	00000000 	.word	0x00000000
 8002624:	40180000 	.word	0x40180000
 8002628:	200002fc 	.word	0x200002fc
 800262c:	2000000c 	.word	0x2000000c
 8002630:	20000004 	.word	0x20000004
 8002634:	200003a0 	.word	0x200003a0
 8002638:	200003e8 	.word	0x200003e8
 800263c:	20000430 	.word	0x20000430
 8002640:	20000344 	.word	0x20000344
 8002644:	20000330 	.word	0x20000330
 8002648:	20000358 	.word	0x20000358
 800264c:	20000018 	.word	0x20000018
 8002650:	40140000 	.word	0x40140000
		case 18:

			motor2.set_desired_angle(&motor2, hairang+10);
 8002654:	4b90      	ldr	r3, [pc, #576]	@ (8002898 <LED_Sequence_02+0x528>)
 8002656:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8002658:	4b90      	ldr	r3, [pc, #576]	@ (800289c <LED_Sequence_02+0x52c>)
 800265a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	4b8f      	ldr	r3, [pc, #572]	@ (80028a0 <LED_Sequence_02+0x530>)
 8002664:	f7fd fe3a 	bl	80002dc <__adddf3>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	ec43 2b17 	vmov	d7, r2, r3
 8002670:	eeb0 0a47 	vmov.f32	s0, s14
 8002674:	eef0 0a67 	vmov.f32	s1, s15
 8002678:	4887      	ldr	r0, [pc, #540]	@ (8002898 <LED_Sequence_02+0x528>)
 800267a:	47a0      	blx	r4
			motor2.step_speed=100;
 800267c:	4b86      	ldr	r3, [pc, #536]	@ (8002898 <LED_Sequence_02+0x528>)
 800267e:	2264      	movs	r2, #100	@ 0x64
 8002680:	639a      	str	r2, [r3, #56]	@ 0x38
			caseIntervals2 =400;
 8002682:	4b88      	ldr	r3, [pc, #544]	@ (80028a4 <LED_Sequence_02+0x534>)
 8002684:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002688:	601a      	str	r2, [r3, #0]
			break;
 800268a:	e148      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 19:
			motor2.set_desired_angle(&motor2, hairang+5);
 800268c:	4b82      	ldr	r3, [pc, #520]	@ (8002898 <LED_Sequence_02+0x528>)
 800268e:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8002690:	4b82      	ldr	r3, [pc, #520]	@ (800289c <LED_Sequence_02+0x52c>)
 8002692:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	4b83      	ldr	r3, [pc, #524]	@ (80028a8 <LED_Sequence_02+0x538>)
 800269c:	f7fd fe1e 	bl	80002dc <__adddf3>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	ec43 2b17 	vmov	d7, r2, r3
 80026a8:	eeb0 0a47 	vmov.f32	s0, s14
 80026ac:	eef0 0a67 	vmov.f32	s1, s15
 80026b0:	4879      	ldr	r0, [pc, #484]	@ (8002898 <LED_Sequence_02+0x528>)
 80026b2:	47a0      	blx	r4
			motor2.step_speed=50;
 80026b4:	4b78      	ldr	r3, [pc, #480]	@ (8002898 <LED_Sequence_02+0x528>)
 80026b6:	2232      	movs	r2, #50	@ 0x32
 80026b8:	639a      	str	r2, [r3, #56]	@ 0x38
			solV_11_OFF();
 80026ba:	f000 fb2d 	bl	8002d18 <solV_11_OFF>
			solV_blow_OFF();
 80026be:	f000 fbeb 	bl	8002e98 <solV_blow_OFF>
			caseIntervals2 = 400;
 80026c2:	4b78      	ldr	r3, [pc, #480]	@ (80028a4 <LED_Sequence_02+0x534>)
 80026c4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80026c8:	601a      	str	r2, [r3, #0]
			break;
 80026ca:	e128      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 20:
			motor4.set_desired_angle(&motor4, -65); // 5->-65 (25.08.22)motor D move 30 deg (80 -> 50)
 80026cc:	4b77      	ldr	r3, [pc, #476]	@ (80028ac <LED_Sequence_02+0x53c>)
 80026ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d0:	ed9f 0b67 	vldr	d0, [pc, #412]	@ 8002870 <LED_Sequence_02+0x500>
 80026d4:	4875      	ldr	r0, [pc, #468]	@ (80028ac <LED_Sequence_02+0x53c>)
 80026d6:	4798      	blx	r3
			motor4.step_speed=100;
 80026d8:	4b74      	ldr	r3, [pc, #464]	@ (80028ac <LED_Sequence_02+0x53c>)
 80026da:	2264      	movs	r2, #100	@ 0x64
 80026dc:	639a      	str	r2, [r3, #56]	@ 0x38
			caseIntervals2 = 550;
 80026de:	4b71      	ldr	r3, [pc, #452]	@ (80028a4 <LED_Sequence_02+0x534>)
 80026e0:	f240 2226 	movw	r2, #550	@ 0x226
 80026e4:	601a      	str	r2, [r3, #0]
			break;
 80026e6:	e11a      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 21:
			motor2.set_desired_angle(&motor2, hairang-10);
 80026e8:	4b6b      	ldr	r3, [pc, #428]	@ (8002898 <LED_Sequence_02+0x528>)
 80026ea:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 80026ec:	4b6b      	ldr	r3, [pc, #428]	@ (800289c <LED_Sequence_02+0x52c>)
 80026ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	4b6a      	ldr	r3, [pc, #424]	@ (80028a0 <LED_Sequence_02+0x530>)
 80026f8:	f7fd fdee 	bl	80002d8 <__aeabi_dsub>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	ec43 2b17 	vmov	d7, r2, r3
 8002704:	eeb0 0a47 	vmov.f32	s0, s14
 8002708:	eef0 0a67 	vmov.f32	s1, s15
 800270c:	4862      	ldr	r0, [pc, #392]	@ (8002898 <LED_Sequence_02+0x528>)
 800270e:	47a0      	blx	r4
			motor4.set_desired_angle(&motor4, -55); //15->-55(25.08.22)
 8002710:	4b66      	ldr	r3, [pc, #408]	@ (80028ac <LED_Sequence_02+0x53c>)
 8002712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002714:	ed9f 0b58 	vldr	d0, [pc, #352]	@ 8002878 <LED_Sequence_02+0x508>
 8002718:	4864      	ldr	r0, [pc, #400]	@ (80028ac <LED_Sequence_02+0x53c>)
 800271a:	4798      	blx	r3
			caseIntervals2 = 500;
 800271c:	4b61      	ldr	r3, [pc, #388]	@ (80028a4 <LED_Sequence_02+0x534>)
 800271e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002722:	601a      	str	r2, [r3, #0]
			break;
 8002724:	e0fb      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 22:
			motor3.set_desired_angle(&motor3, 460); // motor C cw 60 deg
 8002726:	4b62      	ldr	r3, [pc, #392]	@ (80028b0 <LED_Sequence_02+0x540>)
 8002728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800272a:	ed9f 0b55 	vldr	d0, [pc, #340]	@ 8002880 <LED_Sequence_02+0x510>
 800272e:	4860      	ldr	r0, [pc, #384]	@ (80028b0 <LED_Sequence_02+0x540>)
 8002730:	4798      	blx	r3
			caseIntervals2 = 300;
 8002732:	4b5c      	ldr	r3, [pc, #368]	@ (80028a4 <LED_Sequence_02+0x534>)
 8002734:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002738:	601a      	str	r2, [r3, #0]
			break;
 800273a:	e0f0      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 23:
			motor2.set_desired_angle(&motor2, hairang+10);
 800273c:	4b56      	ldr	r3, [pc, #344]	@ (8002898 <LED_Sequence_02+0x528>)
 800273e:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8002740:	4b56      	ldr	r3, [pc, #344]	@ (800289c <LED_Sequence_02+0x52c>)
 8002742:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	4b55      	ldr	r3, [pc, #340]	@ (80028a0 <LED_Sequence_02+0x530>)
 800274c:	f7fd fdc6 	bl	80002dc <__adddf3>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	ec43 2b17 	vmov	d7, r2, r3
 8002758:	eeb0 0a47 	vmov.f32	s0, s14
 800275c:	eef0 0a67 	vmov.f32	s1, s15
 8002760:	484d      	ldr	r0, [pc, #308]	@ (8002898 <LED_Sequence_02+0x528>)
 8002762:	47a0      	blx	r4
			motor2.step_speed=100;
 8002764:	4b4c      	ldr	r3, [pc, #304]	@ (8002898 <LED_Sequence_02+0x528>)
 8002766:	2264      	movs	r2, #100	@ 0x64
 8002768:	639a      	str	r2, [r3, #56]	@ 0x38
			caseIntervals2 = 300;
 800276a:	4b4e      	ldr	r3, [pc, #312]	@ (80028a4 <LED_Sequence_02+0x534>)
 800276c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002770:	601a      	str	r2, [r3, #0]
			motor3.set_desired_angle(&motor3, 400);//400 degree
 8002772:	4b4f      	ldr	r3, [pc, #316]	@ (80028b0 <LED_Sequence_02+0x540>)
 8002774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002776:	ed9f 0b44 	vldr	d0, [pc, #272]	@ 8002888 <LED_Sequence_02+0x518>
 800277a:	484d      	ldr	r0, [pc, #308]	@ (80028b0 <LED_Sequence_02+0x540>)
 800277c:	4798      	blx	r3
			caseIntervals2 = 300;
 800277e:	4b49      	ldr	r3, [pc, #292]	@ (80028a4 <LED_Sequence_02+0x534>)
 8002780:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002784:	601a      	str	r2, [r3, #0]
			break;
 8002786:	e0ca      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 24:
			motor2.set_desired_angle(&motor2, hairang-20);
 8002788:	4b43      	ldr	r3, [pc, #268]	@ (8002898 <LED_Sequence_02+0x528>)
 800278a:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 800278c:	4b43      	ldr	r3, [pc, #268]	@ (800289c <LED_Sequence_02+0x52c>)
 800278e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	4b47      	ldr	r3, [pc, #284]	@ (80028b4 <LED_Sequence_02+0x544>)
 8002798:	f7fd fd9e 	bl	80002d8 <__aeabi_dsub>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	ec43 2b17 	vmov	d7, r2, r3
 80027a4:	eeb0 0a47 	vmov.f32	s0, s14
 80027a8:	eef0 0a67 	vmov.f32	s1, s15
 80027ac:	483a      	ldr	r0, [pc, #232]	@ (8002898 <LED_Sequence_02+0x528>)
 80027ae:	47a0      	blx	r4
			motor4.set_desired_angle(&motor4, -55); //25->-45(25.08.22)//maximum 58 degree
 80027b0:	4b3e      	ldr	r3, [pc, #248]	@ (80028ac <LED_Sequence_02+0x53c>)
 80027b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b4:	ed9f 0b30 	vldr	d0, [pc, #192]	@ 8002878 <LED_Sequence_02+0x508>
 80027b8:	483c      	ldr	r0, [pc, #240]	@ (80028ac <LED_Sequence_02+0x53c>)
 80027ba:	4798      	blx	r3
			caseIntervals2 = 100;
 80027bc:	4b39      	ldr	r3, [pc, #228]	@ (80028a4 <LED_Sequence_02+0x534>)
 80027be:	2264      	movs	r2, #100	@ 0x64
 80027c0:	601a      	str	r2, [r3, #0]
			break;
 80027c2:	e0ac      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 25:
			solV_8_ON();
 80027c4:	f000 fa54 	bl	8002c70 <solV_8_ON>
			//motor3.set_desired_angle(&motor3, 360);
			caseIntervals2 = 500;
 80027c8:	4b36      	ldr	r3, [pc, #216]	@ (80028a4 <LED_Sequence_02+0x534>)
 80027ca:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80027ce:	601a      	str	r2, [r3, #0]
			break;
 80027d0:	e0a5      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 26:
			solV_15_OFF();
 80027d2:	f000 fb01 	bl	8002dd8 <solV_15_OFF>
			caseIntervals2 = 80;
 80027d6:	4b33      	ldr	r3, [pc, #204]	@ (80028a4 <LED_Sequence_02+0x534>)
 80027d8:	2250      	movs	r2, #80	@ 0x50
 80027da:	601a      	str	r2, [r3, #0]
			solV_16_ON();
 80027dc:	f000 fb08 	bl	8002df0 <solV_16_ON>
			caseIntervals2 = 80;
 80027e0:	4b30      	ldr	r3, [pc, #192]	@ (80028a4 <LED_Sequence_02+0x534>)
 80027e2:	2250      	movs	r2, #80	@ 0x50
 80027e4:	601a      	str	r2, [r3, #0]
			solV_18_ON();
 80027e6:	f000 fb33 	bl	8002e50 <solV_18_ON>
			caseIntervals2 = 100;
 80027ea:	4b2e      	ldr	r3, [pc, #184]	@ (80028a4 <LED_Sequence_02+0x534>)
 80027ec:	2264      	movs	r2, #100	@ 0x64
 80027ee:	601a      	str	r2, [r3, #0]
			break;
 80027f0:	e095      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 27:
			solV_17_ON();
 80027f2:	f000 fb15 	bl	8002e20 <solV_17_ON>
			caseIntervals2 = 120;
 80027f6:	4b2b      	ldr	r3, [pc, #172]	@ (80028a4 <LED_Sequence_02+0x534>)
 80027f8:	2278      	movs	r2, #120	@ 0x78
 80027fa:	601a      	str	r2, [r3, #0]
			break;
 80027fc:	e08f      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 28:
			solV_18_OFF();
 80027fe:	f000 fb33 	bl	8002e68 <solV_18_OFF>
			caseIntervals2 = 300;
 8002802:	4b28      	ldr	r3, [pc, #160]	@ (80028a4 <LED_Sequence_02+0x534>)
 8002804:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002808:	601a      	str	r2, [r3, #0]
			break;
 800280a:	e088      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 29:
			solV_15_ON();
 800280c:	f000 fad8 	bl	8002dc0 <solV_15_ON>

			solV_7_OFF();
 8002810:	f000 fa22 	bl	8002c58 <solV_7_OFF>

			solV_11_ON();
 8002814:	f000 fa74 	bl	8002d00 <solV_11_ON>
			caseIntervals2 = 80;
 8002818:	4b22      	ldr	r3, [pc, #136]	@ (80028a4 <LED_Sequence_02+0x534>)
 800281a:	2250      	movs	r2, #80	@ 0x50
 800281c:	601a      	str	r2, [r3, #0]
			break;
 800281e:	e07e      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 30:
			solV_16_OFF();
 8002820:	f000 faf2 	bl	8002e08 <solV_16_OFF>
			caseIntervals2 = 80;
 8002824:	4b1f      	ldr	r3, [pc, #124]	@ (80028a4 <LED_Sequence_02+0x534>)
 8002826:	2250      	movs	r2, #80	@ 0x50
 8002828:	601a      	str	r2, [r3, #0]
			solV_12_ON();
 800282a:	f000 fa81 	bl	8002d30 <solV_12_ON>
			caseIntervals2 = 80;
 800282e:	4b1d      	ldr	r3, [pc, #116]	@ (80028a4 <LED_Sequence_02+0x534>)
 8002830:	2250      	movs	r2, #80	@ 0x50
 8002832:	601a      	str	r2, [r3, #0]
			solV_14_ON();
 8002834:	f000 faac 	bl	8002d90 <solV_14_ON>
			caseIntervals2 = 80;
 8002838:	4b1a      	ldr	r3, [pc, #104]	@ (80028a4 <LED_Sequence_02+0x534>)
 800283a:	2250      	movs	r2, #80	@ 0x50
 800283c:	601a      	str	r2, [r3, #0]
			break;
 800283e:	e06e      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 31:
			solV_17_OFF();
 8002840:	f000 fafa 	bl	8002e38 <solV_17_OFF>
			caseIntervals2 = 80;
 8002844:	4b17      	ldr	r3, [pc, #92]	@ (80028a4 <LED_Sequence_02+0x534>)
 8002846:	2250      	movs	r2, #80	@ 0x50
 8002848:	601a      	str	r2, [r3, #0]
			break;
 800284a:	e068      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 32:
			motor3.set_desired_angle(&motor3, 0);
 800284c:	4b18      	ldr	r3, [pc, #96]	@ (80028b0 <LED_Sequence_02+0x540>)
 800284e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002850:	ed9f 0b0f 	vldr	d0, [pc, #60]	@ 8002890 <LED_Sequence_02+0x520>
 8002854:	4816      	ldr	r0, [pc, #88]	@ (80028b0 <LED_Sequence_02+0x540>)
 8002856:	4798      	blx	r3
			solV_8_ON();
 8002858:	f000 fa0a 	bl	8002c70 <solV_8_ON>
			caseIntervals2 = 1;
 800285c:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <LED_Sequence_02+0x534>)
 800285e:	2201      	movs	r2, #1
 8002860:	601a      	str	r2, [r3, #0]
			break;
 8002862:	e05c      	b.n	800291e <LED_Sequence_02+0x5ae>
		case 33:
			//solV_11_OFF();
			caseIntervals2 = 1;
 8002864:	4b0f      	ldr	r3, [pc, #60]	@ (80028a4 <LED_Sequence_02+0x534>)
 8002866:	2201      	movs	r2, #1
 8002868:	601a      	str	r2, [r3, #0]
			break;//hair brushing,sorting... head up!
 800286a:	e058      	b.n	800291e <LED_Sequence_02+0x5ae>
 800286c:	f3af 8000 	nop.w
 8002870:	00000000 	.word	0x00000000
 8002874:	c0504000 	.word	0xc0504000
 8002878:	00000000 	.word	0x00000000
 800287c:	c04b8000 	.word	0xc04b8000
 8002880:	00000000 	.word	0x00000000
 8002884:	407cc000 	.word	0x407cc000
 8002888:	00000000 	.word	0x00000000
 800288c:	40790000 	.word	0x40790000
	...
 8002898:	200003a0 	.word	0x200003a0
 800289c:	20000018 	.word	0x20000018
 80028a0:	40240000 	.word	0x40240000
 80028a4:	2000000c 	.word	0x2000000c
 80028a8:	40140000 	.word	0x40140000
 80028ac:	20000430 	.word	0x20000430
 80028b0:	200003e8 	.word	0x200003e8
 80028b4:	40340000 	.word	0x40340000

		case 34:
			//motor4.set_desired_angle(&motor4, 70);
			//			motor2.set_desired_angle(&motor2, 0);
			motor2.step_speed = 250;
 80028b8:	4b24      	ldr	r3, [pc, #144]	@ (800294c <LED_Sequence_02+0x5dc>)
 80028ba:	22fa      	movs	r2, #250	@ 0xfa
 80028bc:	639a      	str	r2, [r3, #56]	@ 0x38
			motor2.current_angle_step = motor2.current_angle_step+200;
 80028be:	4b23      	ldr	r3, [pc, #140]	@ (800294c <LED_Sequence_02+0x5dc>)
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	33c8      	adds	r3, #200	@ 0xc8
 80028c4:	4a21      	ldr	r2, [pc, #132]	@ (800294c <LED_Sequence_02+0x5dc>)
 80028c6:	6153      	str	r3, [r2, #20]
			motor2_flag = 0;
 80028c8:	4921      	ldr	r1, [pc, #132]	@ (8002950 <LED_Sequence_02+0x5e0>)
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	e9c1 2300 	strd	r2, r3, [r1]
			motor4.step_speed = 250;
 80028d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002954 <LED_Sequence_02+0x5e4>)
 80028d8:	22fa      	movs	r2, #250	@ 0xfa
 80028da:	639a      	str	r2, [r3, #56]	@ 0x38
			motor4.current_angle_step = motor4.current_angle_step-200;
 80028dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002954 <LED_Sequence_02+0x5e4>)
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	3bc8      	subs	r3, #200	@ 0xc8
 80028e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002954 <LED_Sequence_02+0x5e4>)
 80028e4:	6153      	str	r3, [r2, #20]
			motor4_flag = 0;
 80028e6:	491c      	ldr	r1, [pc, #112]	@ (8002958 <LED_Sequence_02+0x5e8>)
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	e9c1 2300 	strd	r2, r3, [r1]

			sequence_04=1; //brushing sequence start
 80028f4:	4b19      	ldr	r3, [pc, #100]	@ (800295c <LED_Sequence_02+0x5ec>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

			caseIntervals2 = 100;
 80028fa:	4b19      	ldr	r3, [pc, #100]	@ (8002960 <LED_Sequence_02+0x5f0>)
 80028fc:	2264      	movs	r2, #100	@ 0x64
 80028fe:	601a      	str	r2, [r3, #0]
			uint8_t print[] = "next\n";
 8002900:	4a18      	ldr	r2, [pc, #96]	@ (8002964 <LED_Sequence_02+0x5f4>)
 8002902:	463b      	mov	r3, r7
 8002904:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002908:	6018      	str	r0, [r3, #0]
 800290a:	3304      	adds	r3, #4
 800290c:	8019      	strh	r1, [r3, #0]
			HAL_UART_Transmit(&huart5, print, sizeof(print) - 1,
 800290e:	4639      	mov	r1, r7
 8002910:	f04f 33ff 	mov.w	r3, #4294967295
 8002914:	2205      	movs	r2, #5
 8002916:	4814      	ldr	r0, [pc, #80]	@ (8002968 <LED_Sequence_02+0x5f8>)
 8002918:	f002 f82c 	bl	8004974 <HAL_UART_Transmit>
					HAL_MAX_DELAY);

			break;
 800291c:	bf00      	nop


		}

		step2 = (step2 + 1) % 35;
 800291e:	4b13      	ldr	r3, [pc, #76]	@ (800296c <LED_Sequence_02+0x5fc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	4b12      	ldr	r3, [pc, #72]	@ (8002970 <LED_Sequence_02+0x600>)
 8002926:	fb83 1302 	smull	r1, r3, r3, r2
 800292a:	4413      	add	r3, r2
 800292c:	1159      	asrs	r1, r3, #5
 800292e:	17d3      	asrs	r3, r2, #31
 8002930:	1ac9      	subs	r1, r1, r3
 8002932:	460b      	mov	r3, r1
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	00d9      	lsls	r1, r3, #3
 800293a:	1ac9      	subs	r1, r1, r3
 800293c:	1a51      	subs	r1, r2, r1
 800293e:	4b0b      	ldr	r3, [pc, #44]	@ (800296c <LED_Sequence_02+0x5fc>)
 8002940:	6019      	str	r1, [r3, #0]
	}
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	bd90      	pop	{r4, r7, pc}
 800294a:	bf00      	nop
 800294c:	200003a0 	.word	0x200003a0
 8002950:	20000480 	.word	0x20000480
 8002954:	20000430 	.word	0x20000430
 8002958:	20000490 	.word	0x20000490
 800295c:	20000334 	.word	0x20000334
 8002960:	2000000c 	.word	0x2000000c
 8002964:	08008734 	.word	0x08008734
 8002968:	200002ac 	.word	0x200002ac
 800296c:	20000344 	.word	0x20000344
 8002970:	ea0ea0eb 	.word	0xea0ea0eb

08002974 <LED_Sequence_04>:
void LED_Sequence_04(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
	//static int step = 0;

	if (HAL_GetTick() - lastTime4 >= caseIntervals4 && sequence_04==1)
 8002978:	f000 fdf8 	bl	800356c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	4b39      	ldr	r3, [pc, #228]	@ (8002a64 <LED_Sequence_04+0xf0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	4a38      	ldr	r2, [pc, #224]	@ (8002a68 <LED_Sequence_04+0xf4>)
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	4293      	cmp	r3, r2
 800298a:	d369      	bcc.n	8002a60 <LED_Sequence_04+0xec>
 800298c:	4b37      	ldr	r3, [pc, #220]	@ (8002a6c <LED_Sequence_04+0xf8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d165      	bne.n	8002a60 <LED_Sequence_04+0xec>
	{
		lastTime4 = HAL_GetTick();
 8002994:	f000 fdea 	bl	800356c <HAL_GetTick>
 8002998:	4603      	mov	r3, r0
 800299a:	4a32      	ldr	r2, [pc, #200]	@ (8002a64 <LED_Sequence_04+0xf0>)
 800299c:	6013      	str	r3, [r2, #0]

		switch (step4)
 800299e:	4b34      	ldr	r3, [pc, #208]	@ (8002a70 <LED_Sequence_04+0xfc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b09      	cmp	r3, #9
 80029a4:	d84c      	bhi.n	8002a40 <LED_Sequence_04+0xcc>
 80029a6:	a201      	add	r2, pc, #4	@ (adr r2, 80029ac <LED_Sequence_04+0x38>)
 80029a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ac:	080029d5 	.word	0x080029d5
 80029b0:	080029e1 	.word	0x080029e1
 80029b4:	080029e9 	.word	0x080029e9
 80029b8:	080029f1 	.word	0x080029f1
 80029bc:	080029f9 	.word	0x080029f9
 80029c0:	08002a05 	.word	0x08002a05
 80029c4:	08002a0d 	.word	0x08002a0d
 80029c8:	08002a1b 	.word	0x08002a1b
 80029cc:	08002a27 	.word	0x08002a27
 80029d0:	08002a33 	.word	0x08002a33
		{
		case 0:
			solV_9_ON();
 80029d4:	f000 f964 	bl	8002ca0 <solV_9_ON>
			caseIntervals4 = 120;
 80029d8:	4b23      	ldr	r3, [pc, #140]	@ (8002a68 <LED_Sequence_04+0xf4>)
 80029da:	2278      	movs	r2, #120	@ 0x78
 80029dc:	601a      	str	r2, [r3, #0]
			break;
 80029de:	e02f      	b.n	8002a40 <LED_Sequence_04+0xcc>
		case 1:

			caseIntervals4 = 1;
 80029e0:	4b21      	ldr	r3, [pc, #132]	@ (8002a68 <LED_Sequence_04+0xf4>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
			break;
 80029e6:	e02b      	b.n	8002a40 <LED_Sequence_04+0xcc>
		case 2:

			caseIntervals4 = 1;
 80029e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002a68 <LED_Sequence_04+0xf4>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	601a      	str	r2, [r3, #0]
			break;
 80029ee:	e027      	b.n	8002a40 <LED_Sequence_04+0xcc>
		case 3:

			caseIntervals4 = 1;
 80029f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a68 <LED_Sequence_04+0xf4>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
			break;
 80029f6:	e023      	b.n	8002a40 <LED_Sequence_04+0xcc>
		case 4:
			solV_13_ON();
 80029f8:	f000 f9b2 	bl	8002d60 <solV_13_ON>
			caseIntervals4 = 80;
 80029fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a68 <LED_Sequence_04+0xf4>)
 80029fe:	2250      	movs	r2, #80	@ 0x50
 8002a00:	601a      	str	r2, [r3, #0]
			break;
 8002a02:	e01d      	b.n	8002a40 <LED_Sequence_04+0xcc>
		case 5:

			caseIntervals4 = 1;
 8002a04:	4b18      	ldr	r3, [pc, #96]	@ (8002a68 <LED_Sequence_04+0xf4>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	601a      	str	r2, [r3, #0]
			break;
 8002a0a:	e019      	b.n	8002a40 <LED_Sequence_04+0xcc>
		case 6:
			solV_14_OFF();
 8002a0c:	f000 f9cc 	bl	8002da8 <solV_14_OFF>
			caseIntervals4 = 300;
 8002a10:	4b15      	ldr	r3, [pc, #84]	@ (8002a68 <LED_Sequence_04+0xf4>)
 8002a12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a16:	601a      	str	r2, [r3, #0]
			break;
 8002a18:	e012      	b.n	8002a40 <LED_Sequence_04+0xcc>
		case 7:
			solV_12_OFF();
 8002a1a:	f000 f995 	bl	8002d48 <solV_12_OFF>
			caseIntervals4 = 80;
 8002a1e:	4b12      	ldr	r3, [pc, #72]	@ (8002a68 <LED_Sequence_04+0xf4>)
 8002a20:	2250      	movs	r2, #80	@ 0x50
 8002a22:	601a      	str	r2, [r3, #0]
			break;
 8002a24:	e00c      	b.n	8002a40 <LED_Sequence_04+0xcc>
		case 8:
			solV_13_OFF();
 8002a26:	f000 f9a7 	bl	8002d78 <solV_13_OFF>
			caseIntervals4 = 80;
 8002a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a68 <LED_Sequence_04+0xf4>)
 8002a2c:	2250      	movs	r2, #80	@ 0x50
 8002a2e:	601a      	str	r2, [r3, #0]
			break;
 8002a30:	e006      	b.n	8002a40 <LED_Sequence_04+0xcc>
		case 9:

			sequence_04=0;
 8002a32:	4b0e      	ldr	r3, [pc, #56]	@ (8002a6c <LED_Sequence_04+0xf8>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
			caseIntervals4 = 10;
 8002a38:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <LED_Sequence_04+0xf4>)
 8002a3a:	220a      	movs	r2, #10
 8002a3c:	601a      	str	r2, [r3, #0]
			break;
 8002a3e:	bf00      	nop



		}

		step4 = (step4 + 1) % 10;
 8002a40:	4b0b      	ldr	r3, [pc, #44]	@ (8002a70 <LED_Sequence_04+0xfc>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	1c59      	adds	r1, r3, #1
 8002a46:	4b0b      	ldr	r3, [pc, #44]	@ (8002a74 <LED_Sequence_04+0x100>)
 8002a48:	fb83 2301 	smull	r2, r3, r3, r1
 8002a4c:	109a      	asrs	r2, r3, #2
 8002a4e:	17cb      	asrs	r3, r1, #31
 8002a50:	1ad2      	subs	r2, r2, r3
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	1aca      	subs	r2, r1, r3
 8002a5c:	4b04      	ldr	r3, [pc, #16]	@ (8002a70 <LED_Sequence_04+0xfc>)
 8002a5e:	601a      	str	r2, [r3, #0]
	}
}
 8002a60:	bf00      	nop
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20000304 	.word	0x20000304
 8002a68:	20000014 	.word	0x20000014
 8002a6c:	20000334 	.word	0x20000334
 8002a70:	2000034c 	.word	0x2000034c
 8002a74:	66666667 	.word	0x66666667

08002a78 <LED_Sequence_stop>:

void LED_Sequence_stop(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - lastTime3) >= caseIntervals3)
 8002a7c:	f000 fd76 	bl	800356c <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b33      	ldr	r3, [pc, #204]	@ (8002b50 <LED_Sequence_stop+0xd8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	4a32      	ldr	r2, [pc, #200]	@ (8002b54 <LED_Sequence_stop+0xdc>)
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d352      	bcc.n	8002b36 <LED_Sequence_stop+0xbe>
	{
		lastTime3 = HAL_GetTick();
 8002a90:	f000 fd6c 	bl	800356c <HAL_GetTick>
 8002a94:	4603      	mov	r3, r0
 8002a96:	4a2e      	ldr	r2, [pc, #184]	@ (8002b50 <LED_Sequence_stop+0xd8>)
 8002a98:	6013      	str	r3, [r2, #0]
		switch (step3)
 8002a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8002b58 <LED_Sequence_stop+0xe0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d028      	beq.n	8002af4 <LED_Sequence_stop+0x7c>
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	dc47      	bgt.n	8002b36 <LED_Sequence_stop+0xbe>
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <LED_Sequence_stop+0x38>
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d01b      	beq.n	8002ae6 <LED_Sequence_stop+0x6e>

		}

	}

}
 8002aae:	e042      	b.n	8002b36 <LED_Sequence_stop+0xbe>
			motor4.set_desired_angle(&motor4, 0);
 8002ab0:	4b2a      	ldr	r3, [pc, #168]	@ (8002b5c <LED_Sequence_stop+0xe4>)
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab4:	ed9f 0b22 	vldr	d0, [pc, #136]	@ 8002b40 <LED_Sequence_stop+0xc8>
 8002ab8:	4828      	ldr	r0, [pc, #160]	@ (8002b5c <LED_Sequence_stop+0xe4>)
 8002aba:	4798      	blx	r3
			motor3.set_desired_angle(&motor3, 0);
 8002abc:	4b28      	ldr	r3, [pc, #160]	@ (8002b60 <LED_Sequence_stop+0xe8>)
 8002abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac0:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8002b40 <LED_Sequence_stop+0xc8>
 8002ac4:	4826      	ldr	r0, [pc, #152]	@ (8002b60 <LED_Sequence_stop+0xe8>)
 8002ac6:	4798      	blx	r3
			motor2.set_desired_angle(&motor2, 45);
 8002ac8:	4b26      	ldr	r3, [pc, #152]	@ (8002b64 <LED_Sequence_stop+0xec>)
 8002aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002acc:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8002b48 <LED_Sequence_stop+0xd0>
 8002ad0:	4824      	ldr	r0, [pc, #144]	@ (8002b64 <LED_Sequence_stop+0xec>)
 8002ad2:	4798      	blx	r3
			solV_7_OFF();
 8002ad4:	f000 f8c0 	bl	8002c58 <solV_7_OFF>
			solV_blow_OFF();
 8002ad8:	f000 f9de 	bl	8002e98 <solV_blow_OFF>
			caseIntervals3 = 3000;
 8002adc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b54 <LED_Sequence_stop+0xdc>)
 8002ade:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002ae2:	601a      	str	r2, [r3, #0]
			break;
 8002ae4:	e027      	b.n	8002b36 <LED_Sequence_stop+0xbe>
			solV_8_ON();
 8002ae6:	f000 f8c3 	bl	8002c70 <solV_8_ON>
			caseIntervals3 = 3000;
 8002aea:	4b1a      	ldr	r3, [pc, #104]	@ (8002b54 <LED_Sequence_stop+0xdc>)
 8002aec:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002af0:	601a      	str	r2, [r3, #0]
			break;
 8002af2:	e020      	b.n	8002b36 <LED_Sequence_stop+0xbe>
			solV_4_OFF();solV_5_OFF();solV_6_OFF();solV_7_OFF();
 8002af4:	f000 f868 	bl	8002bc8 <solV_4_OFF>
 8002af8:	f000 f87e 	bl	8002bf8 <solV_5_OFF>
 8002afc:	f000 f894 	bl	8002c28 <solV_6_OFF>
 8002b00:	f000 f8aa 	bl	8002c58 <solV_7_OFF>
			solV_9_OFF();solV_10_OFF();solV_11_OFF();
 8002b04:	f000 f8d8 	bl	8002cb8 <solV_9_OFF>
 8002b08:	f000 f8ee 	bl	8002ce8 <solV_10_OFF>
 8002b0c:	f000 f904 	bl	8002d18 <solV_11_OFF>
			solV_12_OFF();solV_13_OFF();solV_14_OFF();solV_15_OFF();
 8002b10:	f000 f91a 	bl	8002d48 <solV_12_OFF>
 8002b14:	f000 f930 	bl	8002d78 <solV_13_OFF>
 8002b18:	f000 f946 	bl	8002da8 <solV_14_OFF>
 8002b1c:	f000 f95c 	bl	8002dd8 <solV_15_OFF>
			solV_16_OFF();solV_17_OFF();solV_18_OFF();
 8002b20:	f000 f972 	bl	8002e08 <solV_16_OFF>
 8002b24:	f000 f988 	bl	8002e38 <solV_17_OFF>
 8002b28:	f000 f99e 	bl	8002e68 <solV_18_OFF>
			caseIntervals3 = 2000;
 8002b2c:	4b09      	ldr	r3, [pc, #36]	@ (8002b54 <LED_Sequence_stop+0xdc>)
 8002b2e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002b32:	601a      	str	r2, [r3, #0]
			break;
 8002b34:	bf00      	nop
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	f3af 8000 	nop.w
	...
 8002b4c:	40468000 	.word	0x40468000
 8002b50:	20000300 	.word	0x20000300
 8002b54:	20000010 	.word	0x20000010
 8002b58:	20000348 	.word	0x20000348
 8002b5c:	20000430 	.word	0x20000430
 8002b60:	200003e8 	.word	0x200003e8
 8002b64:	200003a0 	.word	0x200003a0

08002b68 <solV_1_ON>:
}


//##############Sollenoid Valve Functions###############//
//------------For Hair extraction-----------//
void solV_1_ON(){HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_SET);}
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	2102      	movs	r1, #2
 8002b70:	4802      	ldr	r0, [pc, #8]	@ (8002b7c <solV_1_ON+0x14>)
 8002b72:	f001 f87b 	bl	8003c6c <HAL_GPIO_WritePin>
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40021c00 	.word	0x40021c00

08002b80 <solV_2_ON>:
void solV_1_OFF(){HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_RESET);}
void solV_2_ON(){HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_SET);}
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	2201      	movs	r2, #1
 8002b86:	2102      	movs	r1, #2
 8002b88:	4802      	ldr	r0, [pc, #8]	@ (8002b94 <solV_2_ON+0x14>)
 8002b8a:	f001 f86f 	bl	8003c6c <HAL_GPIO_WritePin>
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40021c00 	.word	0x40021c00

08002b98 <solV_3_ON>:
void solV_2_OFF(){HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_RESET);}
void solV_3_ON(){HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_SET);}
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	4802      	ldr	r0, [pc, #8]	@ (8002bac <solV_3_ON+0x14>)
 8002ba2:	f001 f863 	bl	8003c6c <HAL_GPIO_WritePin>
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40021c00 	.word	0x40021c00

08002bb0 <solV_4_ON>:
void solV_3_OFF(){HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_RESET);}
void solV_4_ON(){HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);}
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	2140      	movs	r1, #64	@ 0x40
 8002bb8:	4802      	ldr	r0, [pc, #8]	@ (8002bc4 <solV_4_ON+0x14>)
 8002bba:	f001 f857 	bl	8003c6c <HAL_GPIO_WritePin>
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40020400 	.word	0x40020400

08002bc8 <solV_4_OFF>:
void solV_4_OFF(){HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);}
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2140      	movs	r1, #64	@ 0x40
 8002bd0:	4802      	ldr	r0, [pc, #8]	@ (8002bdc <solV_4_OFF+0x14>)
 8002bd2:	f001 f84b 	bl	8003c6c <HAL_GPIO_WritePin>
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40020400 	.word	0x40020400

08002be0 <solV_5_ON>:
void solV_5_ON(){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);}
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	2201      	movs	r2, #1
 8002be6:	2140      	movs	r1, #64	@ 0x40
 8002be8:	4802      	ldr	r0, [pc, #8]	@ (8002bf4 <solV_5_ON+0x14>)
 8002bea:	f001 f83f 	bl	8003c6c <HAL_GPIO_WritePin>
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40020000 	.word	0x40020000

08002bf8 <solV_5_OFF>:
void solV_5_OFF(){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);}
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2140      	movs	r1, #64	@ 0x40
 8002c00:	4802      	ldr	r0, [pc, #8]	@ (8002c0c <solV_5_OFF+0x14>)
 8002c02:	f001 f833 	bl	8003c6c <HAL_GPIO_WritePin>
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40020000 	.word	0x40020000

08002c10 <solV_6_ON>:
void solV_6_ON(){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);}
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	2201      	movs	r2, #1
 8002c16:	2120      	movs	r1, #32
 8002c18:	4802      	ldr	r0, [pc, #8]	@ (8002c24 <solV_6_ON+0x14>)
 8002c1a:	f001 f827 	bl	8003c6c <HAL_GPIO_WritePin>
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40020000 	.word	0x40020000

08002c28 <solV_6_OFF>:
void solV_6_OFF(){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);}
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2120      	movs	r1, #32
 8002c30:	4802      	ldr	r0, [pc, #8]	@ (8002c3c <solV_6_OFF+0x14>)
 8002c32:	f001 f81b 	bl	8003c6c <HAL_GPIO_WritePin>
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40020000 	.word	0x40020000

08002c40 <solV_7_ON>:


//-----------For Hair Knotting-----------//
void solV_7_ON(){HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);}
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	2201      	movs	r2, #1
 8002c46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c4a:	4802      	ldr	r0, [pc, #8]	@ (8002c54 <solV_7_ON+0x14>)
 8002c4c:	f001 f80e 	bl	8003c6c <HAL_GPIO_WritePin>
 8002c50:	bf00      	nop
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40021000 	.word	0x40021000

08002c58 <solV_7_OFF>:
void solV_7_OFF(){HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);}
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c62:	4802      	ldr	r0, [pc, #8]	@ (8002c6c <solV_7_OFF+0x14>)
 8002c64:	f001 f802 	bl	8003c6c <HAL_GPIO_WritePin>
 8002c68:	bf00      	nop
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40021000 	.word	0x40021000

08002c70 <solV_8_ON>:
void solV_8_ON(){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);}
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	2201      	movs	r2, #1
 8002c76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c7a:	4802      	ldr	r0, [pc, #8]	@ (8002c84 <solV_8_ON+0x14>)
 8002c7c:	f000 fff6 	bl	8003c6c <HAL_GPIO_WritePin>
 8002c80:	bf00      	nop
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40020000 	.word	0x40020000

08002c88 <solV_8_OFF>:
void solV_8_OFF(){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);}
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c92:	4802      	ldr	r0, [pc, #8]	@ (8002c9c <solV_8_OFF+0x14>)
 8002c94:	f000 ffea 	bl	8003c6c <HAL_GPIO_WritePin>
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40020000 	.word	0x40020000

08002ca0 <solV_9_ON>:
//void solV_9_ON(){HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);}
//void solV_9_OFF(){HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);}

void solV_9_ON(){HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);}
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002caa:	4802      	ldr	r0, [pc, #8]	@ (8002cb4 <solV_9_ON+0x14>)
 8002cac:	f000 ffde 	bl	8003c6c <HAL_GPIO_WritePin>
 8002cb0:	bf00      	nop
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40021000 	.word	0x40021000

08002cb8 <solV_9_OFF>:
void solV_9_OFF(){HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);}
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002cc2:	4802      	ldr	r0, [pc, #8]	@ (8002ccc <solV_9_OFF+0x14>)
 8002cc4:	f000 ffd2 	bl	8003c6c <HAL_GPIO_WritePin>
 8002cc8:	bf00      	nop
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40021000 	.word	0x40021000

08002cd0 <solV_10_ON>:

void solV_10_ON(){HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);}
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	2110      	movs	r1, #16
 8002cd8:	4802      	ldr	r0, [pc, #8]	@ (8002ce4 <solV_10_ON+0x14>)
 8002cda:	f000 ffc7 	bl	8003c6c <HAL_GPIO_WritePin>
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40020400 	.word	0x40020400

08002ce8 <solV_10_OFF>:
void solV_10_OFF(){HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);}
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	2200      	movs	r2, #0
 8002cee:	2110      	movs	r1, #16
 8002cf0:	4802      	ldr	r0, [pc, #8]	@ (8002cfc <solV_10_OFF+0x14>)
 8002cf2:	f000 ffbb 	bl	8003c6c <HAL_GPIO_WritePin>
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40020400 	.word	0x40020400

08002d00 <solV_11_ON>:
void solV_11_ON(){HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);}
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	2201      	movs	r2, #1
 8002d06:	2120      	movs	r1, #32
 8002d08:	4802      	ldr	r0, [pc, #8]	@ (8002d14 <solV_11_ON+0x14>)
 8002d0a:	f000 ffaf 	bl	8003c6c <HAL_GPIO_WritePin>
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40020400 	.word	0x40020400

08002d18 <solV_11_OFF>:
void solV_11_OFF(){HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);}
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2120      	movs	r1, #32
 8002d20:	4802      	ldr	r0, [pc, #8]	@ (8002d2c <solV_11_OFF+0x14>)
 8002d22:	f000 ffa3 	bl	8003c6c <HAL_GPIO_WritePin>
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40020400 	.word	0x40020400

08002d30 <solV_12_ON>:


//-----------For Hair Brushing-----------//
void solV_12_ON(){HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);}
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	2201      	movs	r2, #1
 8002d36:	2180      	movs	r1, #128	@ 0x80
 8002d38:	4802      	ldr	r0, [pc, #8]	@ (8002d44 <solV_12_ON+0x14>)
 8002d3a:	f000 ff97 	bl	8003c6c <HAL_GPIO_WritePin>
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40020800 	.word	0x40020800

08002d48 <solV_12_OFF>:
void solV_12_OFF(){HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);}
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2180      	movs	r1, #128	@ 0x80
 8002d50:	4802      	ldr	r0, [pc, #8]	@ (8002d5c <solV_12_OFF+0x14>)
 8002d52:	f000 ff8b 	bl	8003c6c <HAL_GPIO_WritePin>
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40020800 	.word	0x40020800

08002d60 <solV_13_ON>:
void solV_13_ON(){HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);}
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	2201      	movs	r2, #1
 8002d66:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d6a:	4802      	ldr	r0, [pc, #8]	@ (8002d74 <solV_13_ON+0x14>)
 8002d6c:	f000 ff7e 	bl	8003c6c <HAL_GPIO_WritePin>
 8002d70:	bf00      	nop
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000

08002d78 <solV_13_OFF>:
void solV_13_OFF(){HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);}
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d82:	4802      	ldr	r0, [pc, #8]	@ (8002d8c <solV_13_OFF+0x14>)
 8002d84:	f000 ff72 	bl	8003c6c <HAL_GPIO_WritePin>
 8002d88:	bf00      	nop
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40021000 	.word	0x40021000

08002d90 <solV_14_ON>:
void solV_14_ON(){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);}
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	2201      	movs	r2, #1
 8002d96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d9a:	4802      	ldr	r0, [pc, #8]	@ (8002da4 <solV_14_ON+0x14>)
 8002d9c:	f000 ff66 	bl	8003c6c <HAL_GPIO_WritePin>
 8002da0:	bf00      	nop
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40020c00 	.word	0x40020c00

08002da8 <solV_14_OFF>:
void solV_14_OFF(){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);}
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	2200      	movs	r2, #0
 8002dae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002db2:	4802      	ldr	r0, [pc, #8]	@ (8002dbc <solV_14_OFF+0x14>)
 8002db4:	f000 ff5a 	bl	8003c6c <HAL_GPIO_WritePin>
 8002db8:	bf00      	nop
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40020c00 	.word	0x40020c00

08002dc0 <solV_15_ON>:
void solV_15_ON(){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);}
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002dca:	4802      	ldr	r0, [pc, #8]	@ (8002dd4 <solV_15_ON+0x14>)
 8002dcc:	f000 ff4e 	bl	8003c6c <HAL_GPIO_WritePin>
 8002dd0:	bf00      	nop
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40020000 	.word	0x40020000

08002dd8 <solV_15_OFF>:
void solV_15_OFF(){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);}
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002de2:	4802      	ldr	r0, [pc, #8]	@ (8002dec <solV_15_OFF+0x14>)
 8002de4:	f000 ff42 	bl	8003c6c <HAL_GPIO_WritePin>
 8002de8:	bf00      	nop
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40020000 	.word	0x40020000

08002df0 <solV_16_ON>:
void solV_16_ON(){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);}
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	2201      	movs	r2, #1
 8002df6:	2104      	movs	r1, #4
 8002df8:	4802      	ldr	r0, [pc, #8]	@ (8002e04 <solV_16_ON+0x14>)
 8002dfa:	f000 ff37 	bl	8003c6c <HAL_GPIO_WritePin>
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40020000 	.word	0x40020000

08002e08 <solV_16_OFF>:
void solV_16_OFF(){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);}
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2104      	movs	r1, #4
 8002e10:	4802      	ldr	r0, [pc, #8]	@ (8002e1c <solV_16_OFF+0x14>)
 8002e12:	f000 ff2b 	bl	8003c6c <HAL_GPIO_WritePin>
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40020000 	.word	0x40020000

08002e20 <solV_17_ON>:
void solV_17_ON(){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);}
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	2201      	movs	r2, #1
 8002e26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002e2a:	4802      	ldr	r0, [pc, #8]	@ (8002e34 <solV_17_ON+0x14>)
 8002e2c:	f000 ff1e 	bl	8003c6c <HAL_GPIO_WritePin>
 8002e30:	bf00      	nop
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40020c00 	.word	0x40020c00

08002e38 <solV_17_OFF>:
void solV_17_OFF(){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);}
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002e42:	4802      	ldr	r0, [pc, #8]	@ (8002e4c <solV_17_OFF+0x14>)
 8002e44:	f000 ff12 	bl	8003c6c <HAL_GPIO_WritePin>
 8002e48:	bf00      	nop
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40020c00 	.word	0x40020c00

08002e50 <solV_18_ON>:
void solV_18_ON(){HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);}
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	2201      	movs	r2, #1
 8002e56:	2108      	movs	r1, #8
 8002e58:	4802      	ldr	r0, [pc, #8]	@ (8002e64 <solV_18_ON+0x14>)
 8002e5a:	f000 ff07 	bl	8003c6c <HAL_GPIO_WritePin>
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40020400 	.word	0x40020400

08002e68 <solV_18_OFF>:
void solV_18_OFF(){HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);}
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2108      	movs	r1, #8
 8002e70:	4802      	ldr	r0, [pc, #8]	@ (8002e7c <solV_18_OFF+0x14>)
 8002e72:	f000 fefb 	bl	8003c6c <HAL_GPIO_WritePin>
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40020400 	.word	0x40020400

08002e80 <solV_blow_ON>:

void solV_blow_ON(){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);}
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	2201      	movs	r2, #1
 8002e86:	2108      	movs	r1, #8
 8002e88:	4802      	ldr	r0, [pc, #8]	@ (8002e94 <solV_blow_ON+0x14>)
 8002e8a:	f000 feef 	bl	8003c6c <HAL_GPIO_WritePin>
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40020000 	.word	0x40020000

08002e98 <solV_blow_OFF>:
void solV_blow_OFF(){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);}
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2108      	movs	r1, #8
 8002ea0:	4802      	ldr	r0, [pc, #8]	@ (8002eac <solV_blow_OFF+0x14>)
 8002ea2:	f000 fee3 	bl	8003c6c <HAL_GPIO_WritePin>
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40020000 	.word	0x40020000

08002eb0 <solV_blow_Hair_ON>:
void solV_blow_Hair_ON(){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);}
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002eba:	4802      	ldr	r0, [pc, #8]	@ (8002ec4 <solV_blow_Hair_ON+0x14>)
 8002ebc:	f000 fed6 	bl	8003c6c <HAL_GPIO_WritePin>
 8002ec0:	bf00      	nop
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40020000 	.word	0x40020000

08002ec8 <solV_blow_Hair_OFF>:
void solV_blow_Hair_OFF(){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);}
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002ed2:	4802      	ldr	r0, [pc, #8]	@ (8002edc <solV_blow_Hair_OFF+0x14>)
 8002ed4:	f000 feca 	bl	8003c6c <HAL_GPIO_WritePin>
 8002ed8:	bf00      	nop
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40020000 	.word	0x40020000

08002ee0 <solV_Grab_ON>:

void solV_Grab_ON(){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);}
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002eea:	4802      	ldr	r0, [pc, #8]	@ (8002ef4 <solV_Grab_ON+0x14>)
 8002eec:	f000 febe 	bl	8003c6c <HAL_GPIO_WritePin>
 8002ef0:	bf00      	nop
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40020c00 	.word	0x40020c00

08002ef8 <solV_Grab_OFF>:
void solV_Grab_OFF(){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);}
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	2200      	movs	r2, #0
 8002efe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002f02:	4802      	ldr	r0, [pc, #8]	@ (8002f0c <solV_Grab_OFF+0x14>)
 8002f04:	f000 feb2 	bl	8003c6c <HAL_GPIO_WritePin>
 8002f08:	bf00      	nop
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40020c00 	.word	0x40020c00

08002f10 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f14:	b672      	cpsid	i
}
 8002f16:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002f18:	bf00      	nop
 8002f1a:	e7fd      	b.n	8002f18 <Error_Handler+0x8>

08002f1c <set_desired_angle_func>:
#include <stdlib.h>
#include <math.h>
#include "stepmotor.h"

// 함수 정의
void set_desired_angle_func(StepMotor* motor, double angle) {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	ed87 0b00 	vstr	d0, [r7]
    motor->desired_angle_deg = angle;
 8002f28:	68f9      	ldr	r1, [r7, #12]
 8002f2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f2e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    motor->desired_angle_step = (int32_t)(angle / motor->deg_step_ratio*2);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002f38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f3c:	f7fd fcae 	bl	800089c <__aeabi_ddiv>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4610      	mov	r0, r2
 8002f46:	4619      	mov	r1, r3
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	f7fd f9c6 	bl	80002dc <__adddf3>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	f7fd fe10 	bl	8000b7c <__aeabi_d2iz>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	621a      	str	r2, [r3, #32]
}
 8002f62:	bf00      	nop
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <step_while_func>:

void step_while_func(StepMotor* motor){
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
       	motor->current_angle_deg = motor->current_angle_step * motor->deg_step_ratio;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd fafc 	bl	8000574 <__aeabi_i2d>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002f82:	f7fd fb61 	bl	8000648 <__aeabi_dmul>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	if (motor->current_angle_step != motor->desired_angle_step){
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695a      	ldr	r2, [r3, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d042      	beq.n	8003022 <step_while_func+0xb8>
		if (motor->current_angle_step < motor->desired_angle_step) {
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	695a      	ldr	r2, [r3, #20]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	da0b      	bge.n	8002fc0 <step_while_func+0x56>
			HAL_GPIO_WritePin(motor->dir_GPIOx, motor->dir_GPIO_Pin, GPIO_PIN_SET); // 시계 방향
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	889b      	ldrh	r3, [r3, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	f000 fe5a 	bl	8003c6c <HAL_GPIO_WritePin>
			motor->dir = 0;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	739a      	strb	r2, [r3, #14]
 8002fbe:	e00a      	b.n	8002fd6 <step_while_func+0x6c>
		} else {
			HAL_GPIO_WritePin(motor->dir_GPIOx, motor->dir_GPIO_Pin, GPIO_PIN_RESET); // 반시계 방향
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	889b      	ldrh	r3, [r3, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	4619      	mov	r1, r3
 8002fcc:	f000 fe4e 	bl	8003c6c <HAL_GPIO_WritePin>
			motor->dir = 1;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	739a      	strb	r2, [r3, #14]
		}
//		    HAL_GPIO_TogglePin(motor->pulse_GPIOx, motor->pulse_GPIO_Pin); // 펄스 발생
		if (motor->phase <= motor->step_speed){//smaller phase makes motor faster but not too small
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d805      	bhi.n	8002fee <step_while_func+0x84>
//			HAL_GPIO_WritePin(motor->pulse_GPIOx, motor->pulse_GPIO_Pin, GPIO_PIN_SET);
			motor->phase = motor->phase + 1;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	611a      	str	r2, [r3, #16]
				motor->current_angle_step--;
			}
			motor->phase = 0;
		}
	}
}
 8002fec:	e019      	b.n	8003022 <step_while_func+0xb8>
			HAL_GPIO_TogglePin(motor->pulse_GPIOx, motor->pulse_GPIO_Pin);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	899b      	ldrh	r3, [r3, #12]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	f000 fe50 	bl	8003c9e <HAL_GPIO_TogglePin>
			if (motor->dir == 0){
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	7b9b      	ldrb	r3, [r3, #14]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d105      	bne.n	8003012 <step_while_func+0xa8>
				motor->current_angle_step++;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	615a      	str	r2, [r3, #20]
 8003010:	e004      	b.n	800301c <step_while_func+0xb2>
				motor->current_angle_step--;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	1e5a      	subs	r2, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	615a      	str	r2, [r3, #20]
			motor->phase = 0;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	611a      	str	r2, [r3, #16]
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	0000      	movs	r0, r0
 800302c:	0000      	movs	r0, r0
	...

08003030 <initStepMotor>:

void initStepMotor(StepMotor* motor,
                   GPIO_TypeDef* dir_GPIOx,
                   uint16_t dir_GPIO_Pin,
                   GPIO_TypeDef* pulse_GPIOx,
                   uint16_t pulse_GPIO_Pin) {
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	80fb      	strh	r3, [r7, #6]

    motor->dir_GPIOx = dir_GPIOx;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	601a      	str	r2, [r3, #0]
    motor->dir_GPIO_Pin = dir_GPIO_Pin;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	88fa      	ldrh	r2, [r7, #6]
 800304a:	809a      	strh	r2, [r3, #4]
    motor->pulse_GPIOx = pulse_GPIOx;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	609a      	str	r2, [r3, #8]
    motor->pulse_GPIO_Pin = pulse_GPIO_Pin;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8b3a      	ldrh	r2, [r7, #24]
 8003056:	819a      	strh	r2, [r3, #12]

    motor->dir = 0;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	739a      	strb	r2, [r3, #14]
    motor->current_angle_step = 0;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	615a      	str	r2, [r3, #20]
    motor->current_angle_deg = 0.0;
 8003064:	68f9      	ldr	r1, [r7, #12]
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    motor->desired_angle_step = 0;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	621a      	str	r2, [r3, #32]
    motor->desired_angle_deg = 0.0;
 8003078:	68f9      	ldr	r1, [r7, #12]
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    motor->deg_step_ratio = 360.0/1000.0;
 8003086:	68f9      	ldr	r1, [r7, #12]
 8003088:	a30b      	add	r3, pc, #44	@ (adr r3, 80030b8 <initStepMotor+0x88>)
 800308a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    motor->step_speed = 50;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2232      	movs	r2, #50	@ 0x32
 8003096:	639a      	str	r2, [r3, #56]	@ 0x38


    motor->set_desired_angle = set_desired_angle_func;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4a05      	ldr	r2, [pc, #20]	@ (80030b0 <initStepMotor+0x80>)
 800309c:	63da      	str	r2, [r3, #60]	@ 0x3c
    motor->step_while = step_while_func;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4a04      	ldr	r2, [pc, #16]	@ (80030b4 <initStepMotor+0x84>)
 80030a2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80030a4:	bf00      	nop
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	08002f1d 	.word	0x08002f1d
 80030b4:	08002f6b 	.word	0x08002f6b
 80030b8:	70a3d70a 	.word	0x70a3d70a
 80030bc:	3fd70a3d 	.word	0x3fd70a3d

080030c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	607b      	str	r3, [r7, #4]
 80030ca:	4b10      	ldr	r3, [pc, #64]	@ (800310c <HAL_MspInit+0x4c>)
 80030cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ce:	4a0f      	ldr	r2, [pc, #60]	@ (800310c <HAL_MspInit+0x4c>)
 80030d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80030d6:	4b0d      	ldr	r3, [pc, #52]	@ (800310c <HAL_MspInit+0x4c>)
 80030d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030de:	607b      	str	r3, [r7, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	4b09      	ldr	r3, [pc, #36]	@ (800310c <HAL_MspInit+0x4c>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	4a08      	ldr	r2, [pc, #32]	@ (800310c <HAL_MspInit+0x4c>)
 80030ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030f2:	4b06      	ldr	r3, [pc, #24]	@ (800310c <HAL_MspInit+0x4c>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fa:	603b      	str	r3, [r7, #0]
 80030fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40023800 	.word	0x40023800

08003110 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08a      	sub	sp, #40	@ 0x28
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003118:	f107 0314 	add.w	r3, r7, #20
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a2c      	ldr	r2, [pc, #176]	@ (80031e0 <HAL_UART_MspInit+0xd0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d152      	bne.n	80031d8 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	4b2b      	ldr	r3, [pc, #172]	@ (80031e4 <HAL_UART_MspInit+0xd4>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	4a2a      	ldr	r2, [pc, #168]	@ (80031e4 <HAL_UART_MspInit+0xd4>)
 800313c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003140:	6413      	str	r3, [r2, #64]	@ 0x40
 8003142:	4b28      	ldr	r3, [pc, #160]	@ (80031e4 <HAL_UART_MspInit+0xd4>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	4b24      	ldr	r3, [pc, #144]	@ (80031e4 <HAL_UART_MspInit+0xd4>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	4a23      	ldr	r2, [pc, #140]	@ (80031e4 <HAL_UART_MspInit+0xd4>)
 8003158:	f043 0304 	orr.w	r3, r3, #4
 800315c:	6313      	str	r3, [r2, #48]	@ 0x30
 800315e:	4b21      	ldr	r3, [pc, #132]	@ (80031e4 <HAL_UART_MspInit+0xd4>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	4b1d      	ldr	r3, [pc, #116]	@ (80031e4 <HAL_UART_MspInit+0xd4>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	4a1c      	ldr	r2, [pc, #112]	@ (80031e4 <HAL_UART_MspInit+0xd4>)
 8003174:	f043 0308 	orr.w	r3, r3, #8
 8003178:	6313      	str	r3, [r2, #48]	@ 0x30
 800317a:	4b1a      	ldr	r3, [pc, #104]	@ (80031e4 <HAL_UART_MspInit+0xd4>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	60bb      	str	r3, [r7, #8]
 8003184:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003186:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800318a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318c:	2302      	movs	r3, #2
 800318e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	2300      	movs	r3, #0
 8003192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003194:	2303      	movs	r3, #3
 8003196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003198:	2308      	movs	r3, #8
 800319a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800319c:	f107 0314 	add.w	r3, r7, #20
 80031a0:	4619      	mov	r1, r3
 80031a2:	4811      	ldr	r0, [pc, #68]	@ (80031e8 <HAL_UART_MspInit+0xd8>)
 80031a4:	f000 fbb6 	bl	8003914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031a8:	2304      	movs	r3, #4
 80031aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ac:	2302      	movs	r3, #2
 80031ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b4:	2303      	movs	r3, #3
 80031b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80031b8:	2308      	movs	r3, #8
 80031ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031bc:	f107 0314 	add.w	r3, r7, #20
 80031c0:	4619      	mov	r1, r3
 80031c2:	480a      	ldr	r0, [pc, #40]	@ (80031ec <HAL_UART_MspInit+0xdc>)
 80031c4:	f000 fba6 	bl	8003914 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80031c8:	2200      	movs	r2, #0
 80031ca:	2100      	movs	r1, #0
 80031cc:	2035      	movs	r0, #53	@ 0x35
 80031ce:	f000 fad8 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80031d2:	2035      	movs	r0, #53	@ 0x35
 80031d4:	f000 faf1 	bl	80037ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART5_MspInit 1 */

  }

}
 80031d8:	bf00      	nop
 80031da:	3728      	adds	r7, #40	@ 0x28
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40005000 	.word	0x40005000
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40020800 	.word	0x40020800
 80031ec:	40020c00 	.word	0x40020c00

080031f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031f4:	bf00      	nop
 80031f6:	e7fd      	b.n	80031f4 <NMI_Handler+0x4>

080031f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031fc:	bf00      	nop
 80031fe:	e7fd      	b.n	80031fc <HardFault_Handler+0x4>

08003200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003204:	bf00      	nop
 8003206:	e7fd      	b.n	8003204 <MemManage_Handler+0x4>

08003208 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800320c:	bf00      	nop
 800320e:	e7fd      	b.n	800320c <BusFault_Handler+0x4>

08003210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003214:	bf00      	nop
 8003216:	e7fd      	b.n	8003214 <UsageFault_Handler+0x4>

08003218 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003226:	b480      	push	{r7}
 8003228:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800322a:	bf00      	nop
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003246:	f000 f97d 	bl	8003544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}

0800324e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003252:	2001      	movs	r0, #1
 8003254:	f000 fd3e 	bl	8003cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003258:	bf00      	nop
 800325a:	bd80      	pop	{r7, pc}

0800325c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003260:	2002      	movs	r0, #2
 8003262:	f000 fd37 	bl	8003cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003266:	bf00      	nop
 8003268:	bd80      	pop	{r7, pc}

0800326a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800326e:	2004      	movs	r0, #4
 8003270:	f000 fd30 	bl	8003cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003274:	bf00      	nop
 8003276:	bd80      	pop	{r7, pc}

08003278 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800327c:	2008      	movs	r0, #8
 800327e:	f000 fd29 	bl	8003cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800328c:	4802      	ldr	r0, [pc, #8]	@ (8003298 <UART5_IRQHandler+0x10>)
 800328e:	f001 fc21 	bl	8004ad4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003292:	bf00      	nop
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	200002ac 	.word	0x200002ac

0800329c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return 1;
 80032a0:	2301      	movs	r3, #1
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <_kill>:

int _kill(int pid, int sig)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032b6:	f003 fb39 	bl	800692c <__errno>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2216      	movs	r2, #22
 80032be:	601a      	str	r2, [r3, #0]
  return -1;
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <_exit>:

void _exit (int status)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032d4:	f04f 31ff 	mov.w	r1, #4294967295
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff ffe7 	bl	80032ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80032de:	bf00      	nop
 80032e0:	e7fd      	b.n	80032de <_exit+0x12>

080032e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b086      	sub	sp, #24
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	e00a      	b.n	800330a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032f4:	f3af 8000 	nop.w
 80032f8:	4601      	mov	r1, r0
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	60ba      	str	r2, [r7, #8]
 8003300:	b2ca      	uxtb	r2, r1
 8003302:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	3301      	adds	r3, #1
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	429a      	cmp	r2, r3
 8003310:	dbf0      	blt.n	80032f4 <_read+0x12>
  }

  return len;
 8003312:	687b      	ldr	r3, [r7, #4]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	e009      	b.n	8003342 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	60ba      	str	r2, [r7, #8]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	3301      	adds	r3, #1
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	429a      	cmp	r2, r3
 8003348:	dbf1      	blt.n	800332e <_write+0x12>
  }
  return len;
 800334a:	687b      	ldr	r3, [r7, #4]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <_close>:

int _close(int file)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800335c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800337c:	605a      	str	r2, [r3, #4]
  return 0;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <_isatty>:

int _isatty(int file)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003394:	2301      	movs	r3, #1
}
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b085      	sub	sp, #20
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033c4:	4a14      	ldr	r2, [pc, #80]	@ (8003418 <_sbrk+0x5c>)
 80033c6:	4b15      	ldr	r3, [pc, #84]	@ (800341c <_sbrk+0x60>)
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033d0:	4b13      	ldr	r3, [pc, #76]	@ (8003420 <_sbrk+0x64>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d102      	bne.n	80033de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033d8:	4b11      	ldr	r3, [pc, #68]	@ (8003420 <_sbrk+0x64>)
 80033da:	4a12      	ldr	r2, [pc, #72]	@ (8003424 <_sbrk+0x68>)
 80033dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033de:	4b10      	ldr	r3, [pc, #64]	@ (8003420 <_sbrk+0x64>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4413      	add	r3, r2
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d207      	bcs.n	80033fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033ec:	f003 fa9e 	bl	800692c <__errno>
 80033f0:	4603      	mov	r3, r0
 80033f2:	220c      	movs	r2, #12
 80033f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033f6:	f04f 33ff 	mov.w	r3, #4294967295
 80033fa:	e009      	b.n	8003410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033fc:	4b08      	ldr	r3, [pc, #32]	@ (8003420 <_sbrk+0x64>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003402:	4b07      	ldr	r3, [pc, #28]	@ (8003420 <_sbrk+0x64>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4413      	add	r3, r2
 800340a:	4a05      	ldr	r2, [pc, #20]	@ (8003420 <_sbrk+0x64>)
 800340c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800340e:	68fb      	ldr	r3, [r7, #12]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20020000 	.word	0x20020000
 800341c:	00000400 	.word	0x00000400
 8003420:	200004a0 	.word	0x200004a0
 8003424:	200005f8 	.word	0x200005f8

08003428 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800342c:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <SystemInit+0x20>)
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003432:	4a05      	ldr	r2, [pc, #20]	@ (8003448 <SystemInit+0x20>)
 8003434:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003438:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800344c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003484 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003450:	f7ff ffea 	bl	8003428 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003454:	480c      	ldr	r0, [pc, #48]	@ (8003488 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003456:	490d      	ldr	r1, [pc, #52]	@ (800348c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003458:	4a0d      	ldr	r2, [pc, #52]	@ (8003490 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800345a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800345c:	e002      	b.n	8003464 <LoopCopyDataInit>

0800345e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800345e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003462:	3304      	adds	r3, #4

08003464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003468:	d3f9      	bcc.n	800345e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800346a:	4a0a      	ldr	r2, [pc, #40]	@ (8003494 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800346c:	4c0a      	ldr	r4, [pc, #40]	@ (8003498 <LoopFillZerobss+0x22>)
  movs r3, #0
 800346e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003470:	e001      	b.n	8003476 <LoopFillZerobss>

08003472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003474:	3204      	adds	r2, #4

08003476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003478:	d3fb      	bcc.n	8003472 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800347a:	f003 fa5d 	bl	8006938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800347e:	f7fe fae7 	bl	8001a50 <main>
  bx  lr    
 8003482:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003484:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800348c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003490:	08008b7c 	.word	0x08008b7c
  ldr r2, =_sbss
 8003494:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003498:	200005f4 	.word	0x200005f4

0800349c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800349c:	e7fe      	b.n	800349c <ADC_IRQHandler>
	...

080034a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034a4:	4b0e      	ldr	r3, [pc, #56]	@ (80034e0 <HAL_Init+0x40>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a0d      	ldr	r2, [pc, #52]	@ (80034e0 <HAL_Init+0x40>)
 80034aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034b0:	4b0b      	ldr	r3, [pc, #44]	@ (80034e0 <HAL_Init+0x40>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a0a      	ldr	r2, [pc, #40]	@ (80034e0 <HAL_Init+0x40>)
 80034b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034bc:	4b08      	ldr	r3, [pc, #32]	@ (80034e0 <HAL_Init+0x40>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a07      	ldr	r2, [pc, #28]	@ (80034e0 <HAL_Init+0x40>)
 80034c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034c8:	2003      	movs	r0, #3
 80034ca:	f000 f94f 	bl	800376c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034ce:	2000      	movs	r0, #0
 80034d0:	f000 f808 	bl	80034e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034d4:	f7ff fdf4 	bl	80030c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023c00 	.word	0x40023c00

080034e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034ec:	4b12      	ldr	r3, [pc, #72]	@ (8003538 <HAL_InitTick+0x54>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	4b12      	ldr	r3, [pc, #72]	@ (800353c <HAL_InitTick+0x58>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	4619      	mov	r1, r3
 80034f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80034fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f967 	bl	80037d6 <HAL_SYSTICK_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e00e      	b.n	8003530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b0f      	cmp	r3, #15
 8003516:	d80a      	bhi.n	800352e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003518:	2200      	movs	r2, #0
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	f04f 30ff 	mov.w	r0, #4294967295
 8003520:	f000 f92f 	bl	8003782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003524:	4a06      	ldr	r2, [pc, #24]	@ (8003540 <HAL_InitTick+0x5c>)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	e000      	b.n	8003530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000020 	.word	0x20000020
 800353c:	20000028 	.word	0x20000028
 8003540:	20000024 	.word	0x20000024

08003544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003548:	4b06      	ldr	r3, [pc, #24]	@ (8003564 <HAL_IncTick+0x20>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <HAL_IncTick+0x24>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4413      	add	r3, r2
 8003554:	4a04      	ldr	r2, [pc, #16]	@ (8003568 <HAL_IncTick+0x24>)
 8003556:	6013      	str	r3, [r2, #0]
}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	20000028 	.word	0x20000028
 8003568:	200004a4 	.word	0x200004a4

0800356c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return uwTick;
 8003570:	4b03      	ldr	r3, [pc, #12]	@ (8003580 <HAL_GetTick+0x14>)
 8003572:	681b      	ldr	r3, [r3, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	200004a4 	.word	0x200004a4

08003584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800358c:	f7ff ffee 	bl	800356c <HAL_GetTick>
 8003590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359c:	d005      	beq.n	80035aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800359e:	4b0a      	ldr	r3, [pc, #40]	@ (80035c8 <HAL_Delay+0x44>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4413      	add	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035aa:	bf00      	nop
 80035ac:	f7ff ffde 	bl	800356c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d8f7      	bhi.n	80035ac <HAL_Delay+0x28>
  {
  }
}
 80035bc:	bf00      	nop
 80035be:	bf00      	nop
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20000028 	.word	0x20000028

080035cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003610 <__NVIC_SetPriorityGrouping+0x44>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035e8:	4013      	ands	r3, r2
 80035ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035fe:	4a04      	ldr	r2, [pc, #16]	@ (8003610 <__NVIC_SetPriorityGrouping+0x44>)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	60d3      	str	r3, [r2, #12]
}
 8003604:	bf00      	nop
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	e000ed00 	.word	0xe000ed00

08003614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003618:	4b04      	ldr	r3, [pc, #16]	@ (800362c <__NVIC_GetPriorityGrouping+0x18>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	0a1b      	lsrs	r3, r3, #8
 800361e:	f003 0307 	and.w	r3, r3, #7
}
 8003622:	4618      	mov	r0, r3
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	e000ed00 	.word	0xe000ed00

08003630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800363a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363e:	2b00      	cmp	r3, #0
 8003640:	db0b      	blt.n	800365a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	f003 021f 	and.w	r2, r3, #31
 8003648:	4907      	ldr	r1, [pc, #28]	@ (8003668 <__NVIC_EnableIRQ+0x38>)
 800364a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	2001      	movs	r0, #1
 8003652:	fa00 f202 	lsl.w	r2, r0, r2
 8003656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	e000e100 	.word	0xe000e100

0800366c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	6039      	str	r1, [r7, #0]
 8003676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367c:	2b00      	cmp	r3, #0
 800367e:	db0a      	blt.n	8003696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	b2da      	uxtb	r2, r3
 8003684:	490c      	ldr	r1, [pc, #48]	@ (80036b8 <__NVIC_SetPriority+0x4c>)
 8003686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368a:	0112      	lsls	r2, r2, #4
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	440b      	add	r3, r1
 8003690:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003694:	e00a      	b.n	80036ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	b2da      	uxtb	r2, r3
 800369a:	4908      	ldr	r1, [pc, #32]	@ (80036bc <__NVIC_SetPriority+0x50>)
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	3b04      	subs	r3, #4
 80036a4:	0112      	lsls	r2, r2, #4
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	440b      	add	r3, r1
 80036aa:	761a      	strb	r2, [r3, #24]
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	e000e100 	.word	0xe000e100
 80036bc:	e000ed00 	.word	0xe000ed00

080036c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b089      	sub	sp, #36	@ 0x24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f1c3 0307 	rsb	r3, r3, #7
 80036da:	2b04      	cmp	r3, #4
 80036dc:	bf28      	it	cs
 80036de:	2304      	movcs	r3, #4
 80036e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	3304      	adds	r3, #4
 80036e6:	2b06      	cmp	r3, #6
 80036e8:	d902      	bls.n	80036f0 <NVIC_EncodePriority+0x30>
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3b03      	subs	r3, #3
 80036ee:	e000      	b.n	80036f2 <NVIC_EncodePriority+0x32>
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f4:	f04f 32ff 	mov.w	r2, #4294967295
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	43da      	mvns	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	401a      	ands	r2, r3
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003708:	f04f 31ff 	mov.w	r1, #4294967295
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	fa01 f303 	lsl.w	r3, r1, r3
 8003712:	43d9      	mvns	r1, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003718:	4313      	orrs	r3, r2
         );
}
 800371a:	4618      	mov	r0, r3
 800371c:	3724      	adds	r7, #36	@ 0x24
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3b01      	subs	r3, #1
 8003734:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003738:	d301      	bcc.n	800373e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800373a:	2301      	movs	r3, #1
 800373c:	e00f      	b.n	800375e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800373e:	4a0a      	ldr	r2, [pc, #40]	@ (8003768 <SysTick_Config+0x40>)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3b01      	subs	r3, #1
 8003744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003746:	210f      	movs	r1, #15
 8003748:	f04f 30ff 	mov.w	r0, #4294967295
 800374c:	f7ff ff8e 	bl	800366c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003750:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <SysTick_Config+0x40>)
 8003752:	2200      	movs	r2, #0
 8003754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003756:	4b04      	ldr	r3, [pc, #16]	@ (8003768 <SysTick_Config+0x40>)
 8003758:	2207      	movs	r2, #7
 800375a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	e000e010 	.word	0xe000e010

0800376c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ff29 	bl	80035cc <__NVIC_SetPriorityGrouping>
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003782:	b580      	push	{r7, lr}
 8003784:	b086      	sub	sp, #24
 8003786:	af00      	add	r7, sp, #0
 8003788:	4603      	mov	r3, r0
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	607a      	str	r2, [r7, #4]
 800378e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003794:	f7ff ff3e 	bl	8003614 <__NVIC_GetPriorityGrouping>
 8003798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	6978      	ldr	r0, [r7, #20]
 80037a0:	f7ff ff8e 	bl	80036c0 <NVIC_EncodePriority>
 80037a4:	4602      	mov	r2, r0
 80037a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037aa:	4611      	mov	r1, r2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff ff5d 	bl	800366c <__NVIC_SetPriority>
}
 80037b2:	bf00      	nop
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	4603      	mov	r3, r0
 80037c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff ff31 	bl	8003630 <__NVIC_EnableIRQ>
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff ffa2 	bl	8003728 <SysTick_Config>
 80037e4:	4603      	mov	r3, r0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b084      	sub	sp, #16
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037fc:	f7ff feb6 	bl	800356c <HAL_GetTick>
 8003800:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d008      	beq.n	8003820 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2280      	movs	r2, #128	@ 0x80
 8003812:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e052      	b.n	80038c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0216 	bic.w	r2, r2, #22
 800382e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800383e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003844:	2b00      	cmp	r3, #0
 8003846:	d103      	bne.n	8003850 <HAL_DMA_Abort+0x62>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800384c:	2b00      	cmp	r3, #0
 800384e:	d007      	beq.n	8003860 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0208 	bic.w	r2, r2, #8
 800385e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0201 	bic.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003870:	e013      	b.n	800389a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003872:	f7ff fe7b 	bl	800356c <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b05      	cmp	r3, #5
 800387e:	d90c      	bls.n	800389a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2203      	movs	r2, #3
 800388a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e015      	b.n	80038c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1e4      	bne.n	8003872 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ac:	223f      	movs	r2, #63	@ 0x3f
 80038ae:	409a      	lsls	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d004      	beq.n	80038ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2280      	movs	r2, #128	@ 0x80
 80038e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e00c      	b.n	8003906 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2205      	movs	r2, #5
 80038f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0201 	bic.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003914:	b480      	push	{r7}
 8003916:	b089      	sub	sp, #36	@ 0x24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003922:	2300      	movs	r3, #0
 8003924:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003926:	2300      	movs	r3, #0
 8003928:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800392a:	2300      	movs	r3, #0
 800392c:	61fb      	str	r3, [r7, #28]
 800392e:	e165      	b.n	8003bfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003930:	2201      	movs	r2, #1
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4013      	ands	r3, r2
 8003942:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	429a      	cmp	r2, r3
 800394a:	f040 8154 	bne.w	8003bf6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	2b01      	cmp	r3, #1
 8003958:	d005      	beq.n	8003966 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003962:	2b02      	cmp	r3, #2
 8003964:	d130      	bne.n	80039c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	2203      	movs	r2, #3
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43db      	mvns	r3, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4013      	ands	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4313      	orrs	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800399c:	2201      	movs	r2, #1
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	f003 0201 	and.w	r2, r3, #1
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d017      	beq.n	8003a04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	2203      	movs	r2, #3
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4013      	ands	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d123      	bne.n	8003a58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	08da      	lsrs	r2, r3, #3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3208      	adds	r2, #8
 8003a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	220f      	movs	r2, #15
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4013      	ands	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	08da      	lsrs	r2, r3, #3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3208      	adds	r2, #8
 8003a52:	69b9      	ldr	r1, [r7, #24]
 8003a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	2203      	movs	r2, #3
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f003 0203 	and.w	r2, r3, #3
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80ae 	beq.w	8003bf6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	4b5d      	ldr	r3, [pc, #372]	@ (8003c14 <HAL_GPIO_Init+0x300>)
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa2:	4a5c      	ldr	r2, [pc, #368]	@ (8003c14 <HAL_GPIO_Init+0x300>)
 8003aa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003aaa:	4b5a      	ldr	r3, [pc, #360]	@ (8003c14 <HAL_GPIO_Init+0x300>)
 8003aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ab6:	4a58      	ldr	r2, [pc, #352]	@ (8003c18 <HAL_GPIO_Init+0x304>)
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	089b      	lsrs	r3, r3, #2
 8003abc:	3302      	adds	r3, #2
 8003abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	220f      	movs	r2, #15
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a4f      	ldr	r2, [pc, #316]	@ (8003c1c <HAL_GPIO_Init+0x308>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d025      	beq.n	8003b2e <HAL_GPIO_Init+0x21a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a4e      	ldr	r2, [pc, #312]	@ (8003c20 <HAL_GPIO_Init+0x30c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d01f      	beq.n	8003b2a <HAL_GPIO_Init+0x216>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a4d      	ldr	r2, [pc, #308]	@ (8003c24 <HAL_GPIO_Init+0x310>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d019      	beq.n	8003b26 <HAL_GPIO_Init+0x212>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a4c      	ldr	r2, [pc, #304]	@ (8003c28 <HAL_GPIO_Init+0x314>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d013      	beq.n	8003b22 <HAL_GPIO_Init+0x20e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a4b      	ldr	r2, [pc, #300]	@ (8003c2c <HAL_GPIO_Init+0x318>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00d      	beq.n	8003b1e <HAL_GPIO_Init+0x20a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a4a      	ldr	r2, [pc, #296]	@ (8003c30 <HAL_GPIO_Init+0x31c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d007      	beq.n	8003b1a <HAL_GPIO_Init+0x206>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a49      	ldr	r2, [pc, #292]	@ (8003c34 <HAL_GPIO_Init+0x320>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d101      	bne.n	8003b16 <HAL_GPIO_Init+0x202>
 8003b12:	2306      	movs	r3, #6
 8003b14:	e00c      	b.n	8003b30 <HAL_GPIO_Init+0x21c>
 8003b16:	2307      	movs	r3, #7
 8003b18:	e00a      	b.n	8003b30 <HAL_GPIO_Init+0x21c>
 8003b1a:	2305      	movs	r3, #5
 8003b1c:	e008      	b.n	8003b30 <HAL_GPIO_Init+0x21c>
 8003b1e:	2304      	movs	r3, #4
 8003b20:	e006      	b.n	8003b30 <HAL_GPIO_Init+0x21c>
 8003b22:	2303      	movs	r3, #3
 8003b24:	e004      	b.n	8003b30 <HAL_GPIO_Init+0x21c>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e002      	b.n	8003b30 <HAL_GPIO_Init+0x21c>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e000      	b.n	8003b30 <HAL_GPIO_Init+0x21c>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	69fa      	ldr	r2, [r7, #28]
 8003b32:	f002 0203 	and.w	r2, r2, #3
 8003b36:	0092      	lsls	r2, r2, #2
 8003b38:	4093      	lsls	r3, r2
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b40:	4935      	ldr	r1, [pc, #212]	@ (8003c18 <HAL_GPIO_Init+0x304>)
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	089b      	lsrs	r3, r3, #2
 8003b46:	3302      	adds	r3, #2
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8003c38 <HAL_GPIO_Init+0x324>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	43db      	mvns	r3, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b72:	4a31      	ldr	r2, [pc, #196]	@ (8003c38 <HAL_GPIO_Init+0x324>)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b78:	4b2f      	ldr	r3, [pc, #188]	@ (8003c38 <HAL_GPIO_Init+0x324>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b9c:	4a26      	ldr	r2, [pc, #152]	@ (8003c38 <HAL_GPIO_Init+0x324>)
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ba2:	4b25      	ldr	r3, [pc, #148]	@ (8003c38 <HAL_GPIO_Init+0x324>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	43db      	mvns	r3, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8003c38 <HAL_GPIO_Init+0x324>)
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8003c38 <HAL_GPIO_Init+0x324>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bf0:	4a11      	ldr	r2, [pc, #68]	@ (8003c38 <HAL_GPIO_Init+0x324>)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	61fb      	str	r3, [r7, #28]
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	2b0f      	cmp	r3, #15
 8003c00:	f67f ae96 	bls.w	8003930 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop
 8003c08:	3724      	adds	r7, #36	@ 0x24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40023800 	.word	0x40023800
 8003c18:	40013800 	.word	0x40013800
 8003c1c:	40020000 	.word	0x40020000
 8003c20:	40020400 	.word	0x40020400
 8003c24:	40020800 	.word	0x40020800
 8003c28:	40020c00 	.word	0x40020c00
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	40021400 	.word	0x40021400
 8003c34:	40021800 	.word	0x40021800
 8003c38:	40013c00 	.word	0x40013c00

08003c3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	887b      	ldrh	r3, [r7, #2]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
 8003c58:	e001      	b.n	8003c5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	460b      	mov	r3, r1
 8003c76:	807b      	strh	r3, [r7, #2]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c7c:	787b      	ldrb	r3, [r7, #1]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c82:	887a      	ldrh	r2, [r7, #2]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c88:	e003      	b.n	8003c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c8a:	887b      	ldrh	r3, [r7, #2]
 8003c8c:	041a      	lsls	r2, r3, #16
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	619a      	str	r2, [r3, #24]
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b085      	sub	sp, #20
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cb0:	887a      	ldrh	r2, [r7, #2]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	041a      	lsls	r2, r3, #16
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	43d9      	mvns	r1, r3
 8003cbc:	887b      	ldrh	r3, [r7, #2]
 8003cbe:	400b      	ands	r3, r1
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	619a      	str	r2, [r3, #24]
}
 8003cc6:	bf00      	nop
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
	...

08003cd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003cde:	4b08      	ldr	r3, [pc, #32]	@ (8003d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ce0:	695a      	ldr	r2, [r3, #20]
 8003ce2:	88fb      	ldrh	r3, [r7, #6]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d006      	beq.n	8003cf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cea:	4a05      	ldr	r2, [pc, #20]	@ (8003d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fd f938 	bl	8000f68 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cf8:	bf00      	nop
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40013c00 	.word	0x40013c00

08003d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0cc      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d18:	4b68      	ldr	r3, [pc, #416]	@ (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d90c      	bls.n	8003d40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d26:	4b65      	ldr	r3, [pc, #404]	@ (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2e:	4b63      	ldr	r3, [pc, #396]	@ (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d001      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0b8      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d020      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d58:	4b59      	ldr	r3, [pc, #356]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	4a58      	ldr	r2, [pc, #352]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d70:	4b53      	ldr	r3, [pc, #332]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	4a52      	ldr	r2, [pc, #328]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d7c:	4b50      	ldr	r3, [pc, #320]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	494d      	ldr	r1, [pc, #308]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d044      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d107      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da2:	4b47      	ldr	r3, [pc, #284]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d119      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e07f      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d003      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d107      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e06f      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e067      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003de2:	4b37      	ldr	r3, [pc, #220]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f023 0203 	bic.w	r2, r3, #3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	4934      	ldr	r1, [pc, #208]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003df4:	f7ff fbba 	bl	800356c <HAL_GetTick>
 8003df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfa:	e00a      	b.n	8003e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dfc:	f7ff fbb6 	bl	800356c <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e04f      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e12:	4b2b      	ldr	r3, [pc, #172]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 020c 	and.w	r2, r3, #12
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d1eb      	bne.n	8003dfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e24:	4b25      	ldr	r3, [pc, #148]	@ (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 030f 	and.w	r3, r3, #15
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d20c      	bcs.n	8003e4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e32:	4b22      	ldr	r3, [pc, #136]	@ (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3a:	4b20      	ldr	r3, [pc, #128]	@ (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d001      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e032      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e58:	4b19      	ldr	r3, [pc, #100]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	4916      	ldr	r1, [pc, #88]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d009      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e76:	4b12      	ldr	r3, [pc, #72]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	490e      	ldr	r1, [pc, #56]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e8a:	f000 f855 	bl	8003f38 <HAL_RCC_GetSysClockFreq>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	091b      	lsrs	r3, r3, #4
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	490a      	ldr	r1, [pc, #40]	@ (8003ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e9c:	5ccb      	ldrb	r3, [r1, r3]
 8003e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea2:	4a09      	ldr	r2, [pc, #36]	@ (8003ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ea6:	4b09      	ldr	r3, [pc, #36]	@ (8003ecc <HAL_RCC_ClockConfig+0x1c8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff fb1a 	bl	80034e4 <HAL_InitTick>

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	40023c00 	.word	0x40023c00
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	0800873c 	.word	0x0800873c
 8003ec8:	20000020 	.word	0x20000020
 8003ecc:	20000024 	.word	0x20000024

08003ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed4:	4b03      	ldr	r3, [pc, #12]	@ (8003ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	20000020 	.word	0x20000020

08003ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003eec:	f7ff fff0 	bl	8003ed0 <HAL_RCC_GetHCLKFreq>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	4b05      	ldr	r3, [pc, #20]	@ (8003f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	0a9b      	lsrs	r3, r3, #10
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	4903      	ldr	r1, [pc, #12]	@ (8003f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003efe:	5ccb      	ldrb	r3, [r1, r3]
 8003f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	0800874c 	.word	0x0800874c

08003f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f14:	f7ff ffdc 	bl	8003ed0 <HAL_RCC_GetHCLKFreq>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	4b05      	ldr	r3, [pc, #20]	@ (8003f30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	0b5b      	lsrs	r3, r3, #13
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	4903      	ldr	r1, [pc, #12]	@ (8003f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f26:	5ccb      	ldrb	r3, [r1, r3]
 8003f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40023800 	.word	0x40023800
 8003f34:	0800874c 	.word	0x0800874c

08003f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f3c:	b0ae      	sub	sp, #184	@ 0xb8
 8003f3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f5e:	4bcb      	ldr	r3, [pc, #812]	@ (800428c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 030c 	and.w	r3, r3, #12
 8003f66:	2b0c      	cmp	r3, #12
 8003f68:	f200 8206 	bhi.w	8004378 <HAL_RCC_GetSysClockFreq+0x440>
 8003f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f74 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f72:	bf00      	nop
 8003f74:	08003fa9 	.word	0x08003fa9
 8003f78:	08004379 	.word	0x08004379
 8003f7c:	08004379 	.word	0x08004379
 8003f80:	08004379 	.word	0x08004379
 8003f84:	08003fb1 	.word	0x08003fb1
 8003f88:	08004379 	.word	0x08004379
 8003f8c:	08004379 	.word	0x08004379
 8003f90:	08004379 	.word	0x08004379
 8003f94:	08003fb9 	.word	0x08003fb9
 8003f98:	08004379 	.word	0x08004379
 8003f9c:	08004379 	.word	0x08004379
 8003fa0:	08004379 	.word	0x08004379
 8003fa4:	080041a9 	.word	0x080041a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fa8:	4bb9      	ldr	r3, [pc, #740]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x358>)
 8003faa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003fae:	e1e7      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fb0:	4bb8      	ldr	r3, [pc, #736]	@ (8004294 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003fb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003fb6:	e1e3      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fb8:	4bb4      	ldr	r3, [pc, #720]	@ (800428c <HAL_RCC_GetSysClockFreq+0x354>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fc4:	4bb1      	ldr	r3, [pc, #708]	@ (800428c <HAL_RCC_GetSysClockFreq+0x354>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d071      	beq.n	80040b4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fd0:	4bae      	ldr	r3, [pc, #696]	@ (800428c <HAL_RCC_GetSysClockFreq+0x354>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	099b      	lsrs	r3, r3, #6
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fdc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fe8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fec:	2300      	movs	r3, #0
 8003fee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003ff2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ff6:	4622      	mov	r2, r4
 8003ff8:	462b      	mov	r3, r5
 8003ffa:	f04f 0000 	mov.w	r0, #0
 8003ffe:	f04f 0100 	mov.w	r1, #0
 8004002:	0159      	lsls	r1, r3, #5
 8004004:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004008:	0150      	lsls	r0, r2, #5
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4621      	mov	r1, r4
 8004010:	1a51      	subs	r1, r2, r1
 8004012:	6439      	str	r1, [r7, #64]	@ 0x40
 8004014:	4629      	mov	r1, r5
 8004016:	eb63 0301 	sbc.w	r3, r3, r1
 800401a:	647b      	str	r3, [r7, #68]	@ 0x44
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004028:	4649      	mov	r1, r9
 800402a:	018b      	lsls	r3, r1, #6
 800402c:	4641      	mov	r1, r8
 800402e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004032:	4641      	mov	r1, r8
 8004034:	018a      	lsls	r2, r1, #6
 8004036:	4641      	mov	r1, r8
 8004038:	1a51      	subs	r1, r2, r1
 800403a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800403c:	4649      	mov	r1, r9
 800403e:	eb63 0301 	sbc.w	r3, r3, r1
 8004042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004050:	4649      	mov	r1, r9
 8004052:	00cb      	lsls	r3, r1, #3
 8004054:	4641      	mov	r1, r8
 8004056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800405a:	4641      	mov	r1, r8
 800405c:	00ca      	lsls	r2, r1, #3
 800405e:	4610      	mov	r0, r2
 8004060:	4619      	mov	r1, r3
 8004062:	4603      	mov	r3, r0
 8004064:	4622      	mov	r2, r4
 8004066:	189b      	adds	r3, r3, r2
 8004068:	633b      	str	r3, [r7, #48]	@ 0x30
 800406a:	462b      	mov	r3, r5
 800406c:	460a      	mov	r2, r1
 800406e:	eb42 0303 	adc.w	r3, r2, r3
 8004072:	637b      	str	r3, [r7, #52]	@ 0x34
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004080:	4629      	mov	r1, r5
 8004082:	024b      	lsls	r3, r1, #9
 8004084:	4621      	mov	r1, r4
 8004086:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800408a:	4621      	mov	r1, r4
 800408c:	024a      	lsls	r2, r1, #9
 800408e:	4610      	mov	r0, r2
 8004090:	4619      	mov	r1, r3
 8004092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004096:	2200      	movs	r2, #0
 8004098:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800409c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80040a4:	f7fc fdb2 	bl	8000c0c <__aeabi_uldivmod>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4613      	mov	r3, r2
 80040ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040b2:	e067      	b.n	8004184 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b4:	4b75      	ldr	r3, [pc, #468]	@ (800428c <HAL_RCC_GetSysClockFreq+0x354>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	099b      	lsrs	r3, r3, #6
 80040ba:	2200      	movs	r2, #0
 80040bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040c0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80040c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040ce:	2300      	movs	r3, #0
 80040d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040d2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80040d6:	4622      	mov	r2, r4
 80040d8:	462b      	mov	r3, r5
 80040da:	f04f 0000 	mov.w	r0, #0
 80040de:	f04f 0100 	mov.w	r1, #0
 80040e2:	0159      	lsls	r1, r3, #5
 80040e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040e8:	0150      	lsls	r0, r2, #5
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4621      	mov	r1, r4
 80040f0:	1a51      	subs	r1, r2, r1
 80040f2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80040f4:	4629      	mov	r1, r5
 80040f6:	eb63 0301 	sbc.w	r3, r3, r1
 80040fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004108:	4649      	mov	r1, r9
 800410a:	018b      	lsls	r3, r1, #6
 800410c:	4641      	mov	r1, r8
 800410e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004112:	4641      	mov	r1, r8
 8004114:	018a      	lsls	r2, r1, #6
 8004116:	4641      	mov	r1, r8
 8004118:	ebb2 0a01 	subs.w	sl, r2, r1
 800411c:	4649      	mov	r1, r9
 800411e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800412e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004132:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004136:	4692      	mov	sl, r2
 8004138:	469b      	mov	fp, r3
 800413a:	4623      	mov	r3, r4
 800413c:	eb1a 0303 	adds.w	r3, sl, r3
 8004140:	623b      	str	r3, [r7, #32]
 8004142:	462b      	mov	r3, r5
 8004144:	eb4b 0303 	adc.w	r3, fp, r3
 8004148:	627b      	str	r3, [r7, #36]	@ 0x24
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004156:	4629      	mov	r1, r5
 8004158:	028b      	lsls	r3, r1, #10
 800415a:	4621      	mov	r1, r4
 800415c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004160:	4621      	mov	r1, r4
 8004162:	028a      	lsls	r2, r1, #10
 8004164:	4610      	mov	r0, r2
 8004166:	4619      	mov	r1, r3
 8004168:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800416c:	2200      	movs	r2, #0
 800416e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004170:	677a      	str	r2, [r7, #116]	@ 0x74
 8004172:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004176:	f7fc fd49 	bl	8000c0c <__aeabi_uldivmod>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4613      	mov	r3, r2
 8004180:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004184:	4b41      	ldr	r3, [pc, #260]	@ (800428c <HAL_RCC_GetSysClockFreq+0x354>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	0c1b      	lsrs	r3, r3, #16
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	3301      	adds	r3, #1
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004196:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800419a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800419e:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80041a6:	e0eb      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041a8:	4b38      	ldr	r3, [pc, #224]	@ (800428c <HAL_RCC_GetSysClockFreq+0x354>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041b4:	4b35      	ldr	r3, [pc, #212]	@ (800428c <HAL_RCC_GetSysClockFreq+0x354>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d06b      	beq.n	8004298 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c0:	4b32      	ldr	r3, [pc, #200]	@ (800428c <HAL_RCC_GetSysClockFreq+0x354>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	099b      	lsrs	r3, r3, #6
 80041c6:	2200      	movs	r2, #0
 80041c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80041d4:	2300      	movs	r3, #0
 80041d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80041d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80041dc:	4622      	mov	r2, r4
 80041de:	462b      	mov	r3, r5
 80041e0:	f04f 0000 	mov.w	r0, #0
 80041e4:	f04f 0100 	mov.w	r1, #0
 80041e8:	0159      	lsls	r1, r3, #5
 80041ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041ee:	0150      	lsls	r0, r2, #5
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4621      	mov	r1, r4
 80041f6:	1a51      	subs	r1, r2, r1
 80041f8:	61b9      	str	r1, [r7, #24]
 80041fa:	4629      	mov	r1, r5
 80041fc:	eb63 0301 	sbc.w	r3, r3, r1
 8004200:	61fb      	str	r3, [r7, #28]
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800420e:	4659      	mov	r1, fp
 8004210:	018b      	lsls	r3, r1, #6
 8004212:	4651      	mov	r1, sl
 8004214:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004218:	4651      	mov	r1, sl
 800421a:	018a      	lsls	r2, r1, #6
 800421c:	4651      	mov	r1, sl
 800421e:	ebb2 0801 	subs.w	r8, r2, r1
 8004222:	4659      	mov	r1, fp
 8004224:	eb63 0901 	sbc.w	r9, r3, r1
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004234:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004238:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800423c:	4690      	mov	r8, r2
 800423e:	4699      	mov	r9, r3
 8004240:	4623      	mov	r3, r4
 8004242:	eb18 0303 	adds.w	r3, r8, r3
 8004246:	613b      	str	r3, [r7, #16]
 8004248:	462b      	mov	r3, r5
 800424a:	eb49 0303 	adc.w	r3, r9, r3
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800425c:	4629      	mov	r1, r5
 800425e:	024b      	lsls	r3, r1, #9
 8004260:	4621      	mov	r1, r4
 8004262:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004266:	4621      	mov	r1, r4
 8004268:	024a      	lsls	r2, r1, #9
 800426a:	4610      	mov	r0, r2
 800426c:	4619      	mov	r1, r3
 800426e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004272:	2200      	movs	r2, #0
 8004274:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004276:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004278:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800427c:	f7fc fcc6 	bl	8000c0c <__aeabi_uldivmod>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4613      	mov	r3, r2
 8004286:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800428a:	e065      	b.n	8004358 <HAL_RCC_GetSysClockFreq+0x420>
 800428c:	40023800 	.word	0x40023800
 8004290:	00f42400 	.word	0x00f42400
 8004294:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004298:	4b3d      	ldr	r3, [pc, #244]	@ (8004390 <HAL_RCC_GetSysClockFreq+0x458>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	099b      	lsrs	r3, r3, #6
 800429e:	2200      	movs	r2, #0
 80042a0:	4618      	mov	r0, r3
 80042a2:	4611      	mov	r1, r2
 80042a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80042aa:	2300      	movs	r3, #0
 80042ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80042ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80042b2:	4642      	mov	r2, r8
 80042b4:	464b      	mov	r3, r9
 80042b6:	f04f 0000 	mov.w	r0, #0
 80042ba:	f04f 0100 	mov.w	r1, #0
 80042be:	0159      	lsls	r1, r3, #5
 80042c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042c4:	0150      	lsls	r0, r2, #5
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	4641      	mov	r1, r8
 80042cc:	1a51      	subs	r1, r2, r1
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	4649      	mov	r1, r9
 80042d2:	eb63 0301 	sbc.w	r3, r3, r1
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	f04f 0300 	mov.w	r3, #0
 80042e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80042e4:	4659      	mov	r1, fp
 80042e6:	018b      	lsls	r3, r1, #6
 80042e8:	4651      	mov	r1, sl
 80042ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042ee:	4651      	mov	r1, sl
 80042f0:	018a      	lsls	r2, r1, #6
 80042f2:	4651      	mov	r1, sl
 80042f4:	1a54      	subs	r4, r2, r1
 80042f6:	4659      	mov	r1, fp
 80042f8:	eb63 0501 	sbc.w	r5, r3, r1
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	f04f 0300 	mov.w	r3, #0
 8004304:	00eb      	lsls	r3, r5, #3
 8004306:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800430a:	00e2      	lsls	r2, r4, #3
 800430c:	4614      	mov	r4, r2
 800430e:	461d      	mov	r5, r3
 8004310:	4643      	mov	r3, r8
 8004312:	18e3      	adds	r3, r4, r3
 8004314:	603b      	str	r3, [r7, #0]
 8004316:	464b      	mov	r3, r9
 8004318:	eb45 0303 	adc.w	r3, r5, r3
 800431c:	607b      	str	r3, [r7, #4]
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	f04f 0300 	mov.w	r3, #0
 8004326:	e9d7 4500 	ldrd	r4, r5, [r7]
 800432a:	4629      	mov	r1, r5
 800432c:	028b      	lsls	r3, r1, #10
 800432e:	4621      	mov	r1, r4
 8004330:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004334:	4621      	mov	r1, r4
 8004336:	028a      	lsls	r2, r1, #10
 8004338:	4610      	mov	r0, r2
 800433a:	4619      	mov	r1, r3
 800433c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004340:	2200      	movs	r2, #0
 8004342:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004344:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004346:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800434a:	f7fc fc5f 	bl	8000c0c <__aeabi_uldivmod>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4613      	mov	r3, r2
 8004354:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004358:	4b0d      	ldr	r3, [pc, #52]	@ (8004390 <HAL_RCC_GetSysClockFreq+0x458>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	0f1b      	lsrs	r3, r3, #28
 800435e:	f003 0307 	and.w	r3, r3, #7
 8004362:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004366:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800436a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800436e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004372:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004376:	e003      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004378:	4b06      	ldr	r3, [pc, #24]	@ (8004394 <HAL_RCC_GetSysClockFreq+0x45c>)
 800437a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800437e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004380:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004384:	4618      	mov	r0, r3
 8004386:	37b8      	adds	r7, #184	@ 0xb8
 8004388:	46bd      	mov	sp, r7
 800438a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800438e:	bf00      	nop
 8004390:	40023800 	.word	0x40023800
 8004394:	00f42400 	.word	0x00f42400

08004398 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e28d      	b.n	80048c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 8083 	beq.w	80044be <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80043b8:	4b94      	ldr	r3, [pc, #592]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 030c 	and.w	r3, r3, #12
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	d019      	beq.n	80043f8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80043c4:	4b91      	ldr	r3, [pc, #580]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 030c 	and.w	r3, r3, #12
        || \
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d106      	bne.n	80043de <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80043d0:	4b8e      	ldr	r3, [pc, #568]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043dc:	d00c      	beq.n	80043f8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043de:	4b8b      	ldr	r3, [pc, #556]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80043e6:	2b0c      	cmp	r3, #12
 80043e8:	d112      	bne.n	8004410 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ea:	4b88      	ldr	r3, [pc, #544]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043f6:	d10b      	bne.n	8004410 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f8:	4b84      	ldr	r3, [pc, #528]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d05b      	beq.n	80044bc <HAL_RCC_OscConfig+0x124>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d157      	bne.n	80044bc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e25a      	b.n	80048c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004418:	d106      	bne.n	8004428 <HAL_RCC_OscConfig+0x90>
 800441a:	4b7c      	ldr	r3, [pc, #496]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a7b      	ldr	r2, [pc, #492]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 8004420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	e01d      	b.n	8004464 <HAL_RCC_OscConfig+0xcc>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004430:	d10c      	bne.n	800444c <HAL_RCC_OscConfig+0xb4>
 8004432:	4b76      	ldr	r3, [pc, #472]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a75      	ldr	r2, [pc, #468]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 8004438:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	4b73      	ldr	r3, [pc, #460]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a72      	ldr	r2, [pc, #456]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 8004444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004448:	6013      	str	r3, [r2, #0]
 800444a:	e00b      	b.n	8004464 <HAL_RCC_OscConfig+0xcc>
 800444c:	4b6f      	ldr	r3, [pc, #444]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a6e      	ldr	r2, [pc, #440]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 8004452:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	4b6c      	ldr	r3, [pc, #432]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a6b      	ldr	r2, [pc, #428]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 800445e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d013      	beq.n	8004494 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7ff f87e 	bl	800356c <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004474:	f7ff f87a 	bl	800356c <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b64      	cmp	r3, #100	@ 0x64
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e21f      	b.n	80048c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004486:	4b61      	ldr	r3, [pc, #388]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f0      	beq.n	8004474 <HAL_RCC_OscConfig+0xdc>
 8004492:	e014      	b.n	80044be <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004494:	f7ff f86a 	bl	800356c <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800449c:	f7ff f866 	bl	800356c <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b64      	cmp	r3, #100	@ 0x64
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e20b      	b.n	80048c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ae:	4b57      	ldr	r3, [pc, #348]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f0      	bne.n	800449c <HAL_RCC_OscConfig+0x104>
 80044ba:	e000      	b.n	80044be <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d06f      	beq.n	80045aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80044ca:	4b50      	ldr	r3, [pc, #320]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 030c 	and.w	r3, r3, #12
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d017      	beq.n	8004506 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80044d6:	4b4d      	ldr	r3, [pc, #308]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 030c 	and.w	r3, r3, #12
        || \
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d105      	bne.n	80044ee <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80044e2:	4b4a      	ldr	r3, [pc, #296]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00b      	beq.n	8004506 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ee:	4b47      	ldr	r3, [pc, #284]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80044f6:	2b0c      	cmp	r3, #12
 80044f8:	d11c      	bne.n	8004534 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044fa:	4b44      	ldr	r3, [pc, #272]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d116      	bne.n	8004534 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004506:	4b41      	ldr	r3, [pc, #260]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <HAL_RCC_OscConfig+0x186>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d001      	beq.n	800451e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e1d3      	b.n	80048c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800451e:	4b3b      	ldr	r3, [pc, #236]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	4937      	ldr	r1, [pc, #220]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 800452e:	4313      	orrs	r3, r2
 8004530:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004532:	e03a      	b.n	80045aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d020      	beq.n	800457e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800453c:	4b34      	ldr	r3, [pc, #208]	@ (8004610 <HAL_RCC_OscConfig+0x278>)
 800453e:	2201      	movs	r2, #1
 8004540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004542:	f7ff f813 	bl	800356c <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800454a:	f7ff f80f 	bl	800356c <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e1b4      	b.n	80048c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800455c:	4b2b      	ldr	r3, [pc, #172]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0f0      	beq.n	800454a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004568:	4b28      	ldr	r3, [pc, #160]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	4925      	ldr	r1, [pc, #148]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 8004578:	4313      	orrs	r3, r2
 800457a:	600b      	str	r3, [r1, #0]
 800457c:	e015      	b.n	80045aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800457e:	4b24      	ldr	r3, [pc, #144]	@ (8004610 <HAL_RCC_OscConfig+0x278>)
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7fe fff2 	bl	800356c <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800458c:	f7fe ffee 	bl	800356c <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e193      	b.n	80048c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800459e:	4b1b      	ldr	r3, [pc, #108]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d036      	beq.n	8004624 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d016      	beq.n	80045ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045be:	4b15      	ldr	r3, [pc, #84]	@ (8004614 <HAL_RCC_OscConfig+0x27c>)
 80045c0:	2201      	movs	r2, #1
 80045c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c4:	f7fe ffd2 	bl	800356c <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045cc:	f7fe ffce 	bl	800356c <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e173      	b.n	80048c6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045de:	4b0b      	ldr	r3, [pc, #44]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 80045e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0x234>
 80045ea:	e01b      	b.n	8004624 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ec:	4b09      	ldr	r3, [pc, #36]	@ (8004614 <HAL_RCC_OscConfig+0x27c>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f2:	f7fe ffbb 	bl	800356c <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f8:	e00e      	b.n	8004618 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045fa:	f7fe ffb7 	bl	800356c <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d907      	bls.n	8004618 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e15c      	b.n	80048c6 <HAL_RCC_OscConfig+0x52e>
 800460c:	40023800 	.word	0x40023800
 8004610:	42470000 	.word	0x42470000
 8004614:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004618:	4b8a      	ldr	r3, [pc, #552]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 800461a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1ea      	bne.n	80045fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 8097 	beq.w	8004760 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004632:	2300      	movs	r3, #0
 8004634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004636:	4b83      	ldr	r3, [pc, #524]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 8004638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10f      	bne.n	8004662 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004642:	2300      	movs	r3, #0
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	4b7f      	ldr	r3, [pc, #508]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464a:	4a7e      	ldr	r2, [pc, #504]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 800464c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004650:	6413      	str	r3, [r2, #64]	@ 0x40
 8004652:	4b7c      	ldr	r3, [pc, #496]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 8004654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800465a:	60bb      	str	r3, [r7, #8]
 800465c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800465e:	2301      	movs	r3, #1
 8004660:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004662:	4b79      	ldr	r3, [pc, #484]	@ (8004848 <HAL_RCC_OscConfig+0x4b0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466a:	2b00      	cmp	r3, #0
 800466c:	d118      	bne.n	80046a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800466e:	4b76      	ldr	r3, [pc, #472]	@ (8004848 <HAL_RCC_OscConfig+0x4b0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a75      	ldr	r2, [pc, #468]	@ (8004848 <HAL_RCC_OscConfig+0x4b0>)
 8004674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800467a:	f7fe ff77 	bl	800356c <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004682:	f7fe ff73 	bl	800356c <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e118      	b.n	80048c6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004694:	4b6c      	ldr	r3, [pc, #432]	@ (8004848 <HAL_RCC_OscConfig+0x4b0>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0f0      	beq.n	8004682 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d106      	bne.n	80046b6 <HAL_RCC_OscConfig+0x31e>
 80046a8:	4b66      	ldr	r3, [pc, #408]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 80046aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ac:	4a65      	ldr	r2, [pc, #404]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 80046ae:	f043 0301 	orr.w	r3, r3, #1
 80046b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80046b4:	e01c      	b.n	80046f0 <HAL_RCC_OscConfig+0x358>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	2b05      	cmp	r3, #5
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCC_OscConfig+0x340>
 80046be:	4b61      	ldr	r3, [pc, #388]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c2:	4a60      	ldr	r2, [pc, #384]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 80046c4:	f043 0304 	orr.w	r3, r3, #4
 80046c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80046ca:	4b5e      	ldr	r3, [pc, #376]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 80046cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ce:	4a5d      	ldr	r2, [pc, #372]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 80046d0:	f043 0301 	orr.w	r3, r3, #1
 80046d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80046d6:	e00b      	b.n	80046f0 <HAL_RCC_OscConfig+0x358>
 80046d8:	4b5a      	ldr	r3, [pc, #360]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 80046da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046dc:	4a59      	ldr	r2, [pc, #356]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 80046de:	f023 0301 	bic.w	r3, r3, #1
 80046e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80046e4:	4b57      	ldr	r3, [pc, #348]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 80046e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e8:	4a56      	ldr	r2, [pc, #344]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 80046ea:	f023 0304 	bic.w	r3, r3, #4
 80046ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d015      	beq.n	8004724 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f8:	f7fe ff38 	bl	800356c <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046fe:	e00a      	b.n	8004716 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004700:	f7fe ff34 	bl	800356c <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800470e:	4293      	cmp	r3, r2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e0d7      	b.n	80048c6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004716:	4b4b      	ldr	r3, [pc, #300]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0ee      	beq.n	8004700 <HAL_RCC_OscConfig+0x368>
 8004722:	e014      	b.n	800474e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004724:	f7fe ff22 	bl	800356c <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800472a:	e00a      	b.n	8004742 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800472c:	f7fe ff1e 	bl	800356c <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800473a:	4293      	cmp	r3, r2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e0c1      	b.n	80048c6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004742:	4b40      	ldr	r3, [pc, #256]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1ee      	bne.n	800472c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800474e:	7dfb      	ldrb	r3, [r7, #23]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d105      	bne.n	8004760 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004754:	4b3b      	ldr	r3, [pc, #236]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 8004756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004758:	4a3a      	ldr	r2, [pc, #232]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 800475a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800475e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 80ad 	beq.w	80048c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800476a:	4b36      	ldr	r3, [pc, #216]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 030c 	and.w	r3, r3, #12
 8004772:	2b08      	cmp	r3, #8
 8004774:	d060      	beq.n	8004838 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d145      	bne.n	800480a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800477e:	4b33      	ldr	r3, [pc, #204]	@ (800484c <HAL_RCC_OscConfig+0x4b4>)
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fe fef2 	bl	800356c <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478c:	f7fe feee 	bl	800356c <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e093      	b.n	80048c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479e:	4b29      	ldr	r3, [pc, #164]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69da      	ldr	r2, [r3, #28]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b8:	019b      	lsls	r3, r3, #6
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c0:	085b      	lsrs	r3, r3, #1
 80047c2:	3b01      	subs	r3, #1
 80047c4:	041b      	lsls	r3, r3, #16
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047cc:	061b      	lsls	r3, r3, #24
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d4:	071b      	lsls	r3, r3, #28
 80047d6:	491b      	ldr	r1, [pc, #108]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047dc:	4b1b      	ldr	r3, [pc, #108]	@ (800484c <HAL_RCC_OscConfig+0x4b4>)
 80047de:	2201      	movs	r2, #1
 80047e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e2:	f7fe fec3 	bl	800356c <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ea:	f7fe febf 	bl	800356c <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e064      	b.n	80048c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fc:	4b11      	ldr	r3, [pc, #68]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0f0      	beq.n	80047ea <HAL_RCC_OscConfig+0x452>
 8004808:	e05c      	b.n	80048c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800480a:	4b10      	ldr	r3, [pc, #64]	@ (800484c <HAL_RCC_OscConfig+0x4b4>)
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004810:	f7fe feac 	bl	800356c <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004818:	f7fe fea8 	bl	800356c <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e04d      	b.n	80048c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482a:	4b06      	ldr	r3, [pc, #24]	@ (8004844 <HAL_RCC_OscConfig+0x4ac>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1f0      	bne.n	8004818 <HAL_RCC_OscConfig+0x480>
 8004836:	e045      	b.n	80048c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d107      	bne.n	8004850 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e040      	b.n	80048c6 <HAL_RCC_OscConfig+0x52e>
 8004844:	40023800 	.word	0x40023800
 8004848:	40007000 	.word	0x40007000
 800484c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004850:	4b1f      	ldr	r3, [pc, #124]	@ (80048d0 <HAL_RCC_OscConfig+0x538>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d030      	beq.n	80048c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004868:	429a      	cmp	r2, r3
 800486a:	d129      	bne.n	80048c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004876:	429a      	cmp	r2, r3
 8004878:	d122      	bne.n	80048c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004880:	4013      	ands	r3, r2
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004886:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004888:	4293      	cmp	r3, r2
 800488a:	d119      	bne.n	80048c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004896:	085b      	lsrs	r3, r3, #1
 8004898:	3b01      	subs	r3, #1
 800489a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800489c:	429a      	cmp	r2, r3
 800489e:	d10f      	bne.n	80048c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d107      	bne.n	80048c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048bc:	429a      	cmp	r2, r3
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e000      	b.n	80048c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40023800 	.word	0x40023800

080048d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e042      	b.n	800496c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7fe fc08 	bl	8003110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2224      	movs	r2, #36	@ 0x24
 8004904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004916:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fdbd 	bl	8005498 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800492c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695a      	ldr	r2, [r3, #20]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800493c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800494c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08a      	sub	sp, #40	@ 0x28
 8004978:	af02      	add	r7, sp, #8
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	603b      	str	r3, [r7, #0]
 8004980:	4613      	mov	r3, r2
 8004982:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b20      	cmp	r3, #32
 8004992:	d175      	bne.n	8004a80 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <HAL_UART_Transmit+0x2c>
 800499a:	88fb      	ldrh	r3, [r7, #6]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e06e      	b.n	8004a82 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2221      	movs	r2, #33	@ 0x21
 80049ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049b2:	f7fe fddb 	bl	800356c <HAL_GetTick>
 80049b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	88fa      	ldrh	r2, [r7, #6]
 80049bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	88fa      	ldrh	r2, [r7, #6]
 80049c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049cc:	d108      	bne.n	80049e0 <HAL_UART_Transmit+0x6c>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d104      	bne.n	80049e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049d6:	2300      	movs	r3, #0
 80049d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	61bb      	str	r3, [r7, #24]
 80049de:	e003      	b.n	80049e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049e8:	e02e      	b.n	8004a48 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2200      	movs	r2, #0
 80049f2:	2180      	movs	r1, #128	@ 0x80
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 fb1f 	bl	8005038 <UART_WaitOnFlagUntilTimeout>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e03a      	b.n	8004a82 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10b      	bne.n	8004a2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	3302      	adds	r3, #2
 8004a26:	61bb      	str	r3, [r7, #24]
 8004a28:	e007      	b.n	8004a3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	781a      	ldrb	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	3301      	adds	r3, #1
 8004a38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	3b01      	subs	r3, #1
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1cb      	bne.n	80049ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2140      	movs	r1, #64	@ 0x40
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 faeb 	bl	8005038 <UART_WaitOnFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e006      	b.n	8004a82 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	e000      	b.n	8004a82 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a80:	2302      	movs	r3, #2
  }
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3720      	adds	r7, #32
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b084      	sub	sp, #16
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	4613      	mov	r3, r2
 8004a96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d112      	bne.n	8004aca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <HAL_UART_Receive_IT+0x26>
 8004aaa:	88fb      	ldrh	r3, [r7, #6]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e00b      	b.n	8004acc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	461a      	mov	r2, r3
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fb12 	bl	80050ea <UART_Start_Receive_IT>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	e000      	b.n	8004acc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004aca:	2302      	movs	r3, #2
  }
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b0ba      	sub	sp, #232	@ 0xe8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004b12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10f      	bne.n	8004b3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d009      	beq.n	8004b3a <HAL_UART_IRQHandler+0x66>
 8004b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b2a:	f003 0320 	and.w	r3, r3, #32
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fbf2 	bl	800531c <UART_Receive_IT>
      return;
 8004b38:	e25b      	b.n	8004ff2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 80de 	beq.w	8004d00 <HAL_UART_IRQHandler+0x22c>
 8004b44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d106      	bne.n	8004b5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b54:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 80d1 	beq.w	8004d00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00b      	beq.n	8004b82 <HAL_UART_IRQHandler+0xae>
 8004b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b7a:	f043 0201 	orr.w	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00b      	beq.n	8004ba6 <HAL_UART_IRQHandler+0xd2>
 8004b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9e:	f043 0202 	orr.w	r2, r3, #2
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00b      	beq.n	8004bca <HAL_UART_IRQHandler+0xf6>
 8004bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d005      	beq.n	8004bca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc2:	f043 0204 	orr.w	r2, r3, #4
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d011      	beq.n	8004bfa <HAL_UART_IRQHandler+0x126>
 8004bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d105      	bne.n	8004bee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004be2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d005      	beq.n	8004bfa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf2:	f043 0208 	orr.w	r2, r3, #8
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 81f2 	beq.w	8004fe8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c08:	f003 0320 	and.w	r3, r3, #32
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <HAL_UART_IRQHandler+0x14e>
 8004c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fb7d 	bl	800531c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2c:	2b40      	cmp	r3, #64	@ 0x40
 8004c2e:	bf0c      	ite	eq
 8004c30:	2301      	moveq	r3, #1
 8004c32:	2300      	movne	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d103      	bne.n	8004c4e <HAL_UART_IRQHandler+0x17a>
 8004c46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d04f      	beq.n	8004cee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fa85 	bl	800515e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c5e:	2b40      	cmp	r3, #64	@ 0x40
 8004c60:	d141      	bne.n	8004ce6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3314      	adds	r3, #20
 8004c68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c70:	e853 3f00 	ldrex	r3, [r3]
 8004c74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3314      	adds	r3, #20
 8004c8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c9e:	e841 2300 	strex	r3, r2, [r1]
 8004ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004ca6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1d9      	bne.n	8004c62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d013      	beq.n	8004cde <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cba:	4a7e      	ldr	r2, [pc, #504]	@ (8004eb4 <HAL_UART_IRQHandler+0x3e0>)
 8004cbc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fe fe03 	bl	80038ce <HAL_DMA_Abort_IT>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d016      	beq.n	8004cfc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004cd8:	4610      	mov	r0, r2
 8004cda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cdc:	e00e      	b.n	8004cfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f994 	bl	800500c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce4:	e00a      	b.n	8004cfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f990 	bl	800500c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cec:	e006      	b.n	8004cfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f98c 	bl	800500c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004cfa:	e175      	b.n	8004fe8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cfc:	bf00      	nop
    return;
 8004cfe:	e173      	b.n	8004fe8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	f040 814f 	bne.w	8004fa8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 8148 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8141 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d26:	2300      	movs	r3, #0
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	60bb      	str	r3, [r7, #8]
 8004d3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d46:	2b40      	cmp	r3, #64	@ 0x40
 8004d48:	f040 80b6 	bne.w	8004eb8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 8145 	beq.w	8004fec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	f080 813e 	bcs.w	8004fec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d76:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d82:	f000 8088 	beq.w	8004e96 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	330c      	adds	r3, #12
 8004d8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d94:	e853 3f00 	ldrex	r3, [r3]
 8004d98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004da0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004da4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	330c      	adds	r3, #12
 8004dae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004db2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004db6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004dbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004dc2:	e841 2300 	strex	r3, r2, [r1]
 8004dc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1d9      	bne.n	8004d86 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3314      	adds	r3, #20
 8004dd8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ddc:	e853 3f00 	ldrex	r3, [r3]
 8004de0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004de2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004de4:	f023 0301 	bic.w	r3, r3, #1
 8004de8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3314      	adds	r3, #20
 8004df2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004df6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004dfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004dfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004e08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1e1      	bne.n	8004dd2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3314      	adds	r3, #20
 8004e14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e18:	e853 3f00 	ldrex	r3, [r3]
 8004e1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004e1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3314      	adds	r3, #20
 8004e2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004e32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004e38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e3a:	e841 2300 	strex	r3, r2, [r1]
 8004e3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004e40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e3      	bne.n	8004e0e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	330c      	adds	r3, #12
 8004e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e5e:	e853 3f00 	ldrex	r3, [r3]
 8004e62:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e66:	f023 0310 	bic.w	r3, r3, #16
 8004e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	330c      	adds	r3, #12
 8004e74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004e78:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e7a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e80:	e841 2300 	strex	r3, r2, [r1]
 8004e84:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e3      	bne.n	8004e54 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fe fcac 	bl	80037ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	4619      	mov	r1, r3
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f8b7 	bl	8005020 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004eb2:	e09b      	b.n	8004fec <HAL_UART_IRQHandler+0x518>
 8004eb4:	08005225 	.word	0x08005225
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 808e 	beq.w	8004ff0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ed4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 8089 	beq.w	8004ff0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	330c      	adds	r3, #12
 8004ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee8:	e853 3f00 	ldrex	r3, [r3]
 8004eec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ef4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	330c      	adds	r3, #12
 8004efe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004f02:	647a      	str	r2, [r7, #68]	@ 0x44
 8004f04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1e3      	bne.n	8004ede <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3314      	adds	r3, #20
 8004f1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f20:	e853 3f00 	ldrex	r3, [r3]
 8004f24:	623b      	str	r3, [r7, #32]
   return(result);
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	f023 0301 	bic.w	r3, r3, #1
 8004f2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	3314      	adds	r3, #20
 8004f36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004f3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f42:	e841 2300 	strex	r3, r2, [r1]
 8004f46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1e3      	bne.n	8004f16 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	330c      	adds	r3, #12
 8004f62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0310 	bic.w	r3, r3, #16
 8004f72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	330c      	adds	r3, #12
 8004f7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004f80:	61fa      	str	r2, [r7, #28]
 8004f82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	69b9      	ldr	r1, [r7, #24]
 8004f86:	69fa      	ldr	r2, [r7, #28]
 8004f88:	e841 2300 	strex	r3, r2, [r1]
 8004f8c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e3      	bne.n	8004f5c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f83d 	bl	8005020 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fa6:	e023      	b.n	8004ff0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d009      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x4f4>
 8004fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f943 	bl	800524c <UART_Transmit_IT>
    return;
 8004fc6:	e014      	b.n	8004ff2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00e      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x51e>
 8004fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d008      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f983 	bl	80052ec <UART_EndTransmit_IT>
    return;
 8004fe6:	e004      	b.n	8004ff2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004fe8:	bf00      	nop
 8004fea:	e002      	b.n	8004ff2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004fec:	bf00      	nop
 8004fee:	e000      	b.n	8004ff2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ff0:	bf00      	nop
  }
}
 8004ff2:	37e8      	adds	r7, #232	@ 0xe8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	603b      	str	r3, [r7, #0]
 8005044:	4613      	mov	r3, r2
 8005046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005048:	e03b      	b.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005050:	d037      	beq.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005052:	f7fe fa8b 	bl	800356c <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	6a3a      	ldr	r2, [r7, #32]
 800505e:	429a      	cmp	r2, r3
 8005060:	d302      	bcc.n	8005068 <UART_WaitOnFlagUntilTimeout+0x30>
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e03a      	b.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f003 0304 	and.w	r3, r3, #4
 8005076:	2b00      	cmp	r3, #0
 8005078:	d023      	beq.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2b80      	cmp	r3, #128	@ 0x80
 800507e:	d020      	beq.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2b40      	cmp	r3, #64	@ 0x40
 8005084:	d01d      	beq.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b08      	cmp	r3, #8
 8005092:	d116      	bne.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005094:	2300      	movs	r3, #0
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	617b      	str	r3, [r7, #20]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	617b      	str	r3, [r7, #20]
 80050a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 f857 	bl	800515e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2208      	movs	r2, #8
 80050b4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e00f      	b.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4013      	ands	r3, r2
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	bf0c      	ite	eq
 80050d2:	2301      	moveq	r3, #1
 80050d4:	2300      	movne	r3, #0
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d0b4      	beq.n	800504a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3718      	adds	r7, #24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	60b9      	str	r1, [r7, #8]
 80050f4:	4613      	mov	r3, r2
 80050f6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	88fa      	ldrh	r2, [r7, #6]
 8005102:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	88fa      	ldrh	r2, [r7, #6]
 8005108:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2222      	movs	r2, #34	@ 0x22
 8005114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d007      	beq.n	8005130 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800512e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695a      	ldr	r2, [r3, #20]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0220 	orr.w	r2, r2, #32
 800514e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800515e:	b480      	push	{r7}
 8005160:	b095      	sub	sp, #84	@ 0x54
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	330c      	adds	r3, #12
 800516c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005170:	e853 3f00 	ldrex	r3, [r3]
 8005174:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005178:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800517c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	330c      	adds	r3, #12
 8005184:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005186:	643a      	str	r2, [r7, #64]	@ 0x40
 8005188:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800518c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800518e:	e841 2300 	strex	r3, r2, [r1]
 8005192:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1e5      	bne.n	8005166 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3314      	adds	r3, #20
 80051a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	e853 3f00 	ldrex	r3, [r3]
 80051a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	f023 0301 	bic.w	r3, r3, #1
 80051b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3314      	adds	r3, #20
 80051b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051c2:	e841 2300 	strex	r3, r2, [r1]
 80051c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1e5      	bne.n	800519a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d119      	bne.n	800520a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	330c      	adds	r3, #12
 80051dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f023 0310 	bic.w	r3, r3, #16
 80051ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	330c      	adds	r3, #12
 80051f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051f6:	61ba      	str	r2, [r7, #24]
 80051f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	6979      	ldr	r1, [r7, #20]
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	613b      	str	r3, [r7, #16]
   return(result);
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e5      	bne.n	80051d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2220      	movs	r2, #32
 800520e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005218:	bf00      	nop
 800521a:	3754      	adds	r7, #84	@ 0x54
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005230:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f7ff fee4 	bl	800500c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005244:	bf00      	nop
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b21      	cmp	r3, #33	@ 0x21
 800525e:	d13e      	bne.n	80052de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005268:	d114      	bne.n	8005294 <UART_Transmit_IT+0x48>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d110      	bne.n	8005294 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	461a      	mov	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005286:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	1c9a      	adds	r2, r3, #2
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	621a      	str	r2, [r3, #32]
 8005292:	e008      	b.n	80052a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	1c59      	adds	r1, r3, #1
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6211      	str	r1, [r2, #32]
 800529e:	781a      	ldrb	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	4619      	mov	r1, r3
 80052b4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10f      	bne.n	80052da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68da      	ldr	r2, [r3, #12]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68da      	ldr	r2, [r3, #12]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	e000      	b.n	80052e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80052de:	2302      	movs	r3, #2
  }
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005302:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7ff fe73 	bl	8004ff8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08c      	sub	sp, #48	@ 0x30
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b22      	cmp	r3, #34	@ 0x22
 800532e:	f040 80ae 	bne.w	800548e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800533a:	d117      	bne.n	800536c <UART_Receive_IT+0x50>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d113      	bne.n	800536c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005344:	2300      	movs	r3, #0
 8005346:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	b29b      	uxth	r3, r3
 8005356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800535a:	b29a      	uxth	r2, r3
 800535c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005364:	1c9a      	adds	r2, r3, #2
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	629a      	str	r2, [r3, #40]	@ 0x28
 800536a:	e026      	b.n	80053ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005370:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005372:	2300      	movs	r3, #0
 8005374:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800537e:	d007      	beq.n	8005390 <UART_Receive_IT+0x74>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10a      	bne.n	800539e <UART_Receive_IT+0x82>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d106      	bne.n	800539e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	b2da      	uxtb	r2, r3
 8005398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	e008      	b.n	80053b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053be:	b29b      	uxth	r3, r3
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	4619      	mov	r1, r3
 80053c8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d15d      	bne.n	800548a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0220 	bic.w	r2, r2, #32
 80053dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695a      	ldr	r2, [r3, #20]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0201 	bic.w	r2, r2, #1
 80053fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2220      	movs	r2, #32
 8005402:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005410:	2b01      	cmp	r3, #1
 8005412:	d135      	bne.n	8005480 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	330c      	adds	r3, #12
 8005420:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	e853 3f00 	ldrex	r3, [r3]
 8005428:	613b      	str	r3, [r7, #16]
   return(result);
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f023 0310 	bic.w	r3, r3, #16
 8005430:	627b      	str	r3, [r7, #36]	@ 0x24
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	330c      	adds	r3, #12
 8005438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800543a:	623a      	str	r2, [r7, #32]
 800543c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543e:	69f9      	ldr	r1, [r7, #28]
 8005440:	6a3a      	ldr	r2, [r7, #32]
 8005442:	e841 2300 	strex	r3, r2, [r1]
 8005446:	61bb      	str	r3, [r7, #24]
   return(result);
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1e5      	bne.n	800541a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0310 	and.w	r3, r3, #16
 8005458:	2b10      	cmp	r3, #16
 800545a:	d10a      	bne.n	8005472 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800545c:	2300      	movs	r3, #0
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005476:	4619      	mov	r1, r3
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7ff fdd1 	bl	8005020 <HAL_UARTEx_RxEventCallback>
 800547e:	e002      	b.n	8005486 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7fb fe3b 	bl	80010fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	e002      	b.n	8005490 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	e000      	b.n	8005490 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800548e:	2302      	movs	r3, #2
  }
}
 8005490:	4618      	mov	r0, r3
 8005492:	3730      	adds	r7, #48	@ 0x30
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800549c:	b0c0      	sub	sp, #256	@ 0x100
 800549e:	af00      	add	r7, sp, #0
 80054a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b4:	68d9      	ldr	r1, [r3, #12]
 80054b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	ea40 0301 	orr.w	r3, r0, r1
 80054c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	431a      	orrs	r2, r3
 80054d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	431a      	orrs	r2, r3
 80054d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	4313      	orrs	r3, r2
 80054e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80054f0:	f021 010c 	bic.w	r1, r1, #12
 80054f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054fe:	430b      	orrs	r3, r1
 8005500:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800550e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005512:	6999      	ldr	r1, [r3, #24]
 8005514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	ea40 0301 	orr.w	r3, r0, r1
 800551e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	4b8f      	ldr	r3, [pc, #572]	@ (8005764 <UART_SetConfig+0x2cc>)
 8005528:	429a      	cmp	r2, r3
 800552a:	d005      	beq.n	8005538 <UART_SetConfig+0xa0>
 800552c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	4b8d      	ldr	r3, [pc, #564]	@ (8005768 <UART_SetConfig+0x2d0>)
 8005534:	429a      	cmp	r2, r3
 8005536:	d104      	bne.n	8005542 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005538:	f7fe fcea 	bl	8003f10 <HAL_RCC_GetPCLK2Freq>
 800553c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005540:	e003      	b.n	800554a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005542:	f7fe fcd1 	bl	8003ee8 <HAL_RCC_GetPCLK1Freq>
 8005546:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800554a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005554:	f040 810c 	bne.w	8005770 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005558:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800555c:	2200      	movs	r2, #0
 800555e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005562:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005566:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800556a:	4622      	mov	r2, r4
 800556c:	462b      	mov	r3, r5
 800556e:	1891      	adds	r1, r2, r2
 8005570:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005572:	415b      	adcs	r3, r3
 8005574:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005576:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800557a:	4621      	mov	r1, r4
 800557c:	eb12 0801 	adds.w	r8, r2, r1
 8005580:	4629      	mov	r1, r5
 8005582:	eb43 0901 	adc.w	r9, r3, r1
 8005586:	f04f 0200 	mov.w	r2, #0
 800558a:	f04f 0300 	mov.w	r3, #0
 800558e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800559a:	4690      	mov	r8, r2
 800559c:	4699      	mov	r9, r3
 800559e:	4623      	mov	r3, r4
 80055a0:	eb18 0303 	adds.w	r3, r8, r3
 80055a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80055a8:	462b      	mov	r3, r5
 80055aa:	eb49 0303 	adc.w	r3, r9, r3
 80055ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80055b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80055be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80055c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80055c6:	460b      	mov	r3, r1
 80055c8:	18db      	adds	r3, r3, r3
 80055ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80055cc:	4613      	mov	r3, r2
 80055ce:	eb42 0303 	adc.w	r3, r2, r3
 80055d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80055d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80055d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80055dc:	f7fb fb16 	bl	8000c0c <__aeabi_uldivmod>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4b61      	ldr	r3, [pc, #388]	@ (800576c <UART_SetConfig+0x2d4>)
 80055e6:	fba3 2302 	umull	r2, r3, r3, r2
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	011c      	lsls	r4, r3, #4
 80055ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055f2:	2200      	movs	r2, #0
 80055f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80055fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005600:	4642      	mov	r2, r8
 8005602:	464b      	mov	r3, r9
 8005604:	1891      	adds	r1, r2, r2
 8005606:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005608:	415b      	adcs	r3, r3
 800560a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800560c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005610:	4641      	mov	r1, r8
 8005612:	eb12 0a01 	adds.w	sl, r2, r1
 8005616:	4649      	mov	r1, r9
 8005618:	eb43 0b01 	adc.w	fp, r3, r1
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005628:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800562c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005630:	4692      	mov	sl, r2
 8005632:	469b      	mov	fp, r3
 8005634:	4643      	mov	r3, r8
 8005636:	eb1a 0303 	adds.w	r3, sl, r3
 800563a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800563e:	464b      	mov	r3, r9
 8005640:	eb4b 0303 	adc.w	r3, fp, r3
 8005644:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005654:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005658:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800565c:	460b      	mov	r3, r1
 800565e:	18db      	adds	r3, r3, r3
 8005660:	643b      	str	r3, [r7, #64]	@ 0x40
 8005662:	4613      	mov	r3, r2
 8005664:	eb42 0303 	adc.w	r3, r2, r3
 8005668:	647b      	str	r3, [r7, #68]	@ 0x44
 800566a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800566e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005672:	f7fb facb 	bl	8000c0c <__aeabi_uldivmod>
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	4611      	mov	r1, r2
 800567c:	4b3b      	ldr	r3, [pc, #236]	@ (800576c <UART_SetConfig+0x2d4>)
 800567e:	fba3 2301 	umull	r2, r3, r3, r1
 8005682:	095b      	lsrs	r3, r3, #5
 8005684:	2264      	movs	r2, #100	@ 0x64
 8005686:	fb02 f303 	mul.w	r3, r2, r3
 800568a:	1acb      	subs	r3, r1, r3
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005692:	4b36      	ldr	r3, [pc, #216]	@ (800576c <UART_SetConfig+0x2d4>)
 8005694:	fba3 2302 	umull	r2, r3, r3, r2
 8005698:	095b      	lsrs	r3, r3, #5
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80056a0:	441c      	add	r4, r3
 80056a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80056b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80056b4:	4642      	mov	r2, r8
 80056b6:	464b      	mov	r3, r9
 80056b8:	1891      	adds	r1, r2, r2
 80056ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80056bc:	415b      	adcs	r3, r3
 80056be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80056c4:	4641      	mov	r1, r8
 80056c6:	1851      	adds	r1, r2, r1
 80056c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80056ca:	4649      	mov	r1, r9
 80056cc:	414b      	adcs	r3, r1
 80056ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80056d0:	f04f 0200 	mov.w	r2, #0
 80056d4:	f04f 0300 	mov.w	r3, #0
 80056d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80056dc:	4659      	mov	r1, fp
 80056de:	00cb      	lsls	r3, r1, #3
 80056e0:	4651      	mov	r1, sl
 80056e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056e6:	4651      	mov	r1, sl
 80056e8:	00ca      	lsls	r2, r1, #3
 80056ea:	4610      	mov	r0, r2
 80056ec:	4619      	mov	r1, r3
 80056ee:	4603      	mov	r3, r0
 80056f0:	4642      	mov	r2, r8
 80056f2:	189b      	adds	r3, r3, r2
 80056f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056f8:	464b      	mov	r3, r9
 80056fa:	460a      	mov	r2, r1
 80056fc:	eb42 0303 	adc.w	r3, r2, r3
 8005700:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005710:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005714:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005718:	460b      	mov	r3, r1
 800571a:	18db      	adds	r3, r3, r3
 800571c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800571e:	4613      	mov	r3, r2
 8005720:	eb42 0303 	adc.w	r3, r2, r3
 8005724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005726:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800572a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800572e:	f7fb fa6d 	bl	8000c0c <__aeabi_uldivmod>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4b0d      	ldr	r3, [pc, #52]	@ (800576c <UART_SetConfig+0x2d4>)
 8005738:	fba3 1302 	umull	r1, r3, r3, r2
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	2164      	movs	r1, #100	@ 0x64
 8005740:	fb01 f303 	mul.w	r3, r1, r3
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	3332      	adds	r3, #50	@ 0x32
 800574a:	4a08      	ldr	r2, [pc, #32]	@ (800576c <UART_SetConfig+0x2d4>)
 800574c:	fba2 2303 	umull	r2, r3, r2, r3
 8005750:	095b      	lsrs	r3, r3, #5
 8005752:	f003 0207 	and.w	r2, r3, #7
 8005756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4422      	add	r2, r4
 800575e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005760:	e106      	b.n	8005970 <UART_SetConfig+0x4d8>
 8005762:	bf00      	nop
 8005764:	40011000 	.word	0x40011000
 8005768:	40011400 	.word	0x40011400
 800576c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005774:	2200      	movs	r2, #0
 8005776:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800577a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800577e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005782:	4642      	mov	r2, r8
 8005784:	464b      	mov	r3, r9
 8005786:	1891      	adds	r1, r2, r2
 8005788:	6239      	str	r1, [r7, #32]
 800578a:	415b      	adcs	r3, r3
 800578c:	627b      	str	r3, [r7, #36]	@ 0x24
 800578e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005792:	4641      	mov	r1, r8
 8005794:	1854      	adds	r4, r2, r1
 8005796:	4649      	mov	r1, r9
 8005798:	eb43 0501 	adc.w	r5, r3, r1
 800579c:	f04f 0200 	mov.w	r2, #0
 80057a0:	f04f 0300 	mov.w	r3, #0
 80057a4:	00eb      	lsls	r3, r5, #3
 80057a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057aa:	00e2      	lsls	r2, r4, #3
 80057ac:	4614      	mov	r4, r2
 80057ae:	461d      	mov	r5, r3
 80057b0:	4643      	mov	r3, r8
 80057b2:	18e3      	adds	r3, r4, r3
 80057b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80057b8:	464b      	mov	r3, r9
 80057ba:	eb45 0303 	adc.w	r3, r5, r3
 80057be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80057c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80057ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057d2:	f04f 0200 	mov.w	r2, #0
 80057d6:	f04f 0300 	mov.w	r3, #0
 80057da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80057de:	4629      	mov	r1, r5
 80057e0:	008b      	lsls	r3, r1, #2
 80057e2:	4621      	mov	r1, r4
 80057e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057e8:	4621      	mov	r1, r4
 80057ea:	008a      	lsls	r2, r1, #2
 80057ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80057f0:	f7fb fa0c 	bl	8000c0c <__aeabi_uldivmod>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	4b60      	ldr	r3, [pc, #384]	@ (800597c <UART_SetConfig+0x4e4>)
 80057fa:	fba3 2302 	umull	r2, r3, r3, r2
 80057fe:	095b      	lsrs	r3, r3, #5
 8005800:	011c      	lsls	r4, r3, #4
 8005802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005806:	2200      	movs	r2, #0
 8005808:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800580c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005810:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005814:	4642      	mov	r2, r8
 8005816:	464b      	mov	r3, r9
 8005818:	1891      	adds	r1, r2, r2
 800581a:	61b9      	str	r1, [r7, #24]
 800581c:	415b      	adcs	r3, r3
 800581e:	61fb      	str	r3, [r7, #28]
 8005820:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005824:	4641      	mov	r1, r8
 8005826:	1851      	adds	r1, r2, r1
 8005828:	6139      	str	r1, [r7, #16]
 800582a:	4649      	mov	r1, r9
 800582c:	414b      	adcs	r3, r1
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	f04f 0200 	mov.w	r2, #0
 8005834:	f04f 0300 	mov.w	r3, #0
 8005838:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800583c:	4659      	mov	r1, fp
 800583e:	00cb      	lsls	r3, r1, #3
 8005840:	4651      	mov	r1, sl
 8005842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005846:	4651      	mov	r1, sl
 8005848:	00ca      	lsls	r2, r1, #3
 800584a:	4610      	mov	r0, r2
 800584c:	4619      	mov	r1, r3
 800584e:	4603      	mov	r3, r0
 8005850:	4642      	mov	r2, r8
 8005852:	189b      	adds	r3, r3, r2
 8005854:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005858:	464b      	mov	r3, r9
 800585a:	460a      	mov	r2, r1
 800585c:	eb42 0303 	adc.w	r3, r2, r3
 8005860:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800586e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005870:	f04f 0200 	mov.w	r2, #0
 8005874:	f04f 0300 	mov.w	r3, #0
 8005878:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800587c:	4649      	mov	r1, r9
 800587e:	008b      	lsls	r3, r1, #2
 8005880:	4641      	mov	r1, r8
 8005882:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005886:	4641      	mov	r1, r8
 8005888:	008a      	lsls	r2, r1, #2
 800588a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800588e:	f7fb f9bd 	bl	8000c0c <__aeabi_uldivmod>
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	4611      	mov	r1, r2
 8005898:	4b38      	ldr	r3, [pc, #224]	@ (800597c <UART_SetConfig+0x4e4>)
 800589a:	fba3 2301 	umull	r2, r3, r3, r1
 800589e:	095b      	lsrs	r3, r3, #5
 80058a0:	2264      	movs	r2, #100	@ 0x64
 80058a2:	fb02 f303 	mul.w	r3, r2, r3
 80058a6:	1acb      	subs	r3, r1, r3
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	3332      	adds	r3, #50	@ 0x32
 80058ac:	4a33      	ldr	r2, [pc, #204]	@ (800597c <UART_SetConfig+0x4e4>)
 80058ae:	fba2 2303 	umull	r2, r3, r2, r3
 80058b2:	095b      	lsrs	r3, r3, #5
 80058b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058b8:	441c      	add	r4, r3
 80058ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058be:	2200      	movs	r2, #0
 80058c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80058c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80058c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80058c8:	4642      	mov	r2, r8
 80058ca:	464b      	mov	r3, r9
 80058cc:	1891      	adds	r1, r2, r2
 80058ce:	60b9      	str	r1, [r7, #8]
 80058d0:	415b      	adcs	r3, r3
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058d8:	4641      	mov	r1, r8
 80058da:	1851      	adds	r1, r2, r1
 80058dc:	6039      	str	r1, [r7, #0]
 80058de:	4649      	mov	r1, r9
 80058e0:	414b      	adcs	r3, r1
 80058e2:	607b      	str	r3, [r7, #4]
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058f0:	4659      	mov	r1, fp
 80058f2:	00cb      	lsls	r3, r1, #3
 80058f4:	4651      	mov	r1, sl
 80058f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058fa:	4651      	mov	r1, sl
 80058fc:	00ca      	lsls	r2, r1, #3
 80058fe:	4610      	mov	r0, r2
 8005900:	4619      	mov	r1, r3
 8005902:	4603      	mov	r3, r0
 8005904:	4642      	mov	r2, r8
 8005906:	189b      	adds	r3, r3, r2
 8005908:	66bb      	str	r3, [r7, #104]	@ 0x68
 800590a:	464b      	mov	r3, r9
 800590c:	460a      	mov	r2, r1
 800590e:	eb42 0303 	adc.w	r3, r2, r3
 8005912:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	663b      	str	r3, [r7, #96]	@ 0x60
 800591e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005920:	f04f 0200 	mov.w	r2, #0
 8005924:	f04f 0300 	mov.w	r3, #0
 8005928:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800592c:	4649      	mov	r1, r9
 800592e:	008b      	lsls	r3, r1, #2
 8005930:	4641      	mov	r1, r8
 8005932:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005936:	4641      	mov	r1, r8
 8005938:	008a      	lsls	r2, r1, #2
 800593a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800593e:	f7fb f965 	bl	8000c0c <__aeabi_uldivmod>
 8005942:	4602      	mov	r2, r0
 8005944:	460b      	mov	r3, r1
 8005946:	4b0d      	ldr	r3, [pc, #52]	@ (800597c <UART_SetConfig+0x4e4>)
 8005948:	fba3 1302 	umull	r1, r3, r3, r2
 800594c:	095b      	lsrs	r3, r3, #5
 800594e:	2164      	movs	r1, #100	@ 0x64
 8005950:	fb01 f303 	mul.w	r3, r1, r3
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	011b      	lsls	r3, r3, #4
 8005958:	3332      	adds	r3, #50	@ 0x32
 800595a:	4a08      	ldr	r2, [pc, #32]	@ (800597c <UART_SetConfig+0x4e4>)
 800595c:	fba2 2303 	umull	r2, r3, r2, r3
 8005960:	095b      	lsrs	r3, r3, #5
 8005962:	f003 020f 	and.w	r2, r3, #15
 8005966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4422      	add	r2, r4
 800596e:	609a      	str	r2, [r3, #8]
}
 8005970:	bf00      	nop
 8005972:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005976:	46bd      	mov	sp, r7
 8005978:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800597c:	51eb851f 	.word	0x51eb851f

08005980 <atof>:
 8005980:	2100      	movs	r1, #0
 8005982:	f000 be05 	b.w	8006590 <strtod>

08005986 <sulp>:
 8005986:	b570      	push	{r4, r5, r6, lr}
 8005988:	4604      	mov	r4, r0
 800598a:	460d      	mov	r5, r1
 800598c:	ec45 4b10 	vmov	d0, r4, r5
 8005990:	4616      	mov	r6, r2
 8005992:	f001 fff7 	bl	8007984 <__ulp>
 8005996:	ec51 0b10 	vmov	r0, r1, d0
 800599a:	b17e      	cbz	r6, 80059bc <sulp+0x36>
 800599c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80059a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	dd09      	ble.n	80059bc <sulp+0x36>
 80059a8:	051b      	lsls	r3, r3, #20
 80059aa:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80059ae:	2400      	movs	r4, #0
 80059b0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80059b4:	4622      	mov	r2, r4
 80059b6:	462b      	mov	r3, r5
 80059b8:	f7fa fe46 	bl	8000648 <__aeabi_dmul>
 80059bc:	ec41 0b10 	vmov	d0, r0, r1
 80059c0:	bd70      	pop	{r4, r5, r6, pc}
 80059c2:	0000      	movs	r0, r0
 80059c4:	0000      	movs	r0, r0
	...

080059c8 <_strtod_l>:
 80059c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059cc:	b09f      	sub	sp, #124	@ 0x7c
 80059ce:	460c      	mov	r4, r1
 80059d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80059d2:	2200      	movs	r2, #0
 80059d4:	921a      	str	r2, [sp, #104]	@ 0x68
 80059d6:	9005      	str	r0, [sp, #20]
 80059d8:	f04f 0a00 	mov.w	sl, #0
 80059dc:	f04f 0b00 	mov.w	fp, #0
 80059e0:	460a      	mov	r2, r1
 80059e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80059e4:	7811      	ldrb	r1, [r2, #0]
 80059e6:	292b      	cmp	r1, #43	@ 0x2b
 80059e8:	d04a      	beq.n	8005a80 <_strtod_l+0xb8>
 80059ea:	d838      	bhi.n	8005a5e <_strtod_l+0x96>
 80059ec:	290d      	cmp	r1, #13
 80059ee:	d832      	bhi.n	8005a56 <_strtod_l+0x8e>
 80059f0:	2908      	cmp	r1, #8
 80059f2:	d832      	bhi.n	8005a5a <_strtod_l+0x92>
 80059f4:	2900      	cmp	r1, #0
 80059f6:	d03b      	beq.n	8005a70 <_strtod_l+0xa8>
 80059f8:	2200      	movs	r2, #0
 80059fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80059fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80059fe:	782a      	ldrb	r2, [r5, #0]
 8005a00:	2a30      	cmp	r2, #48	@ 0x30
 8005a02:	f040 80b3 	bne.w	8005b6c <_strtod_l+0x1a4>
 8005a06:	786a      	ldrb	r2, [r5, #1]
 8005a08:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005a0c:	2a58      	cmp	r2, #88	@ 0x58
 8005a0e:	d16e      	bne.n	8005aee <_strtod_l+0x126>
 8005a10:	9302      	str	r3, [sp, #8]
 8005a12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a14:	9301      	str	r3, [sp, #4]
 8005a16:	ab1a      	add	r3, sp, #104	@ 0x68
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	4a8e      	ldr	r2, [pc, #568]	@ (8005c54 <_strtod_l+0x28c>)
 8005a1c:	9805      	ldr	r0, [sp, #20]
 8005a1e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005a20:	a919      	add	r1, sp, #100	@ 0x64
 8005a22:	f001 f8a1 	bl	8006b68 <__gethex>
 8005a26:	f010 060f 	ands.w	r6, r0, #15
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	d005      	beq.n	8005a3a <_strtod_l+0x72>
 8005a2e:	2e06      	cmp	r6, #6
 8005a30:	d128      	bne.n	8005a84 <_strtod_l+0xbc>
 8005a32:	3501      	adds	r5, #1
 8005a34:	2300      	movs	r3, #0
 8005a36:	9519      	str	r5, [sp, #100]	@ 0x64
 8005a38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f040 858e 	bne.w	800655e <_strtod_l+0xb96>
 8005a42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a44:	b1cb      	cbz	r3, 8005a7a <_strtod_l+0xb2>
 8005a46:	4652      	mov	r2, sl
 8005a48:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8005a4c:	ec43 2b10 	vmov	d0, r2, r3
 8005a50:	b01f      	add	sp, #124	@ 0x7c
 8005a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a56:	2920      	cmp	r1, #32
 8005a58:	d1ce      	bne.n	80059f8 <_strtod_l+0x30>
 8005a5a:	3201      	adds	r2, #1
 8005a5c:	e7c1      	b.n	80059e2 <_strtod_l+0x1a>
 8005a5e:	292d      	cmp	r1, #45	@ 0x2d
 8005a60:	d1ca      	bne.n	80059f8 <_strtod_l+0x30>
 8005a62:	2101      	movs	r1, #1
 8005a64:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005a66:	1c51      	adds	r1, r2, #1
 8005a68:	9119      	str	r1, [sp, #100]	@ 0x64
 8005a6a:	7852      	ldrb	r2, [r2, #1]
 8005a6c:	2a00      	cmp	r2, #0
 8005a6e:	d1c5      	bne.n	80059fc <_strtod_l+0x34>
 8005a70:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005a72:	9419      	str	r4, [sp, #100]	@ 0x64
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f040 8570 	bne.w	800655a <_strtod_l+0xb92>
 8005a7a:	4652      	mov	r2, sl
 8005a7c:	465b      	mov	r3, fp
 8005a7e:	e7e5      	b.n	8005a4c <_strtod_l+0x84>
 8005a80:	2100      	movs	r1, #0
 8005a82:	e7ef      	b.n	8005a64 <_strtod_l+0x9c>
 8005a84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005a86:	b13a      	cbz	r2, 8005a98 <_strtod_l+0xd0>
 8005a88:	2135      	movs	r1, #53	@ 0x35
 8005a8a:	a81c      	add	r0, sp, #112	@ 0x70
 8005a8c:	f002 f874 	bl	8007b78 <__copybits>
 8005a90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005a92:	9805      	ldr	r0, [sp, #20]
 8005a94:	f001 fc42 	bl	800731c <_Bfree>
 8005a98:	3e01      	subs	r6, #1
 8005a9a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005a9c:	2e04      	cmp	r6, #4
 8005a9e:	d806      	bhi.n	8005aae <_strtod_l+0xe6>
 8005aa0:	e8df f006 	tbb	[pc, r6]
 8005aa4:	201d0314 	.word	0x201d0314
 8005aa8:	14          	.byte	0x14
 8005aa9:	00          	.byte	0x00
 8005aaa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005aae:	05e1      	lsls	r1, r4, #23
 8005ab0:	bf48      	it	mi
 8005ab2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005ab6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005aba:	0d1b      	lsrs	r3, r3, #20
 8005abc:	051b      	lsls	r3, r3, #20
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1bb      	bne.n	8005a3a <_strtod_l+0x72>
 8005ac2:	f000 ff33 	bl	800692c <__errno>
 8005ac6:	2322      	movs	r3, #34	@ 0x22
 8005ac8:	6003      	str	r3, [r0, #0]
 8005aca:	e7b6      	b.n	8005a3a <_strtod_l+0x72>
 8005acc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005ad0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005ad4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005ad8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005adc:	e7e7      	b.n	8005aae <_strtod_l+0xe6>
 8005ade:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8005c5c <_strtod_l+0x294>
 8005ae2:	e7e4      	b.n	8005aae <_strtod_l+0xe6>
 8005ae4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005ae8:	f04f 3aff 	mov.w	sl, #4294967295
 8005aec:	e7df      	b.n	8005aae <_strtod_l+0xe6>
 8005aee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	9219      	str	r2, [sp, #100]	@ 0x64
 8005af4:	785b      	ldrb	r3, [r3, #1]
 8005af6:	2b30      	cmp	r3, #48	@ 0x30
 8005af8:	d0f9      	beq.n	8005aee <_strtod_l+0x126>
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d09d      	beq.n	8005a3a <_strtod_l+0x72>
 8005afe:	2301      	movs	r3, #1
 8005b00:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b04:	930c      	str	r3, [sp, #48]	@ 0x30
 8005b06:	2300      	movs	r3, #0
 8005b08:	9308      	str	r3, [sp, #32]
 8005b0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b0c:	461f      	mov	r7, r3
 8005b0e:	220a      	movs	r2, #10
 8005b10:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005b12:	7805      	ldrb	r5, [r0, #0]
 8005b14:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005b18:	b2d9      	uxtb	r1, r3
 8005b1a:	2909      	cmp	r1, #9
 8005b1c:	d928      	bls.n	8005b70 <_strtod_l+0x1a8>
 8005b1e:	494e      	ldr	r1, [pc, #312]	@ (8005c58 <_strtod_l+0x290>)
 8005b20:	2201      	movs	r2, #1
 8005b22:	f000 fe4e 	bl	80067c2 <strncmp>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	d032      	beq.n	8005b90 <_strtod_l+0x1c8>
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	462a      	mov	r2, r5
 8005b2e:	4681      	mov	r9, r0
 8005b30:	463d      	mov	r5, r7
 8005b32:	4603      	mov	r3, r0
 8005b34:	2a65      	cmp	r2, #101	@ 0x65
 8005b36:	d001      	beq.n	8005b3c <_strtod_l+0x174>
 8005b38:	2a45      	cmp	r2, #69	@ 0x45
 8005b3a:	d114      	bne.n	8005b66 <_strtod_l+0x19e>
 8005b3c:	b91d      	cbnz	r5, 8005b46 <_strtod_l+0x17e>
 8005b3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b40:	4302      	orrs	r2, r0
 8005b42:	d095      	beq.n	8005a70 <_strtod_l+0xa8>
 8005b44:	2500      	movs	r5, #0
 8005b46:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005b48:	1c62      	adds	r2, r4, #1
 8005b4a:	9219      	str	r2, [sp, #100]	@ 0x64
 8005b4c:	7862      	ldrb	r2, [r4, #1]
 8005b4e:	2a2b      	cmp	r2, #43	@ 0x2b
 8005b50:	d077      	beq.n	8005c42 <_strtod_l+0x27a>
 8005b52:	2a2d      	cmp	r2, #45	@ 0x2d
 8005b54:	d07b      	beq.n	8005c4e <_strtod_l+0x286>
 8005b56:	f04f 0c00 	mov.w	ip, #0
 8005b5a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005b5e:	2909      	cmp	r1, #9
 8005b60:	f240 8082 	bls.w	8005c68 <_strtod_l+0x2a0>
 8005b64:	9419      	str	r4, [sp, #100]	@ 0x64
 8005b66:	f04f 0800 	mov.w	r8, #0
 8005b6a:	e0a2      	b.n	8005cb2 <_strtod_l+0x2ea>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e7c7      	b.n	8005b00 <_strtod_l+0x138>
 8005b70:	2f08      	cmp	r7, #8
 8005b72:	bfd5      	itete	le
 8005b74:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005b76:	9908      	ldrgt	r1, [sp, #32]
 8005b78:	fb02 3301 	mlale	r3, r2, r1, r3
 8005b7c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005b80:	f100 0001 	add.w	r0, r0, #1
 8005b84:	bfd4      	ite	le
 8005b86:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005b88:	9308      	strgt	r3, [sp, #32]
 8005b8a:	3701      	adds	r7, #1
 8005b8c:	9019      	str	r0, [sp, #100]	@ 0x64
 8005b8e:	e7bf      	b.n	8005b10 <_strtod_l+0x148>
 8005b90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	9219      	str	r2, [sp, #100]	@ 0x64
 8005b96:	785a      	ldrb	r2, [r3, #1]
 8005b98:	b37f      	cbz	r7, 8005bfa <_strtod_l+0x232>
 8005b9a:	4681      	mov	r9, r0
 8005b9c:	463d      	mov	r5, r7
 8005b9e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005ba2:	2b09      	cmp	r3, #9
 8005ba4:	d912      	bls.n	8005bcc <_strtod_l+0x204>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e7c4      	b.n	8005b34 <_strtod_l+0x16c>
 8005baa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005bac:	1c5a      	adds	r2, r3, #1
 8005bae:	9219      	str	r2, [sp, #100]	@ 0x64
 8005bb0:	785a      	ldrb	r2, [r3, #1]
 8005bb2:	3001      	adds	r0, #1
 8005bb4:	2a30      	cmp	r2, #48	@ 0x30
 8005bb6:	d0f8      	beq.n	8005baa <_strtod_l+0x1e2>
 8005bb8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	f200 84d3 	bhi.w	8006568 <_strtod_l+0xba0>
 8005bc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005bc4:	930c      	str	r3, [sp, #48]	@ 0x30
 8005bc6:	4681      	mov	r9, r0
 8005bc8:	2000      	movs	r0, #0
 8005bca:	4605      	mov	r5, r0
 8005bcc:	3a30      	subs	r2, #48	@ 0x30
 8005bce:	f100 0301 	add.w	r3, r0, #1
 8005bd2:	d02a      	beq.n	8005c2a <_strtod_l+0x262>
 8005bd4:	4499      	add	r9, r3
 8005bd6:	eb00 0c05 	add.w	ip, r0, r5
 8005bda:	462b      	mov	r3, r5
 8005bdc:	210a      	movs	r1, #10
 8005bde:	4563      	cmp	r3, ip
 8005be0:	d10d      	bne.n	8005bfe <_strtod_l+0x236>
 8005be2:	1c69      	adds	r1, r5, #1
 8005be4:	4401      	add	r1, r0
 8005be6:	4428      	add	r0, r5
 8005be8:	2808      	cmp	r0, #8
 8005bea:	dc16      	bgt.n	8005c1a <_strtod_l+0x252>
 8005bec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005bee:	230a      	movs	r3, #10
 8005bf0:	fb03 2300 	mla	r3, r3, r0, r2
 8005bf4:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	e018      	b.n	8005c2c <_strtod_l+0x264>
 8005bfa:	4638      	mov	r0, r7
 8005bfc:	e7da      	b.n	8005bb4 <_strtod_l+0x1ec>
 8005bfe:	2b08      	cmp	r3, #8
 8005c00:	f103 0301 	add.w	r3, r3, #1
 8005c04:	dc03      	bgt.n	8005c0e <_strtod_l+0x246>
 8005c06:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005c08:	434e      	muls	r6, r1
 8005c0a:	960a      	str	r6, [sp, #40]	@ 0x28
 8005c0c:	e7e7      	b.n	8005bde <_strtod_l+0x216>
 8005c0e:	2b10      	cmp	r3, #16
 8005c10:	bfde      	ittt	le
 8005c12:	9e08      	ldrle	r6, [sp, #32]
 8005c14:	434e      	mulle	r6, r1
 8005c16:	9608      	strle	r6, [sp, #32]
 8005c18:	e7e1      	b.n	8005bde <_strtod_l+0x216>
 8005c1a:	280f      	cmp	r0, #15
 8005c1c:	dceb      	bgt.n	8005bf6 <_strtod_l+0x22e>
 8005c1e:	9808      	ldr	r0, [sp, #32]
 8005c20:	230a      	movs	r3, #10
 8005c22:	fb03 2300 	mla	r3, r3, r0, r2
 8005c26:	9308      	str	r3, [sp, #32]
 8005c28:	e7e5      	b.n	8005bf6 <_strtod_l+0x22e>
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005c2e:	1c50      	adds	r0, r2, #1
 8005c30:	9019      	str	r0, [sp, #100]	@ 0x64
 8005c32:	7852      	ldrb	r2, [r2, #1]
 8005c34:	4618      	mov	r0, r3
 8005c36:	460d      	mov	r5, r1
 8005c38:	e7b1      	b.n	8005b9e <_strtod_l+0x1d6>
 8005c3a:	f04f 0900 	mov.w	r9, #0
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e77d      	b.n	8005b3e <_strtod_l+0x176>
 8005c42:	f04f 0c00 	mov.w	ip, #0
 8005c46:	1ca2      	adds	r2, r4, #2
 8005c48:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c4a:	78a2      	ldrb	r2, [r4, #2]
 8005c4c:	e785      	b.n	8005b5a <_strtod_l+0x192>
 8005c4e:	f04f 0c01 	mov.w	ip, #1
 8005c52:	e7f8      	b.n	8005c46 <_strtod_l+0x27e>
 8005c54:	08008778 	.word	0x08008778
 8005c58:	08008754 	.word	0x08008754
 8005c5c:	7ff00000 	.word	0x7ff00000
 8005c60:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005c62:	1c51      	adds	r1, r2, #1
 8005c64:	9119      	str	r1, [sp, #100]	@ 0x64
 8005c66:	7852      	ldrb	r2, [r2, #1]
 8005c68:	2a30      	cmp	r2, #48	@ 0x30
 8005c6a:	d0f9      	beq.n	8005c60 <_strtod_l+0x298>
 8005c6c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005c70:	2908      	cmp	r1, #8
 8005c72:	f63f af78 	bhi.w	8005b66 <_strtod_l+0x19e>
 8005c76:	3a30      	subs	r2, #48	@ 0x30
 8005c78:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005c7c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005c7e:	f04f 080a 	mov.w	r8, #10
 8005c82:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005c84:	1c56      	adds	r6, r2, #1
 8005c86:	9619      	str	r6, [sp, #100]	@ 0x64
 8005c88:	7852      	ldrb	r2, [r2, #1]
 8005c8a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005c8e:	f1be 0f09 	cmp.w	lr, #9
 8005c92:	d939      	bls.n	8005d08 <_strtod_l+0x340>
 8005c94:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005c96:	1a76      	subs	r6, r6, r1
 8005c98:	2e08      	cmp	r6, #8
 8005c9a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005c9e:	dc03      	bgt.n	8005ca8 <_strtod_l+0x2e0>
 8005ca0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005ca2:	4588      	cmp	r8, r1
 8005ca4:	bfa8      	it	ge
 8005ca6:	4688      	movge	r8, r1
 8005ca8:	f1bc 0f00 	cmp.w	ip, #0
 8005cac:	d001      	beq.n	8005cb2 <_strtod_l+0x2ea>
 8005cae:	f1c8 0800 	rsb	r8, r8, #0
 8005cb2:	2d00      	cmp	r5, #0
 8005cb4:	d14e      	bne.n	8005d54 <_strtod_l+0x38c>
 8005cb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005cb8:	4308      	orrs	r0, r1
 8005cba:	f47f aebe 	bne.w	8005a3a <_strtod_l+0x72>
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f47f aed6 	bne.w	8005a70 <_strtod_l+0xa8>
 8005cc4:	2a69      	cmp	r2, #105	@ 0x69
 8005cc6:	d028      	beq.n	8005d1a <_strtod_l+0x352>
 8005cc8:	dc25      	bgt.n	8005d16 <_strtod_l+0x34e>
 8005cca:	2a49      	cmp	r2, #73	@ 0x49
 8005ccc:	d025      	beq.n	8005d1a <_strtod_l+0x352>
 8005cce:	2a4e      	cmp	r2, #78	@ 0x4e
 8005cd0:	f47f aece 	bne.w	8005a70 <_strtod_l+0xa8>
 8005cd4:	499b      	ldr	r1, [pc, #620]	@ (8005f44 <_strtod_l+0x57c>)
 8005cd6:	a819      	add	r0, sp, #100	@ 0x64
 8005cd8:	f001 f968 	bl	8006fac <__match>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	f43f aec7 	beq.w	8005a70 <_strtod_l+0xa8>
 8005ce2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b28      	cmp	r3, #40	@ 0x28
 8005ce8:	d12e      	bne.n	8005d48 <_strtod_l+0x380>
 8005cea:	4997      	ldr	r1, [pc, #604]	@ (8005f48 <_strtod_l+0x580>)
 8005cec:	aa1c      	add	r2, sp, #112	@ 0x70
 8005cee:	a819      	add	r0, sp, #100	@ 0x64
 8005cf0:	f001 f970 	bl	8006fd4 <__hexnan>
 8005cf4:	2805      	cmp	r0, #5
 8005cf6:	d127      	bne.n	8005d48 <_strtod_l+0x380>
 8005cf8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005cfa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005cfe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005d02:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005d06:	e698      	b.n	8005a3a <_strtod_l+0x72>
 8005d08:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005d0a:	fb08 2101 	mla	r1, r8, r1, r2
 8005d0e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005d12:	920e      	str	r2, [sp, #56]	@ 0x38
 8005d14:	e7b5      	b.n	8005c82 <_strtod_l+0x2ba>
 8005d16:	2a6e      	cmp	r2, #110	@ 0x6e
 8005d18:	e7da      	b.n	8005cd0 <_strtod_l+0x308>
 8005d1a:	498c      	ldr	r1, [pc, #560]	@ (8005f4c <_strtod_l+0x584>)
 8005d1c:	a819      	add	r0, sp, #100	@ 0x64
 8005d1e:	f001 f945 	bl	8006fac <__match>
 8005d22:	2800      	cmp	r0, #0
 8005d24:	f43f aea4 	beq.w	8005a70 <_strtod_l+0xa8>
 8005d28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d2a:	4989      	ldr	r1, [pc, #548]	@ (8005f50 <_strtod_l+0x588>)
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	a819      	add	r0, sp, #100	@ 0x64
 8005d30:	9319      	str	r3, [sp, #100]	@ 0x64
 8005d32:	f001 f93b 	bl	8006fac <__match>
 8005d36:	b910      	cbnz	r0, 8005d3e <_strtod_l+0x376>
 8005d38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	9319      	str	r3, [sp, #100]	@ 0x64
 8005d3e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8005f60 <_strtod_l+0x598>
 8005d42:	f04f 0a00 	mov.w	sl, #0
 8005d46:	e678      	b.n	8005a3a <_strtod_l+0x72>
 8005d48:	4882      	ldr	r0, [pc, #520]	@ (8005f54 <_strtod_l+0x58c>)
 8005d4a:	f000 fe35 	bl	80069b8 <nan>
 8005d4e:	ec5b ab10 	vmov	sl, fp, d0
 8005d52:	e672      	b.n	8005a3a <_strtod_l+0x72>
 8005d54:	eba8 0309 	sub.w	r3, r8, r9
 8005d58:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005d5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d5c:	2f00      	cmp	r7, #0
 8005d5e:	bf08      	it	eq
 8005d60:	462f      	moveq	r7, r5
 8005d62:	2d10      	cmp	r5, #16
 8005d64:	462c      	mov	r4, r5
 8005d66:	bfa8      	it	ge
 8005d68:	2410      	movge	r4, #16
 8005d6a:	f7fa fbf3 	bl	8000554 <__aeabi_ui2d>
 8005d6e:	2d09      	cmp	r5, #9
 8005d70:	4682      	mov	sl, r0
 8005d72:	468b      	mov	fp, r1
 8005d74:	dc13      	bgt.n	8005d9e <_strtod_l+0x3d6>
 8005d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f43f ae5e 	beq.w	8005a3a <_strtod_l+0x72>
 8005d7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d80:	dd78      	ble.n	8005e74 <_strtod_l+0x4ac>
 8005d82:	2b16      	cmp	r3, #22
 8005d84:	dc5f      	bgt.n	8005e46 <_strtod_l+0x47e>
 8005d86:	4974      	ldr	r1, [pc, #464]	@ (8005f58 <_strtod_l+0x590>)
 8005d88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005d8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d90:	4652      	mov	r2, sl
 8005d92:	465b      	mov	r3, fp
 8005d94:	f7fa fc58 	bl	8000648 <__aeabi_dmul>
 8005d98:	4682      	mov	sl, r0
 8005d9a:	468b      	mov	fp, r1
 8005d9c:	e64d      	b.n	8005a3a <_strtod_l+0x72>
 8005d9e:	4b6e      	ldr	r3, [pc, #440]	@ (8005f58 <_strtod_l+0x590>)
 8005da0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005da4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005da8:	f7fa fc4e 	bl	8000648 <__aeabi_dmul>
 8005dac:	4682      	mov	sl, r0
 8005dae:	9808      	ldr	r0, [sp, #32]
 8005db0:	468b      	mov	fp, r1
 8005db2:	f7fa fbcf 	bl	8000554 <__aeabi_ui2d>
 8005db6:	4602      	mov	r2, r0
 8005db8:	460b      	mov	r3, r1
 8005dba:	4650      	mov	r0, sl
 8005dbc:	4659      	mov	r1, fp
 8005dbe:	f7fa fa8d 	bl	80002dc <__adddf3>
 8005dc2:	2d0f      	cmp	r5, #15
 8005dc4:	4682      	mov	sl, r0
 8005dc6:	468b      	mov	fp, r1
 8005dc8:	ddd5      	ble.n	8005d76 <_strtod_l+0x3ae>
 8005dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dcc:	1b2c      	subs	r4, r5, r4
 8005dce:	441c      	add	r4, r3
 8005dd0:	2c00      	cmp	r4, #0
 8005dd2:	f340 8096 	ble.w	8005f02 <_strtod_l+0x53a>
 8005dd6:	f014 030f 	ands.w	r3, r4, #15
 8005dda:	d00a      	beq.n	8005df2 <_strtod_l+0x42a>
 8005ddc:	495e      	ldr	r1, [pc, #376]	@ (8005f58 <_strtod_l+0x590>)
 8005dde:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005de2:	4652      	mov	r2, sl
 8005de4:	465b      	mov	r3, fp
 8005de6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dea:	f7fa fc2d 	bl	8000648 <__aeabi_dmul>
 8005dee:	4682      	mov	sl, r0
 8005df0:	468b      	mov	fp, r1
 8005df2:	f034 040f 	bics.w	r4, r4, #15
 8005df6:	d073      	beq.n	8005ee0 <_strtod_l+0x518>
 8005df8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005dfc:	dd48      	ble.n	8005e90 <_strtod_l+0x4c8>
 8005dfe:	2400      	movs	r4, #0
 8005e00:	46a0      	mov	r8, r4
 8005e02:	940a      	str	r4, [sp, #40]	@ 0x28
 8005e04:	46a1      	mov	r9, r4
 8005e06:	9a05      	ldr	r2, [sp, #20]
 8005e08:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8005f60 <_strtod_l+0x598>
 8005e0c:	2322      	movs	r3, #34	@ 0x22
 8005e0e:	6013      	str	r3, [r2, #0]
 8005e10:	f04f 0a00 	mov.w	sl, #0
 8005e14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f43f ae0f 	beq.w	8005a3a <_strtod_l+0x72>
 8005e1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005e1e:	9805      	ldr	r0, [sp, #20]
 8005e20:	f001 fa7c 	bl	800731c <_Bfree>
 8005e24:	9805      	ldr	r0, [sp, #20]
 8005e26:	4649      	mov	r1, r9
 8005e28:	f001 fa78 	bl	800731c <_Bfree>
 8005e2c:	9805      	ldr	r0, [sp, #20]
 8005e2e:	4641      	mov	r1, r8
 8005e30:	f001 fa74 	bl	800731c <_Bfree>
 8005e34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005e36:	9805      	ldr	r0, [sp, #20]
 8005e38:	f001 fa70 	bl	800731c <_Bfree>
 8005e3c:	9805      	ldr	r0, [sp, #20]
 8005e3e:	4621      	mov	r1, r4
 8005e40:	f001 fa6c 	bl	800731c <_Bfree>
 8005e44:	e5f9      	b.n	8005a3a <_strtod_l+0x72>
 8005e46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e48:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	dbbc      	blt.n	8005dca <_strtod_l+0x402>
 8005e50:	4c41      	ldr	r4, [pc, #260]	@ (8005f58 <_strtod_l+0x590>)
 8005e52:	f1c5 050f 	rsb	r5, r5, #15
 8005e56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005e5a:	4652      	mov	r2, sl
 8005e5c:	465b      	mov	r3, fp
 8005e5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e62:	f7fa fbf1 	bl	8000648 <__aeabi_dmul>
 8005e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e68:	1b5d      	subs	r5, r3, r5
 8005e6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005e6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005e72:	e78f      	b.n	8005d94 <_strtod_l+0x3cc>
 8005e74:	3316      	adds	r3, #22
 8005e76:	dba8      	blt.n	8005dca <_strtod_l+0x402>
 8005e78:	4b37      	ldr	r3, [pc, #220]	@ (8005f58 <_strtod_l+0x590>)
 8005e7a:	eba9 0808 	sub.w	r8, r9, r8
 8005e7e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005e82:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005e86:	4650      	mov	r0, sl
 8005e88:	4659      	mov	r1, fp
 8005e8a:	f7fa fd07 	bl	800089c <__aeabi_ddiv>
 8005e8e:	e783      	b.n	8005d98 <_strtod_l+0x3d0>
 8005e90:	4b32      	ldr	r3, [pc, #200]	@ (8005f5c <_strtod_l+0x594>)
 8005e92:	9308      	str	r3, [sp, #32]
 8005e94:	2300      	movs	r3, #0
 8005e96:	1124      	asrs	r4, r4, #4
 8005e98:	4650      	mov	r0, sl
 8005e9a:	4659      	mov	r1, fp
 8005e9c:	461e      	mov	r6, r3
 8005e9e:	2c01      	cmp	r4, #1
 8005ea0:	dc21      	bgt.n	8005ee6 <_strtod_l+0x51e>
 8005ea2:	b10b      	cbz	r3, 8005ea8 <_strtod_l+0x4e0>
 8005ea4:	4682      	mov	sl, r0
 8005ea6:	468b      	mov	fp, r1
 8005ea8:	492c      	ldr	r1, [pc, #176]	@ (8005f5c <_strtod_l+0x594>)
 8005eaa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005eae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005eb2:	4652      	mov	r2, sl
 8005eb4:	465b      	mov	r3, fp
 8005eb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005eba:	f7fa fbc5 	bl	8000648 <__aeabi_dmul>
 8005ebe:	4b28      	ldr	r3, [pc, #160]	@ (8005f60 <_strtod_l+0x598>)
 8005ec0:	460a      	mov	r2, r1
 8005ec2:	400b      	ands	r3, r1
 8005ec4:	4927      	ldr	r1, [pc, #156]	@ (8005f64 <_strtod_l+0x59c>)
 8005ec6:	428b      	cmp	r3, r1
 8005ec8:	4682      	mov	sl, r0
 8005eca:	d898      	bhi.n	8005dfe <_strtod_l+0x436>
 8005ecc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005ed0:	428b      	cmp	r3, r1
 8005ed2:	bf86      	itte	hi
 8005ed4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8005f68 <_strtod_l+0x5a0>
 8005ed8:	f04f 3aff 	movhi.w	sl, #4294967295
 8005edc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	9308      	str	r3, [sp, #32]
 8005ee4:	e07a      	b.n	8005fdc <_strtod_l+0x614>
 8005ee6:	07e2      	lsls	r2, r4, #31
 8005ee8:	d505      	bpl.n	8005ef6 <_strtod_l+0x52e>
 8005eea:	9b08      	ldr	r3, [sp, #32]
 8005eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef0:	f7fa fbaa 	bl	8000648 <__aeabi_dmul>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	9a08      	ldr	r2, [sp, #32]
 8005ef8:	3208      	adds	r2, #8
 8005efa:	3601      	adds	r6, #1
 8005efc:	1064      	asrs	r4, r4, #1
 8005efe:	9208      	str	r2, [sp, #32]
 8005f00:	e7cd      	b.n	8005e9e <_strtod_l+0x4d6>
 8005f02:	d0ed      	beq.n	8005ee0 <_strtod_l+0x518>
 8005f04:	4264      	negs	r4, r4
 8005f06:	f014 020f 	ands.w	r2, r4, #15
 8005f0a:	d00a      	beq.n	8005f22 <_strtod_l+0x55a>
 8005f0c:	4b12      	ldr	r3, [pc, #72]	@ (8005f58 <_strtod_l+0x590>)
 8005f0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f12:	4650      	mov	r0, sl
 8005f14:	4659      	mov	r1, fp
 8005f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1a:	f7fa fcbf 	bl	800089c <__aeabi_ddiv>
 8005f1e:	4682      	mov	sl, r0
 8005f20:	468b      	mov	fp, r1
 8005f22:	1124      	asrs	r4, r4, #4
 8005f24:	d0dc      	beq.n	8005ee0 <_strtod_l+0x518>
 8005f26:	2c1f      	cmp	r4, #31
 8005f28:	dd20      	ble.n	8005f6c <_strtod_l+0x5a4>
 8005f2a:	2400      	movs	r4, #0
 8005f2c:	46a0      	mov	r8, r4
 8005f2e:	940a      	str	r4, [sp, #40]	@ 0x28
 8005f30:	46a1      	mov	r9, r4
 8005f32:	9a05      	ldr	r2, [sp, #20]
 8005f34:	2322      	movs	r3, #34	@ 0x22
 8005f36:	f04f 0a00 	mov.w	sl, #0
 8005f3a:	f04f 0b00 	mov.w	fp, #0
 8005f3e:	6013      	str	r3, [r2, #0]
 8005f40:	e768      	b.n	8005e14 <_strtod_l+0x44c>
 8005f42:	bf00      	nop
 8005f44:	0800875f 	.word	0x0800875f
 8005f48:	08008764 	.word	0x08008764
 8005f4c:	08008756 	.word	0x08008756
 8005f50:	08008759 	.word	0x08008759
 8005f54:	0800886c 	.word	0x0800886c
 8005f58:	08008970 	.word	0x08008970
 8005f5c:	08008948 	.word	0x08008948
 8005f60:	7ff00000 	.word	0x7ff00000
 8005f64:	7ca00000 	.word	0x7ca00000
 8005f68:	7fefffff 	.word	0x7fefffff
 8005f6c:	f014 0310 	ands.w	r3, r4, #16
 8005f70:	bf18      	it	ne
 8005f72:	236a      	movne	r3, #106	@ 0x6a
 8005f74:	4ea9      	ldr	r6, [pc, #676]	@ (800621c <_strtod_l+0x854>)
 8005f76:	9308      	str	r3, [sp, #32]
 8005f78:	4650      	mov	r0, sl
 8005f7a:	4659      	mov	r1, fp
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	07e2      	lsls	r2, r4, #31
 8005f80:	d504      	bpl.n	8005f8c <_strtod_l+0x5c4>
 8005f82:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f86:	f7fa fb5f 	bl	8000648 <__aeabi_dmul>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	1064      	asrs	r4, r4, #1
 8005f8e:	f106 0608 	add.w	r6, r6, #8
 8005f92:	d1f4      	bne.n	8005f7e <_strtod_l+0x5b6>
 8005f94:	b10b      	cbz	r3, 8005f9a <_strtod_l+0x5d2>
 8005f96:	4682      	mov	sl, r0
 8005f98:	468b      	mov	fp, r1
 8005f9a:	9b08      	ldr	r3, [sp, #32]
 8005f9c:	b1b3      	cbz	r3, 8005fcc <_strtod_l+0x604>
 8005f9e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005fa2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	4659      	mov	r1, fp
 8005faa:	dd0f      	ble.n	8005fcc <_strtod_l+0x604>
 8005fac:	2b1f      	cmp	r3, #31
 8005fae:	dd55      	ble.n	800605c <_strtod_l+0x694>
 8005fb0:	2b34      	cmp	r3, #52	@ 0x34
 8005fb2:	bfde      	ittt	le
 8005fb4:	f04f 33ff 	movle.w	r3, #4294967295
 8005fb8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005fbc:	4093      	lslle	r3, r2
 8005fbe:	f04f 0a00 	mov.w	sl, #0
 8005fc2:	bfcc      	ite	gt
 8005fc4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005fc8:	ea03 0b01 	andle.w	fp, r3, r1
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2300      	movs	r3, #0
 8005fd0:	4650      	mov	r0, sl
 8005fd2:	4659      	mov	r1, fp
 8005fd4:	f7fa fda0 	bl	8000b18 <__aeabi_dcmpeq>
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	d1a6      	bne.n	8005f2a <_strtod_l+0x562>
 8005fdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005fe2:	9805      	ldr	r0, [sp, #20]
 8005fe4:	462b      	mov	r3, r5
 8005fe6:	463a      	mov	r2, r7
 8005fe8:	f001 fa00 	bl	80073ec <__s2b>
 8005fec:	900a      	str	r0, [sp, #40]	@ 0x28
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	f43f af05 	beq.w	8005dfe <_strtod_l+0x436>
 8005ff4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ff6:	2a00      	cmp	r2, #0
 8005ff8:	eba9 0308 	sub.w	r3, r9, r8
 8005ffc:	bfa8      	it	ge
 8005ffe:	2300      	movge	r3, #0
 8006000:	9312      	str	r3, [sp, #72]	@ 0x48
 8006002:	2400      	movs	r4, #0
 8006004:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006008:	9316      	str	r3, [sp, #88]	@ 0x58
 800600a:	46a0      	mov	r8, r4
 800600c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800600e:	9805      	ldr	r0, [sp, #20]
 8006010:	6859      	ldr	r1, [r3, #4]
 8006012:	f001 f943 	bl	800729c <_Balloc>
 8006016:	4681      	mov	r9, r0
 8006018:	2800      	cmp	r0, #0
 800601a:	f43f aef4 	beq.w	8005e06 <_strtod_l+0x43e>
 800601e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006020:	691a      	ldr	r2, [r3, #16]
 8006022:	3202      	adds	r2, #2
 8006024:	f103 010c 	add.w	r1, r3, #12
 8006028:	0092      	lsls	r2, r2, #2
 800602a:	300c      	adds	r0, #12
 800602c:	f000 fcb3 	bl	8006996 <memcpy>
 8006030:	ec4b ab10 	vmov	d0, sl, fp
 8006034:	9805      	ldr	r0, [sp, #20]
 8006036:	aa1c      	add	r2, sp, #112	@ 0x70
 8006038:	a91b      	add	r1, sp, #108	@ 0x6c
 800603a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800603e:	f001 fd11 	bl	8007a64 <__d2b>
 8006042:	901a      	str	r0, [sp, #104]	@ 0x68
 8006044:	2800      	cmp	r0, #0
 8006046:	f43f aede 	beq.w	8005e06 <_strtod_l+0x43e>
 800604a:	9805      	ldr	r0, [sp, #20]
 800604c:	2101      	movs	r1, #1
 800604e:	f001 fa63 	bl	8007518 <__i2b>
 8006052:	4680      	mov	r8, r0
 8006054:	b948      	cbnz	r0, 800606a <_strtod_l+0x6a2>
 8006056:	f04f 0800 	mov.w	r8, #0
 800605a:	e6d4      	b.n	8005e06 <_strtod_l+0x43e>
 800605c:	f04f 32ff 	mov.w	r2, #4294967295
 8006060:	fa02 f303 	lsl.w	r3, r2, r3
 8006064:	ea03 0a0a 	and.w	sl, r3, sl
 8006068:	e7b0      	b.n	8005fcc <_strtod_l+0x604>
 800606a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800606c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800606e:	2d00      	cmp	r5, #0
 8006070:	bfab      	itete	ge
 8006072:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006074:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006076:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006078:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800607a:	bfac      	ite	ge
 800607c:	18ef      	addge	r7, r5, r3
 800607e:	1b5e      	sublt	r6, r3, r5
 8006080:	9b08      	ldr	r3, [sp, #32]
 8006082:	1aed      	subs	r5, r5, r3
 8006084:	4415      	add	r5, r2
 8006086:	4b66      	ldr	r3, [pc, #408]	@ (8006220 <_strtod_l+0x858>)
 8006088:	3d01      	subs	r5, #1
 800608a:	429d      	cmp	r5, r3
 800608c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006090:	da50      	bge.n	8006134 <_strtod_l+0x76c>
 8006092:	1b5b      	subs	r3, r3, r5
 8006094:	2b1f      	cmp	r3, #31
 8006096:	eba2 0203 	sub.w	r2, r2, r3
 800609a:	f04f 0101 	mov.w	r1, #1
 800609e:	dc3d      	bgt.n	800611c <_strtod_l+0x754>
 80060a0:	fa01 f303 	lsl.w	r3, r1, r3
 80060a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80060a6:	2300      	movs	r3, #0
 80060a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80060aa:	18bd      	adds	r5, r7, r2
 80060ac:	9b08      	ldr	r3, [sp, #32]
 80060ae:	42af      	cmp	r7, r5
 80060b0:	4416      	add	r6, r2
 80060b2:	441e      	add	r6, r3
 80060b4:	463b      	mov	r3, r7
 80060b6:	bfa8      	it	ge
 80060b8:	462b      	movge	r3, r5
 80060ba:	42b3      	cmp	r3, r6
 80060bc:	bfa8      	it	ge
 80060be:	4633      	movge	r3, r6
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	bfc2      	ittt	gt
 80060c4:	1aed      	subgt	r5, r5, r3
 80060c6:	1af6      	subgt	r6, r6, r3
 80060c8:	1aff      	subgt	r7, r7, r3
 80060ca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	dd16      	ble.n	80060fe <_strtod_l+0x736>
 80060d0:	4641      	mov	r1, r8
 80060d2:	9805      	ldr	r0, [sp, #20]
 80060d4:	461a      	mov	r2, r3
 80060d6:	f001 fadf 	bl	8007698 <__pow5mult>
 80060da:	4680      	mov	r8, r0
 80060dc:	2800      	cmp	r0, #0
 80060de:	d0ba      	beq.n	8006056 <_strtod_l+0x68e>
 80060e0:	4601      	mov	r1, r0
 80060e2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80060e4:	9805      	ldr	r0, [sp, #20]
 80060e6:	f001 fa2d 	bl	8007544 <__multiply>
 80060ea:	900e      	str	r0, [sp, #56]	@ 0x38
 80060ec:	2800      	cmp	r0, #0
 80060ee:	f43f ae8a 	beq.w	8005e06 <_strtod_l+0x43e>
 80060f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80060f4:	9805      	ldr	r0, [sp, #20]
 80060f6:	f001 f911 	bl	800731c <_Bfree>
 80060fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80060fe:	2d00      	cmp	r5, #0
 8006100:	dc1d      	bgt.n	800613e <_strtod_l+0x776>
 8006102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006104:	2b00      	cmp	r3, #0
 8006106:	dd23      	ble.n	8006150 <_strtod_l+0x788>
 8006108:	4649      	mov	r1, r9
 800610a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800610c:	9805      	ldr	r0, [sp, #20]
 800610e:	f001 fac3 	bl	8007698 <__pow5mult>
 8006112:	4681      	mov	r9, r0
 8006114:	b9e0      	cbnz	r0, 8006150 <_strtod_l+0x788>
 8006116:	f04f 0900 	mov.w	r9, #0
 800611a:	e674      	b.n	8005e06 <_strtod_l+0x43e>
 800611c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006120:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006124:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006128:	35e2      	adds	r5, #226	@ 0xe2
 800612a:	fa01 f305 	lsl.w	r3, r1, r5
 800612e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006130:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006132:	e7ba      	b.n	80060aa <_strtod_l+0x6e2>
 8006134:	2300      	movs	r3, #0
 8006136:	9310      	str	r3, [sp, #64]	@ 0x40
 8006138:	2301      	movs	r3, #1
 800613a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800613c:	e7b5      	b.n	80060aa <_strtod_l+0x6e2>
 800613e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006140:	9805      	ldr	r0, [sp, #20]
 8006142:	462a      	mov	r2, r5
 8006144:	f001 fb02 	bl	800774c <__lshift>
 8006148:	901a      	str	r0, [sp, #104]	@ 0x68
 800614a:	2800      	cmp	r0, #0
 800614c:	d1d9      	bne.n	8006102 <_strtod_l+0x73a>
 800614e:	e65a      	b.n	8005e06 <_strtod_l+0x43e>
 8006150:	2e00      	cmp	r6, #0
 8006152:	dd07      	ble.n	8006164 <_strtod_l+0x79c>
 8006154:	4649      	mov	r1, r9
 8006156:	9805      	ldr	r0, [sp, #20]
 8006158:	4632      	mov	r2, r6
 800615a:	f001 faf7 	bl	800774c <__lshift>
 800615e:	4681      	mov	r9, r0
 8006160:	2800      	cmp	r0, #0
 8006162:	d0d8      	beq.n	8006116 <_strtod_l+0x74e>
 8006164:	2f00      	cmp	r7, #0
 8006166:	dd08      	ble.n	800617a <_strtod_l+0x7b2>
 8006168:	4641      	mov	r1, r8
 800616a:	9805      	ldr	r0, [sp, #20]
 800616c:	463a      	mov	r2, r7
 800616e:	f001 faed 	bl	800774c <__lshift>
 8006172:	4680      	mov	r8, r0
 8006174:	2800      	cmp	r0, #0
 8006176:	f43f ae46 	beq.w	8005e06 <_strtod_l+0x43e>
 800617a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800617c:	9805      	ldr	r0, [sp, #20]
 800617e:	464a      	mov	r2, r9
 8006180:	f001 fb6c 	bl	800785c <__mdiff>
 8006184:	4604      	mov	r4, r0
 8006186:	2800      	cmp	r0, #0
 8006188:	f43f ae3d 	beq.w	8005e06 <_strtod_l+0x43e>
 800618c:	68c3      	ldr	r3, [r0, #12]
 800618e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006190:	2300      	movs	r3, #0
 8006192:	60c3      	str	r3, [r0, #12]
 8006194:	4641      	mov	r1, r8
 8006196:	f001 fb45 	bl	8007824 <__mcmp>
 800619a:	2800      	cmp	r0, #0
 800619c:	da46      	bge.n	800622c <_strtod_l+0x864>
 800619e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061a0:	ea53 030a 	orrs.w	r3, r3, sl
 80061a4:	d16c      	bne.n	8006280 <_strtod_l+0x8b8>
 80061a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d168      	bne.n	8006280 <_strtod_l+0x8b8>
 80061ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80061b2:	0d1b      	lsrs	r3, r3, #20
 80061b4:	051b      	lsls	r3, r3, #20
 80061b6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80061ba:	d961      	bls.n	8006280 <_strtod_l+0x8b8>
 80061bc:	6963      	ldr	r3, [r4, #20]
 80061be:	b913      	cbnz	r3, 80061c6 <_strtod_l+0x7fe>
 80061c0:	6923      	ldr	r3, [r4, #16]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	dd5c      	ble.n	8006280 <_strtod_l+0x8b8>
 80061c6:	4621      	mov	r1, r4
 80061c8:	2201      	movs	r2, #1
 80061ca:	9805      	ldr	r0, [sp, #20]
 80061cc:	f001 fabe 	bl	800774c <__lshift>
 80061d0:	4641      	mov	r1, r8
 80061d2:	4604      	mov	r4, r0
 80061d4:	f001 fb26 	bl	8007824 <__mcmp>
 80061d8:	2800      	cmp	r0, #0
 80061da:	dd51      	ble.n	8006280 <_strtod_l+0x8b8>
 80061dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80061e0:	9a08      	ldr	r2, [sp, #32]
 80061e2:	0d1b      	lsrs	r3, r3, #20
 80061e4:	051b      	lsls	r3, r3, #20
 80061e6:	2a00      	cmp	r2, #0
 80061e8:	d06b      	beq.n	80062c2 <_strtod_l+0x8fa>
 80061ea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80061ee:	d868      	bhi.n	80062c2 <_strtod_l+0x8fa>
 80061f0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80061f4:	f67f ae9d 	bls.w	8005f32 <_strtod_l+0x56a>
 80061f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006224 <_strtod_l+0x85c>)
 80061fa:	4650      	mov	r0, sl
 80061fc:	4659      	mov	r1, fp
 80061fe:	2200      	movs	r2, #0
 8006200:	f7fa fa22 	bl	8000648 <__aeabi_dmul>
 8006204:	4b08      	ldr	r3, [pc, #32]	@ (8006228 <_strtod_l+0x860>)
 8006206:	400b      	ands	r3, r1
 8006208:	4682      	mov	sl, r0
 800620a:	468b      	mov	fp, r1
 800620c:	2b00      	cmp	r3, #0
 800620e:	f47f ae05 	bne.w	8005e1c <_strtod_l+0x454>
 8006212:	9a05      	ldr	r2, [sp, #20]
 8006214:	2322      	movs	r3, #34	@ 0x22
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	e600      	b.n	8005e1c <_strtod_l+0x454>
 800621a:	bf00      	nop
 800621c:	08008790 	.word	0x08008790
 8006220:	fffffc02 	.word	0xfffffc02
 8006224:	39500000 	.word	0x39500000
 8006228:	7ff00000 	.word	0x7ff00000
 800622c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006230:	d165      	bne.n	80062fe <_strtod_l+0x936>
 8006232:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006234:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006238:	b35a      	cbz	r2, 8006292 <_strtod_l+0x8ca>
 800623a:	4a9f      	ldr	r2, [pc, #636]	@ (80064b8 <_strtod_l+0xaf0>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d12b      	bne.n	8006298 <_strtod_l+0x8d0>
 8006240:	9b08      	ldr	r3, [sp, #32]
 8006242:	4651      	mov	r1, sl
 8006244:	b303      	cbz	r3, 8006288 <_strtod_l+0x8c0>
 8006246:	4b9d      	ldr	r3, [pc, #628]	@ (80064bc <_strtod_l+0xaf4>)
 8006248:	465a      	mov	r2, fp
 800624a:	4013      	ands	r3, r2
 800624c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006250:	f04f 32ff 	mov.w	r2, #4294967295
 8006254:	d81b      	bhi.n	800628e <_strtod_l+0x8c6>
 8006256:	0d1b      	lsrs	r3, r3, #20
 8006258:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800625c:	fa02 f303 	lsl.w	r3, r2, r3
 8006260:	4299      	cmp	r1, r3
 8006262:	d119      	bne.n	8006298 <_strtod_l+0x8d0>
 8006264:	4b96      	ldr	r3, [pc, #600]	@ (80064c0 <_strtod_l+0xaf8>)
 8006266:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006268:	429a      	cmp	r2, r3
 800626a:	d102      	bne.n	8006272 <_strtod_l+0x8aa>
 800626c:	3101      	adds	r1, #1
 800626e:	f43f adca 	beq.w	8005e06 <_strtod_l+0x43e>
 8006272:	4b92      	ldr	r3, [pc, #584]	@ (80064bc <_strtod_l+0xaf4>)
 8006274:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006276:	401a      	ands	r2, r3
 8006278:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800627c:	f04f 0a00 	mov.w	sl, #0
 8006280:	9b08      	ldr	r3, [sp, #32]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1b8      	bne.n	80061f8 <_strtod_l+0x830>
 8006286:	e5c9      	b.n	8005e1c <_strtod_l+0x454>
 8006288:	f04f 33ff 	mov.w	r3, #4294967295
 800628c:	e7e8      	b.n	8006260 <_strtod_l+0x898>
 800628e:	4613      	mov	r3, r2
 8006290:	e7e6      	b.n	8006260 <_strtod_l+0x898>
 8006292:	ea53 030a 	orrs.w	r3, r3, sl
 8006296:	d0a1      	beq.n	80061dc <_strtod_l+0x814>
 8006298:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800629a:	b1db      	cbz	r3, 80062d4 <_strtod_l+0x90c>
 800629c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800629e:	4213      	tst	r3, r2
 80062a0:	d0ee      	beq.n	8006280 <_strtod_l+0x8b8>
 80062a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062a4:	9a08      	ldr	r2, [sp, #32]
 80062a6:	4650      	mov	r0, sl
 80062a8:	4659      	mov	r1, fp
 80062aa:	b1bb      	cbz	r3, 80062dc <_strtod_l+0x914>
 80062ac:	f7ff fb6b 	bl	8005986 <sulp>
 80062b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062b4:	ec53 2b10 	vmov	r2, r3, d0
 80062b8:	f7fa f810 	bl	80002dc <__adddf3>
 80062bc:	4682      	mov	sl, r0
 80062be:	468b      	mov	fp, r1
 80062c0:	e7de      	b.n	8006280 <_strtod_l+0x8b8>
 80062c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80062c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80062ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80062ce:	f04f 3aff 	mov.w	sl, #4294967295
 80062d2:	e7d5      	b.n	8006280 <_strtod_l+0x8b8>
 80062d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80062d6:	ea13 0f0a 	tst.w	r3, sl
 80062da:	e7e1      	b.n	80062a0 <_strtod_l+0x8d8>
 80062dc:	f7ff fb53 	bl	8005986 <sulp>
 80062e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062e4:	ec53 2b10 	vmov	r2, r3, d0
 80062e8:	f7f9 fff6 	bl	80002d8 <__aeabi_dsub>
 80062ec:	2200      	movs	r2, #0
 80062ee:	2300      	movs	r3, #0
 80062f0:	4682      	mov	sl, r0
 80062f2:	468b      	mov	fp, r1
 80062f4:	f7fa fc10 	bl	8000b18 <__aeabi_dcmpeq>
 80062f8:	2800      	cmp	r0, #0
 80062fa:	d0c1      	beq.n	8006280 <_strtod_l+0x8b8>
 80062fc:	e619      	b.n	8005f32 <_strtod_l+0x56a>
 80062fe:	4641      	mov	r1, r8
 8006300:	4620      	mov	r0, r4
 8006302:	f001 fc07 	bl	8007b14 <__ratio>
 8006306:	ec57 6b10 	vmov	r6, r7, d0
 800630a:	2200      	movs	r2, #0
 800630c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006310:	4630      	mov	r0, r6
 8006312:	4639      	mov	r1, r7
 8006314:	f7fa fc14 	bl	8000b40 <__aeabi_dcmple>
 8006318:	2800      	cmp	r0, #0
 800631a:	d06f      	beq.n	80063fc <_strtod_l+0xa34>
 800631c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800631e:	2b00      	cmp	r3, #0
 8006320:	d17a      	bne.n	8006418 <_strtod_l+0xa50>
 8006322:	f1ba 0f00 	cmp.w	sl, #0
 8006326:	d158      	bne.n	80063da <_strtod_l+0xa12>
 8006328:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800632a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800632e:	2b00      	cmp	r3, #0
 8006330:	d15a      	bne.n	80063e8 <_strtod_l+0xa20>
 8006332:	4b64      	ldr	r3, [pc, #400]	@ (80064c4 <_strtod_l+0xafc>)
 8006334:	2200      	movs	r2, #0
 8006336:	4630      	mov	r0, r6
 8006338:	4639      	mov	r1, r7
 800633a:	f7fa fbf7 	bl	8000b2c <__aeabi_dcmplt>
 800633e:	2800      	cmp	r0, #0
 8006340:	d159      	bne.n	80063f6 <_strtod_l+0xa2e>
 8006342:	4630      	mov	r0, r6
 8006344:	4639      	mov	r1, r7
 8006346:	4b60      	ldr	r3, [pc, #384]	@ (80064c8 <_strtod_l+0xb00>)
 8006348:	2200      	movs	r2, #0
 800634a:	f7fa f97d 	bl	8000648 <__aeabi_dmul>
 800634e:	4606      	mov	r6, r0
 8006350:	460f      	mov	r7, r1
 8006352:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006356:	9606      	str	r6, [sp, #24]
 8006358:	9307      	str	r3, [sp, #28]
 800635a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800635e:	4d57      	ldr	r5, [pc, #348]	@ (80064bc <_strtod_l+0xaf4>)
 8006360:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006364:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006366:	401d      	ands	r5, r3
 8006368:	4b58      	ldr	r3, [pc, #352]	@ (80064cc <_strtod_l+0xb04>)
 800636a:	429d      	cmp	r5, r3
 800636c:	f040 80b2 	bne.w	80064d4 <_strtod_l+0xb0c>
 8006370:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006372:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006376:	ec4b ab10 	vmov	d0, sl, fp
 800637a:	f001 fb03 	bl	8007984 <__ulp>
 800637e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006382:	ec51 0b10 	vmov	r0, r1, d0
 8006386:	f7fa f95f 	bl	8000648 <__aeabi_dmul>
 800638a:	4652      	mov	r2, sl
 800638c:	465b      	mov	r3, fp
 800638e:	f7f9 ffa5 	bl	80002dc <__adddf3>
 8006392:	460b      	mov	r3, r1
 8006394:	4949      	ldr	r1, [pc, #292]	@ (80064bc <_strtod_l+0xaf4>)
 8006396:	4a4e      	ldr	r2, [pc, #312]	@ (80064d0 <_strtod_l+0xb08>)
 8006398:	4019      	ands	r1, r3
 800639a:	4291      	cmp	r1, r2
 800639c:	4682      	mov	sl, r0
 800639e:	d942      	bls.n	8006426 <_strtod_l+0xa5e>
 80063a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80063a2:	4b47      	ldr	r3, [pc, #284]	@ (80064c0 <_strtod_l+0xaf8>)
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d103      	bne.n	80063b0 <_strtod_l+0x9e8>
 80063a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80063aa:	3301      	adds	r3, #1
 80063ac:	f43f ad2b 	beq.w	8005e06 <_strtod_l+0x43e>
 80063b0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80064c0 <_strtod_l+0xaf8>
 80063b4:	f04f 3aff 	mov.w	sl, #4294967295
 80063b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80063ba:	9805      	ldr	r0, [sp, #20]
 80063bc:	f000 ffae 	bl	800731c <_Bfree>
 80063c0:	9805      	ldr	r0, [sp, #20]
 80063c2:	4649      	mov	r1, r9
 80063c4:	f000 ffaa 	bl	800731c <_Bfree>
 80063c8:	9805      	ldr	r0, [sp, #20]
 80063ca:	4641      	mov	r1, r8
 80063cc:	f000 ffa6 	bl	800731c <_Bfree>
 80063d0:	9805      	ldr	r0, [sp, #20]
 80063d2:	4621      	mov	r1, r4
 80063d4:	f000 ffa2 	bl	800731c <_Bfree>
 80063d8:	e618      	b.n	800600c <_strtod_l+0x644>
 80063da:	f1ba 0f01 	cmp.w	sl, #1
 80063de:	d103      	bne.n	80063e8 <_strtod_l+0xa20>
 80063e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f43f ada5 	beq.w	8005f32 <_strtod_l+0x56a>
 80063e8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006498 <_strtod_l+0xad0>
 80063ec:	4f35      	ldr	r7, [pc, #212]	@ (80064c4 <_strtod_l+0xafc>)
 80063ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80063f2:	2600      	movs	r6, #0
 80063f4:	e7b1      	b.n	800635a <_strtod_l+0x992>
 80063f6:	4f34      	ldr	r7, [pc, #208]	@ (80064c8 <_strtod_l+0xb00>)
 80063f8:	2600      	movs	r6, #0
 80063fa:	e7aa      	b.n	8006352 <_strtod_l+0x98a>
 80063fc:	4b32      	ldr	r3, [pc, #200]	@ (80064c8 <_strtod_l+0xb00>)
 80063fe:	4630      	mov	r0, r6
 8006400:	4639      	mov	r1, r7
 8006402:	2200      	movs	r2, #0
 8006404:	f7fa f920 	bl	8000648 <__aeabi_dmul>
 8006408:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800640a:	4606      	mov	r6, r0
 800640c:	460f      	mov	r7, r1
 800640e:	2b00      	cmp	r3, #0
 8006410:	d09f      	beq.n	8006352 <_strtod_l+0x98a>
 8006412:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006416:	e7a0      	b.n	800635a <_strtod_l+0x992>
 8006418:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80064a0 <_strtod_l+0xad8>
 800641c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006420:	ec57 6b17 	vmov	r6, r7, d7
 8006424:	e799      	b.n	800635a <_strtod_l+0x992>
 8006426:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800642a:	9b08      	ldr	r3, [sp, #32]
 800642c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1c1      	bne.n	80063b8 <_strtod_l+0x9f0>
 8006434:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006438:	0d1b      	lsrs	r3, r3, #20
 800643a:	051b      	lsls	r3, r3, #20
 800643c:	429d      	cmp	r5, r3
 800643e:	d1bb      	bne.n	80063b8 <_strtod_l+0x9f0>
 8006440:	4630      	mov	r0, r6
 8006442:	4639      	mov	r1, r7
 8006444:	f7fa fbfa 	bl	8000c3c <__aeabi_d2lz>
 8006448:	f7fa f8d0 	bl	80005ec <__aeabi_l2d>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	4630      	mov	r0, r6
 8006452:	4639      	mov	r1, r7
 8006454:	f7f9 ff40 	bl	80002d8 <__aeabi_dsub>
 8006458:	460b      	mov	r3, r1
 800645a:	4602      	mov	r2, r0
 800645c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006460:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006464:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006466:	ea46 060a 	orr.w	r6, r6, sl
 800646a:	431e      	orrs	r6, r3
 800646c:	d06f      	beq.n	800654e <_strtod_l+0xb86>
 800646e:	a30e      	add	r3, pc, #56	@ (adr r3, 80064a8 <_strtod_l+0xae0>)
 8006470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006474:	f7fa fb5a 	bl	8000b2c <__aeabi_dcmplt>
 8006478:	2800      	cmp	r0, #0
 800647a:	f47f accf 	bne.w	8005e1c <_strtod_l+0x454>
 800647e:	a30c      	add	r3, pc, #48	@ (adr r3, 80064b0 <_strtod_l+0xae8>)
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006488:	f7fa fb6e 	bl	8000b68 <__aeabi_dcmpgt>
 800648c:	2800      	cmp	r0, #0
 800648e:	d093      	beq.n	80063b8 <_strtod_l+0x9f0>
 8006490:	e4c4      	b.n	8005e1c <_strtod_l+0x454>
 8006492:	bf00      	nop
 8006494:	f3af 8000 	nop.w
 8006498:	00000000 	.word	0x00000000
 800649c:	bff00000 	.word	0xbff00000
 80064a0:	00000000 	.word	0x00000000
 80064a4:	3ff00000 	.word	0x3ff00000
 80064a8:	94a03595 	.word	0x94a03595
 80064ac:	3fdfffff 	.word	0x3fdfffff
 80064b0:	35afe535 	.word	0x35afe535
 80064b4:	3fe00000 	.word	0x3fe00000
 80064b8:	000fffff 	.word	0x000fffff
 80064bc:	7ff00000 	.word	0x7ff00000
 80064c0:	7fefffff 	.word	0x7fefffff
 80064c4:	3ff00000 	.word	0x3ff00000
 80064c8:	3fe00000 	.word	0x3fe00000
 80064cc:	7fe00000 	.word	0x7fe00000
 80064d0:	7c9fffff 	.word	0x7c9fffff
 80064d4:	9b08      	ldr	r3, [sp, #32]
 80064d6:	b323      	cbz	r3, 8006522 <_strtod_l+0xb5a>
 80064d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80064dc:	d821      	bhi.n	8006522 <_strtod_l+0xb5a>
 80064de:	a328      	add	r3, pc, #160	@ (adr r3, 8006580 <_strtod_l+0xbb8>)
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	4630      	mov	r0, r6
 80064e6:	4639      	mov	r1, r7
 80064e8:	f7fa fb2a 	bl	8000b40 <__aeabi_dcmple>
 80064ec:	b1a0      	cbz	r0, 8006518 <_strtod_l+0xb50>
 80064ee:	4639      	mov	r1, r7
 80064f0:	4630      	mov	r0, r6
 80064f2:	f7fa fb6b 	bl	8000bcc <__aeabi_d2uiz>
 80064f6:	2801      	cmp	r0, #1
 80064f8:	bf38      	it	cc
 80064fa:	2001      	movcc	r0, #1
 80064fc:	f7fa f82a 	bl	8000554 <__aeabi_ui2d>
 8006500:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006502:	4606      	mov	r6, r0
 8006504:	460f      	mov	r7, r1
 8006506:	b9fb      	cbnz	r3, 8006548 <_strtod_l+0xb80>
 8006508:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800650c:	9014      	str	r0, [sp, #80]	@ 0x50
 800650e:	9315      	str	r3, [sp, #84]	@ 0x54
 8006510:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006514:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006518:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800651a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800651e:	1b5b      	subs	r3, r3, r5
 8006520:	9311      	str	r3, [sp, #68]	@ 0x44
 8006522:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006526:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800652a:	f001 fa2b 	bl	8007984 <__ulp>
 800652e:	4650      	mov	r0, sl
 8006530:	ec53 2b10 	vmov	r2, r3, d0
 8006534:	4659      	mov	r1, fp
 8006536:	f7fa f887 	bl	8000648 <__aeabi_dmul>
 800653a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800653e:	f7f9 fecd 	bl	80002dc <__adddf3>
 8006542:	4682      	mov	sl, r0
 8006544:	468b      	mov	fp, r1
 8006546:	e770      	b.n	800642a <_strtod_l+0xa62>
 8006548:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800654c:	e7e0      	b.n	8006510 <_strtod_l+0xb48>
 800654e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006588 <_strtod_l+0xbc0>)
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f7fa faea 	bl	8000b2c <__aeabi_dcmplt>
 8006558:	e798      	b.n	800648c <_strtod_l+0xac4>
 800655a:	2300      	movs	r3, #0
 800655c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800655e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006560:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006562:	6013      	str	r3, [r2, #0]
 8006564:	f7ff ba6d 	b.w	8005a42 <_strtod_l+0x7a>
 8006568:	2a65      	cmp	r2, #101	@ 0x65
 800656a:	f43f ab66 	beq.w	8005c3a <_strtod_l+0x272>
 800656e:	2a45      	cmp	r2, #69	@ 0x45
 8006570:	f43f ab63 	beq.w	8005c3a <_strtod_l+0x272>
 8006574:	2301      	movs	r3, #1
 8006576:	f7ff bb9e 	b.w	8005cb6 <_strtod_l+0x2ee>
 800657a:	bf00      	nop
 800657c:	f3af 8000 	nop.w
 8006580:	ffc00000 	.word	0xffc00000
 8006584:	41dfffff 	.word	0x41dfffff
 8006588:	94a03595 	.word	0x94a03595
 800658c:	3fcfffff 	.word	0x3fcfffff

08006590 <strtod>:
 8006590:	460a      	mov	r2, r1
 8006592:	4601      	mov	r1, r0
 8006594:	4802      	ldr	r0, [pc, #8]	@ (80065a0 <strtod+0x10>)
 8006596:	4b03      	ldr	r3, [pc, #12]	@ (80065a4 <strtod+0x14>)
 8006598:	6800      	ldr	r0, [r0, #0]
 800659a:	f7ff ba15 	b.w	80059c8 <_strtod_l>
 800659e:	bf00      	nop
 80065a0:	200001a4 	.word	0x200001a4
 80065a4:	20000038 	.word	0x20000038

080065a8 <std>:
 80065a8:	2300      	movs	r3, #0
 80065aa:	b510      	push	{r4, lr}
 80065ac:	4604      	mov	r4, r0
 80065ae:	e9c0 3300 	strd	r3, r3, [r0]
 80065b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065b6:	6083      	str	r3, [r0, #8]
 80065b8:	8181      	strh	r1, [r0, #12]
 80065ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80065bc:	81c2      	strh	r2, [r0, #14]
 80065be:	6183      	str	r3, [r0, #24]
 80065c0:	4619      	mov	r1, r3
 80065c2:	2208      	movs	r2, #8
 80065c4:	305c      	adds	r0, #92	@ 0x5c
 80065c6:	f000 f8f4 	bl	80067b2 <memset>
 80065ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006600 <std+0x58>)
 80065cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80065ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006604 <std+0x5c>)
 80065d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80065d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006608 <std+0x60>)
 80065d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80065d6:	4b0d      	ldr	r3, [pc, #52]	@ (800660c <std+0x64>)
 80065d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80065da:	4b0d      	ldr	r3, [pc, #52]	@ (8006610 <std+0x68>)
 80065dc:	6224      	str	r4, [r4, #32]
 80065de:	429c      	cmp	r4, r3
 80065e0:	d006      	beq.n	80065f0 <std+0x48>
 80065e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80065e6:	4294      	cmp	r4, r2
 80065e8:	d002      	beq.n	80065f0 <std+0x48>
 80065ea:	33d0      	adds	r3, #208	@ 0xd0
 80065ec:	429c      	cmp	r4, r3
 80065ee:	d105      	bne.n	80065fc <std+0x54>
 80065f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80065f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065f8:	f000 b9c2 	b.w	8006980 <__retarget_lock_init_recursive>
 80065fc:	bd10      	pop	{r4, pc}
 80065fe:	bf00      	nop
 8006600:	0800672d 	.word	0x0800672d
 8006604:	0800674f 	.word	0x0800674f
 8006608:	08006787 	.word	0x08006787
 800660c:	080067ab 	.word	0x080067ab
 8006610:	200004a8 	.word	0x200004a8

08006614 <stdio_exit_handler>:
 8006614:	4a02      	ldr	r2, [pc, #8]	@ (8006620 <stdio_exit_handler+0xc>)
 8006616:	4903      	ldr	r1, [pc, #12]	@ (8006624 <stdio_exit_handler+0x10>)
 8006618:	4803      	ldr	r0, [pc, #12]	@ (8006628 <stdio_exit_handler+0x14>)
 800661a:	f000 b869 	b.w	80066f0 <_fwalk_sglue>
 800661e:	bf00      	nop
 8006620:	2000002c 	.word	0x2000002c
 8006624:	08007d25 	.word	0x08007d25
 8006628:	200001a8 	.word	0x200001a8

0800662c <cleanup_stdio>:
 800662c:	6841      	ldr	r1, [r0, #4]
 800662e:	4b0c      	ldr	r3, [pc, #48]	@ (8006660 <cleanup_stdio+0x34>)
 8006630:	4299      	cmp	r1, r3
 8006632:	b510      	push	{r4, lr}
 8006634:	4604      	mov	r4, r0
 8006636:	d001      	beq.n	800663c <cleanup_stdio+0x10>
 8006638:	f001 fb74 	bl	8007d24 <_fflush_r>
 800663c:	68a1      	ldr	r1, [r4, #8]
 800663e:	4b09      	ldr	r3, [pc, #36]	@ (8006664 <cleanup_stdio+0x38>)
 8006640:	4299      	cmp	r1, r3
 8006642:	d002      	beq.n	800664a <cleanup_stdio+0x1e>
 8006644:	4620      	mov	r0, r4
 8006646:	f001 fb6d 	bl	8007d24 <_fflush_r>
 800664a:	68e1      	ldr	r1, [r4, #12]
 800664c:	4b06      	ldr	r3, [pc, #24]	@ (8006668 <cleanup_stdio+0x3c>)
 800664e:	4299      	cmp	r1, r3
 8006650:	d004      	beq.n	800665c <cleanup_stdio+0x30>
 8006652:	4620      	mov	r0, r4
 8006654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006658:	f001 bb64 	b.w	8007d24 <_fflush_r>
 800665c:	bd10      	pop	{r4, pc}
 800665e:	bf00      	nop
 8006660:	200004a8 	.word	0x200004a8
 8006664:	20000510 	.word	0x20000510
 8006668:	20000578 	.word	0x20000578

0800666c <global_stdio_init.part.0>:
 800666c:	b510      	push	{r4, lr}
 800666e:	4b0b      	ldr	r3, [pc, #44]	@ (800669c <global_stdio_init.part.0+0x30>)
 8006670:	4c0b      	ldr	r4, [pc, #44]	@ (80066a0 <global_stdio_init.part.0+0x34>)
 8006672:	4a0c      	ldr	r2, [pc, #48]	@ (80066a4 <global_stdio_init.part.0+0x38>)
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	4620      	mov	r0, r4
 8006678:	2200      	movs	r2, #0
 800667a:	2104      	movs	r1, #4
 800667c:	f7ff ff94 	bl	80065a8 <std>
 8006680:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006684:	2201      	movs	r2, #1
 8006686:	2109      	movs	r1, #9
 8006688:	f7ff ff8e 	bl	80065a8 <std>
 800668c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006690:	2202      	movs	r2, #2
 8006692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006696:	2112      	movs	r1, #18
 8006698:	f7ff bf86 	b.w	80065a8 <std>
 800669c:	200005e0 	.word	0x200005e0
 80066a0:	200004a8 	.word	0x200004a8
 80066a4:	08006615 	.word	0x08006615

080066a8 <__sfp_lock_acquire>:
 80066a8:	4801      	ldr	r0, [pc, #4]	@ (80066b0 <__sfp_lock_acquire+0x8>)
 80066aa:	f000 b96a 	b.w	8006982 <__retarget_lock_acquire_recursive>
 80066ae:	bf00      	nop
 80066b0:	200005e9 	.word	0x200005e9

080066b4 <__sfp_lock_release>:
 80066b4:	4801      	ldr	r0, [pc, #4]	@ (80066bc <__sfp_lock_release+0x8>)
 80066b6:	f000 b965 	b.w	8006984 <__retarget_lock_release_recursive>
 80066ba:	bf00      	nop
 80066bc:	200005e9 	.word	0x200005e9

080066c0 <__sinit>:
 80066c0:	b510      	push	{r4, lr}
 80066c2:	4604      	mov	r4, r0
 80066c4:	f7ff fff0 	bl	80066a8 <__sfp_lock_acquire>
 80066c8:	6a23      	ldr	r3, [r4, #32]
 80066ca:	b11b      	cbz	r3, 80066d4 <__sinit+0x14>
 80066cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d0:	f7ff bff0 	b.w	80066b4 <__sfp_lock_release>
 80066d4:	4b04      	ldr	r3, [pc, #16]	@ (80066e8 <__sinit+0x28>)
 80066d6:	6223      	str	r3, [r4, #32]
 80066d8:	4b04      	ldr	r3, [pc, #16]	@ (80066ec <__sinit+0x2c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1f5      	bne.n	80066cc <__sinit+0xc>
 80066e0:	f7ff ffc4 	bl	800666c <global_stdio_init.part.0>
 80066e4:	e7f2      	b.n	80066cc <__sinit+0xc>
 80066e6:	bf00      	nop
 80066e8:	0800662d 	.word	0x0800662d
 80066ec:	200005e0 	.word	0x200005e0

080066f0 <_fwalk_sglue>:
 80066f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066f4:	4607      	mov	r7, r0
 80066f6:	4688      	mov	r8, r1
 80066f8:	4614      	mov	r4, r2
 80066fa:	2600      	movs	r6, #0
 80066fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006700:	f1b9 0901 	subs.w	r9, r9, #1
 8006704:	d505      	bpl.n	8006712 <_fwalk_sglue+0x22>
 8006706:	6824      	ldr	r4, [r4, #0]
 8006708:	2c00      	cmp	r4, #0
 800670a:	d1f7      	bne.n	80066fc <_fwalk_sglue+0xc>
 800670c:	4630      	mov	r0, r6
 800670e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006712:	89ab      	ldrh	r3, [r5, #12]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d907      	bls.n	8006728 <_fwalk_sglue+0x38>
 8006718:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800671c:	3301      	adds	r3, #1
 800671e:	d003      	beq.n	8006728 <_fwalk_sglue+0x38>
 8006720:	4629      	mov	r1, r5
 8006722:	4638      	mov	r0, r7
 8006724:	47c0      	blx	r8
 8006726:	4306      	orrs	r6, r0
 8006728:	3568      	adds	r5, #104	@ 0x68
 800672a:	e7e9      	b.n	8006700 <_fwalk_sglue+0x10>

0800672c <__sread>:
 800672c:	b510      	push	{r4, lr}
 800672e:	460c      	mov	r4, r1
 8006730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006734:	f000 f8d6 	bl	80068e4 <_read_r>
 8006738:	2800      	cmp	r0, #0
 800673a:	bfab      	itete	ge
 800673c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800673e:	89a3      	ldrhlt	r3, [r4, #12]
 8006740:	181b      	addge	r3, r3, r0
 8006742:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006746:	bfac      	ite	ge
 8006748:	6563      	strge	r3, [r4, #84]	@ 0x54
 800674a:	81a3      	strhlt	r3, [r4, #12]
 800674c:	bd10      	pop	{r4, pc}

0800674e <__swrite>:
 800674e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006752:	461f      	mov	r7, r3
 8006754:	898b      	ldrh	r3, [r1, #12]
 8006756:	05db      	lsls	r3, r3, #23
 8006758:	4605      	mov	r5, r0
 800675a:	460c      	mov	r4, r1
 800675c:	4616      	mov	r6, r2
 800675e:	d505      	bpl.n	800676c <__swrite+0x1e>
 8006760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006764:	2302      	movs	r3, #2
 8006766:	2200      	movs	r2, #0
 8006768:	f000 f8aa 	bl	80068c0 <_lseek_r>
 800676c:	89a3      	ldrh	r3, [r4, #12]
 800676e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006772:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006776:	81a3      	strh	r3, [r4, #12]
 8006778:	4632      	mov	r2, r6
 800677a:	463b      	mov	r3, r7
 800677c:	4628      	mov	r0, r5
 800677e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006782:	f000 b8c1 	b.w	8006908 <_write_r>

08006786 <__sseek>:
 8006786:	b510      	push	{r4, lr}
 8006788:	460c      	mov	r4, r1
 800678a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800678e:	f000 f897 	bl	80068c0 <_lseek_r>
 8006792:	1c43      	adds	r3, r0, #1
 8006794:	89a3      	ldrh	r3, [r4, #12]
 8006796:	bf15      	itete	ne
 8006798:	6560      	strne	r0, [r4, #84]	@ 0x54
 800679a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800679e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80067a2:	81a3      	strheq	r3, [r4, #12]
 80067a4:	bf18      	it	ne
 80067a6:	81a3      	strhne	r3, [r4, #12]
 80067a8:	bd10      	pop	{r4, pc}

080067aa <__sclose>:
 80067aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ae:	f000 b877 	b.w	80068a0 <_close_r>

080067b2 <memset>:
 80067b2:	4402      	add	r2, r0
 80067b4:	4603      	mov	r3, r0
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d100      	bne.n	80067bc <memset+0xa>
 80067ba:	4770      	bx	lr
 80067bc:	f803 1b01 	strb.w	r1, [r3], #1
 80067c0:	e7f9      	b.n	80067b6 <memset+0x4>

080067c2 <strncmp>:
 80067c2:	b510      	push	{r4, lr}
 80067c4:	b16a      	cbz	r2, 80067e2 <strncmp+0x20>
 80067c6:	3901      	subs	r1, #1
 80067c8:	1884      	adds	r4, r0, r2
 80067ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d103      	bne.n	80067de <strncmp+0x1c>
 80067d6:	42a0      	cmp	r0, r4
 80067d8:	d001      	beq.n	80067de <strncmp+0x1c>
 80067da:	2a00      	cmp	r2, #0
 80067dc:	d1f5      	bne.n	80067ca <strncmp+0x8>
 80067de:	1ad0      	subs	r0, r2, r3
 80067e0:	bd10      	pop	{r4, pc}
 80067e2:	4610      	mov	r0, r2
 80067e4:	e7fc      	b.n	80067e0 <strncmp+0x1e>
	...

080067e8 <strtok>:
 80067e8:	4b16      	ldr	r3, [pc, #88]	@ (8006844 <strtok+0x5c>)
 80067ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ee:	681f      	ldr	r7, [r3, #0]
 80067f0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80067f2:	4605      	mov	r5, r0
 80067f4:	460e      	mov	r6, r1
 80067f6:	b9ec      	cbnz	r4, 8006834 <strtok+0x4c>
 80067f8:	2050      	movs	r0, #80	@ 0x50
 80067fa:	f000 fc87 	bl	800710c <malloc>
 80067fe:	4602      	mov	r2, r0
 8006800:	6478      	str	r0, [r7, #68]	@ 0x44
 8006802:	b920      	cbnz	r0, 800680e <strtok+0x26>
 8006804:	4b10      	ldr	r3, [pc, #64]	@ (8006848 <strtok+0x60>)
 8006806:	4811      	ldr	r0, [pc, #68]	@ (800684c <strtok+0x64>)
 8006808:	215b      	movs	r1, #91	@ 0x5b
 800680a:	f000 f8dd 	bl	80069c8 <__assert_func>
 800680e:	e9c0 4400 	strd	r4, r4, [r0]
 8006812:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006816:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800681a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800681e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8006822:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006826:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800682a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800682e:	6184      	str	r4, [r0, #24]
 8006830:	7704      	strb	r4, [r0, #28]
 8006832:	6244      	str	r4, [r0, #36]	@ 0x24
 8006834:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006836:	4631      	mov	r1, r6
 8006838:	4628      	mov	r0, r5
 800683a:	2301      	movs	r3, #1
 800683c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006840:	f000 b806 	b.w	8006850 <__strtok_r>
 8006844:	200001a4 	.word	0x200001a4
 8006848:	080087b8 	.word	0x080087b8
 800684c:	080087cf 	.word	0x080087cf

08006850 <__strtok_r>:
 8006850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006852:	4604      	mov	r4, r0
 8006854:	b908      	cbnz	r0, 800685a <__strtok_r+0xa>
 8006856:	6814      	ldr	r4, [r2, #0]
 8006858:	b144      	cbz	r4, 800686c <__strtok_r+0x1c>
 800685a:	4620      	mov	r0, r4
 800685c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006860:	460f      	mov	r7, r1
 8006862:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006866:	b91e      	cbnz	r6, 8006870 <__strtok_r+0x20>
 8006868:	b965      	cbnz	r5, 8006884 <__strtok_r+0x34>
 800686a:	6015      	str	r5, [r2, #0]
 800686c:	2000      	movs	r0, #0
 800686e:	e005      	b.n	800687c <__strtok_r+0x2c>
 8006870:	42b5      	cmp	r5, r6
 8006872:	d1f6      	bne.n	8006862 <__strtok_r+0x12>
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1f0      	bne.n	800685a <__strtok_r+0xa>
 8006878:	6014      	str	r4, [r2, #0]
 800687a:	7003      	strb	r3, [r0, #0]
 800687c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800687e:	461c      	mov	r4, r3
 8006880:	e00c      	b.n	800689c <__strtok_r+0x4c>
 8006882:	b915      	cbnz	r5, 800688a <__strtok_r+0x3a>
 8006884:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006888:	460e      	mov	r6, r1
 800688a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800688e:	42ab      	cmp	r3, r5
 8006890:	d1f7      	bne.n	8006882 <__strtok_r+0x32>
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0f3      	beq.n	800687e <__strtok_r+0x2e>
 8006896:	2300      	movs	r3, #0
 8006898:	f804 3c01 	strb.w	r3, [r4, #-1]
 800689c:	6014      	str	r4, [r2, #0]
 800689e:	e7ed      	b.n	800687c <__strtok_r+0x2c>

080068a0 <_close_r>:
 80068a0:	b538      	push	{r3, r4, r5, lr}
 80068a2:	4d06      	ldr	r5, [pc, #24]	@ (80068bc <_close_r+0x1c>)
 80068a4:	2300      	movs	r3, #0
 80068a6:	4604      	mov	r4, r0
 80068a8:	4608      	mov	r0, r1
 80068aa:	602b      	str	r3, [r5, #0]
 80068ac:	f7fc fd52 	bl	8003354 <_close>
 80068b0:	1c43      	adds	r3, r0, #1
 80068b2:	d102      	bne.n	80068ba <_close_r+0x1a>
 80068b4:	682b      	ldr	r3, [r5, #0]
 80068b6:	b103      	cbz	r3, 80068ba <_close_r+0x1a>
 80068b8:	6023      	str	r3, [r4, #0]
 80068ba:	bd38      	pop	{r3, r4, r5, pc}
 80068bc:	200005e4 	.word	0x200005e4

080068c0 <_lseek_r>:
 80068c0:	b538      	push	{r3, r4, r5, lr}
 80068c2:	4d07      	ldr	r5, [pc, #28]	@ (80068e0 <_lseek_r+0x20>)
 80068c4:	4604      	mov	r4, r0
 80068c6:	4608      	mov	r0, r1
 80068c8:	4611      	mov	r1, r2
 80068ca:	2200      	movs	r2, #0
 80068cc:	602a      	str	r2, [r5, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	f7fc fd67 	bl	80033a2 <_lseek>
 80068d4:	1c43      	adds	r3, r0, #1
 80068d6:	d102      	bne.n	80068de <_lseek_r+0x1e>
 80068d8:	682b      	ldr	r3, [r5, #0]
 80068da:	b103      	cbz	r3, 80068de <_lseek_r+0x1e>
 80068dc:	6023      	str	r3, [r4, #0]
 80068de:	bd38      	pop	{r3, r4, r5, pc}
 80068e0:	200005e4 	.word	0x200005e4

080068e4 <_read_r>:
 80068e4:	b538      	push	{r3, r4, r5, lr}
 80068e6:	4d07      	ldr	r5, [pc, #28]	@ (8006904 <_read_r+0x20>)
 80068e8:	4604      	mov	r4, r0
 80068ea:	4608      	mov	r0, r1
 80068ec:	4611      	mov	r1, r2
 80068ee:	2200      	movs	r2, #0
 80068f0:	602a      	str	r2, [r5, #0]
 80068f2:	461a      	mov	r2, r3
 80068f4:	f7fc fcf5 	bl	80032e2 <_read>
 80068f8:	1c43      	adds	r3, r0, #1
 80068fa:	d102      	bne.n	8006902 <_read_r+0x1e>
 80068fc:	682b      	ldr	r3, [r5, #0]
 80068fe:	b103      	cbz	r3, 8006902 <_read_r+0x1e>
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	bd38      	pop	{r3, r4, r5, pc}
 8006904:	200005e4 	.word	0x200005e4

08006908 <_write_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	4d07      	ldr	r5, [pc, #28]	@ (8006928 <_write_r+0x20>)
 800690c:	4604      	mov	r4, r0
 800690e:	4608      	mov	r0, r1
 8006910:	4611      	mov	r1, r2
 8006912:	2200      	movs	r2, #0
 8006914:	602a      	str	r2, [r5, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	f7fc fd00 	bl	800331c <_write>
 800691c:	1c43      	adds	r3, r0, #1
 800691e:	d102      	bne.n	8006926 <_write_r+0x1e>
 8006920:	682b      	ldr	r3, [r5, #0]
 8006922:	b103      	cbz	r3, 8006926 <_write_r+0x1e>
 8006924:	6023      	str	r3, [r4, #0]
 8006926:	bd38      	pop	{r3, r4, r5, pc}
 8006928:	200005e4 	.word	0x200005e4

0800692c <__errno>:
 800692c:	4b01      	ldr	r3, [pc, #4]	@ (8006934 <__errno+0x8>)
 800692e:	6818      	ldr	r0, [r3, #0]
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	200001a4 	.word	0x200001a4

08006938 <__libc_init_array>:
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	4d0d      	ldr	r5, [pc, #52]	@ (8006970 <__libc_init_array+0x38>)
 800693c:	4c0d      	ldr	r4, [pc, #52]	@ (8006974 <__libc_init_array+0x3c>)
 800693e:	1b64      	subs	r4, r4, r5
 8006940:	10a4      	asrs	r4, r4, #2
 8006942:	2600      	movs	r6, #0
 8006944:	42a6      	cmp	r6, r4
 8006946:	d109      	bne.n	800695c <__libc_init_array+0x24>
 8006948:	4d0b      	ldr	r5, [pc, #44]	@ (8006978 <__libc_init_array+0x40>)
 800694a:	4c0c      	ldr	r4, [pc, #48]	@ (800697c <__libc_init_array+0x44>)
 800694c:	f001 fe7a 	bl	8008644 <_init>
 8006950:	1b64      	subs	r4, r4, r5
 8006952:	10a4      	asrs	r4, r4, #2
 8006954:	2600      	movs	r6, #0
 8006956:	42a6      	cmp	r6, r4
 8006958:	d105      	bne.n	8006966 <__libc_init_array+0x2e>
 800695a:	bd70      	pop	{r4, r5, r6, pc}
 800695c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006960:	4798      	blx	r3
 8006962:	3601      	adds	r6, #1
 8006964:	e7ee      	b.n	8006944 <__libc_init_array+0xc>
 8006966:	f855 3b04 	ldr.w	r3, [r5], #4
 800696a:	4798      	blx	r3
 800696c:	3601      	adds	r6, #1
 800696e:	e7f2      	b.n	8006956 <__libc_init_array+0x1e>
 8006970:	08008b74 	.word	0x08008b74
 8006974:	08008b74 	.word	0x08008b74
 8006978:	08008b74 	.word	0x08008b74
 800697c:	08008b78 	.word	0x08008b78

08006980 <__retarget_lock_init_recursive>:
 8006980:	4770      	bx	lr

08006982 <__retarget_lock_acquire_recursive>:
 8006982:	4770      	bx	lr

08006984 <__retarget_lock_release_recursive>:
 8006984:	4770      	bx	lr

08006986 <strcpy>:
 8006986:	4603      	mov	r3, r0
 8006988:	f811 2b01 	ldrb.w	r2, [r1], #1
 800698c:	f803 2b01 	strb.w	r2, [r3], #1
 8006990:	2a00      	cmp	r2, #0
 8006992:	d1f9      	bne.n	8006988 <strcpy+0x2>
 8006994:	4770      	bx	lr

08006996 <memcpy>:
 8006996:	440a      	add	r2, r1
 8006998:	4291      	cmp	r1, r2
 800699a:	f100 33ff 	add.w	r3, r0, #4294967295
 800699e:	d100      	bne.n	80069a2 <memcpy+0xc>
 80069a0:	4770      	bx	lr
 80069a2:	b510      	push	{r4, lr}
 80069a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069ac:	4291      	cmp	r1, r2
 80069ae:	d1f9      	bne.n	80069a4 <memcpy+0xe>
 80069b0:	bd10      	pop	{r4, pc}
 80069b2:	0000      	movs	r0, r0
 80069b4:	0000      	movs	r0, r0
	...

080069b8 <nan>:
 80069b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80069c0 <nan+0x8>
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	00000000 	.word	0x00000000
 80069c4:	7ff80000 	.word	0x7ff80000

080069c8 <__assert_func>:
 80069c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069ca:	4614      	mov	r4, r2
 80069cc:	461a      	mov	r2, r3
 80069ce:	4b09      	ldr	r3, [pc, #36]	@ (80069f4 <__assert_func+0x2c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4605      	mov	r5, r0
 80069d4:	68d8      	ldr	r0, [r3, #12]
 80069d6:	b954      	cbnz	r4, 80069ee <__assert_func+0x26>
 80069d8:	4b07      	ldr	r3, [pc, #28]	@ (80069f8 <__assert_func+0x30>)
 80069da:	461c      	mov	r4, r3
 80069dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80069e0:	9100      	str	r1, [sp, #0]
 80069e2:	462b      	mov	r3, r5
 80069e4:	4905      	ldr	r1, [pc, #20]	@ (80069fc <__assert_func+0x34>)
 80069e6:	f001 f9c5 	bl	8007d74 <fiprintf>
 80069ea:	f001 f9e5 	bl	8007db8 <abort>
 80069ee:	4b04      	ldr	r3, [pc, #16]	@ (8006a00 <__assert_func+0x38>)
 80069f0:	e7f4      	b.n	80069dc <__assert_func+0x14>
 80069f2:	bf00      	nop
 80069f4:	200001a4 	.word	0x200001a4
 80069f8:	0800886c 	.word	0x0800886c
 80069fc:	0800883e 	.word	0x0800883e
 8006a00:	08008831 	.word	0x08008831

08006a04 <_free_r>:
 8006a04:	b538      	push	{r3, r4, r5, lr}
 8006a06:	4605      	mov	r5, r0
 8006a08:	2900      	cmp	r1, #0
 8006a0a:	d041      	beq.n	8006a90 <_free_r+0x8c>
 8006a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a10:	1f0c      	subs	r4, r1, #4
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	bfb8      	it	lt
 8006a16:	18e4      	addlt	r4, r4, r3
 8006a18:	f000 fc34 	bl	8007284 <__malloc_lock>
 8006a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8006a94 <_free_r+0x90>)
 8006a1e:	6813      	ldr	r3, [r2, #0]
 8006a20:	b933      	cbnz	r3, 8006a30 <_free_r+0x2c>
 8006a22:	6063      	str	r3, [r4, #4]
 8006a24:	6014      	str	r4, [r2, #0]
 8006a26:	4628      	mov	r0, r5
 8006a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a2c:	f000 bc30 	b.w	8007290 <__malloc_unlock>
 8006a30:	42a3      	cmp	r3, r4
 8006a32:	d908      	bls.n	8006a46 <_free_r+0x42>
 8006a34:	6820      	ldr	r0, [r4, #0]
 8006a36:	1821      	adds	r1, r4, r0
 8006a38:	428b      	cmp	r3, r1
 8006a3a:	bf01      	itttt	eq
 8006a3c:	6819      	ldreq	r1, [r3, #0]
 8006a3e:	685b      	ldreq	r3, [r3, #4]
 8006a40:	1809      	addeq	r1, r1, r0
 8006a42:	6021      	streq	r1, [r4, #0]
 8006a44:	e7ed      	b.n	8006a22 <_free_r+0x1e>
 8006a46:	461a      	mov	r2, r3
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	b10b      	cbz	r3, 8006a50 <_free_r+0x4c>
 8006a4c:	42a3      	cmp	r3, r4
 8006a4e:	d9fa      	bls.n	8006a46 <_free_r+0x42>
 8006a50:	6811      	ldr	r1, [r2, #0]
 8006a52:	1850      	adds	r0, r2, r1
 8006a54:	42a0      	cmp	r0, r4
 8006a56:	d10b      	bne.n	8006a70 <_free_r+0x6c>
 8006a58:	6820      	ldr	r0, [r4, #0]
 8006a5a:	4401      	add	r1, r0
 8006a5c:	1850      	adds	r0, r2, r1
 8006a5e:	4283      	cmp	r3, r0
 8006a60:	6011      	str	r1, [r2, #0]
 8006a62:	d1e0      	bne.n	8006a26 <_free_r+0x22>
 8006a64:	6818      	ldr	r0, [r3, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	6053      	str	r3, [r2, #4]
 8006a6a:	4408      	add	r0, r1
 8006a6c:	6010      	str	r0, [r2, #0]
 8006a6e:	e7da      	b.n	8006a26 <_free_r+0x22>
 8006a70:	d902      	bls.n	8006a78 <_free_r+0x74>
 8006a72:	230c      	movs	r3, #12
 8006a74:	602b      	str	r3, [r5, #0]
 8006a76:	e7d6      	b.n	8006a26 <_free_r+0x22>
 8006a78:	6820      	ldr	r0, [r4, #0]
 8006a7a:	1821      	adds	r1, r4, r0
 8006a7c:	428b      	cmp	r3, r1
 8006a7e:	bf04      	itt	eq
 8006a80:	6819      	ldreq	r1, [r3, #0]
 8006a82:	685b      	ldreq	r3, [r3, #4]
 8006a84:	6063      	str	r3, [r4, #4]
 8006a86:	bf04      	itt	eq
 8006a88:	1809      	addeq	r1, r1, r0
 8006a8a:	6021      	streq	r1, [r4, #0]
 8006a8c:	6054      	str	r4, [r2, #4]
 8006a8e:	e7ca      	b.n	8006a26 <_free_r+0x22>
 8006a90:	bd38      	pop	{r3, r4, r5, pc}
 8006a92:	bf00      	nop
 8006a94:	200005f0 	.word	0x200005f0

08006a98 <rshift>:
 8006a98:	6903      	ldr	r3, [r0, #16]
 8006a9a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006a9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006aa2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006aa6:	f100 0414 	add.w	r4, r0, #20
 8006aaa:	dd45      	ble.n	8006b38 <rshift+0xa0>
 8006aac:	f011 011f 	ands.w	r1, r1, #31
 8006ab0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006ab4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006ab8:	d10c      	bne.n	8006ad4 <rshift+0x3c>
 8006aba:	f100 0710 	add.w	r7, r0, #16
 8006abe:	4629      	mov	r1, r5
 8006ac0:	42b1      	cmp	r1, r6
 8006ac2:	d334      	bcc.n	8006b2e <rshift+0x96>
 8006ac4:	1a9b      	subs	r3, r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	1eea      	subs	r2, r5, #3
 8006aca:	4296      	cmp	r6, r2
 8006acc:	bf38      	it	cc
 8006ace:	2300      	movcc	r3, #0
 8006ad0:	4423      	add	r3, r4
 8006ad2:	e015      	b.n	8006b00 <rshift+0x68>
 8006ad4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006ad8:	f1c1 0820 	rsb	r8, r1, #32
 8006adc:	40cf      	lsrs	r7, r1
 8006ade:	f105 0e04 	add.w	lr, r5, #4
 8006ae2:	46a1      	mov	r9, r4
 8006ae4:	4576      	cmp	r6, lr
 8006ae6:	46f4      	mov	ip, lr
 8006ae8:	d815      	bhi.n	8006b16 <rshift+0x7e>
 8006aea:	1a9a      	subs	r2, r3, r2
 8006aec:	0092      	lsls	r2, r2, #2
 8006aee:	3a04      	subs	r2, #4
 8006af0:	3501      	adds	r5, #1
 8006af2:	42ae      	cmp	r6, r5
 8006af4:	bf38      	it	cc
 8006af6:	2200      	movcc	r2, #0
 8006af8:	18a3      	adds	r3, r4, r2
 8006afa:	50a7      	str	r7, [r4, r2]
 8006afc:	b107      	cbz	r7, 8006b00 <rshift+0x68>
 8006afe:	3304      	adds	r3, #4
 8006b00:	1b1a      	subs	r2, r3, r4
 8006b02:	42a3      	cmp	r3, r4
 8006b04:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006b08:	bf08      	it	eq
 8006b0a:	2300      	moveq	r3, #0
 8006b0c:	6102      	str	r2, [r0, #16]
 8006b0e:	bf08      	it	eq
 8006b10:	6143      	streq	r3, [r0, #20]
 8006b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b16:	f8dc c000 	ldr.w	ip, [ip]
 8006b1a:	fa0c fc08 	lsl.w	ip, ip, r8
 8006b1e:	ea4c 0707 	orr.w	r7, ip, r7
 8006b22:	f849 7b04 	str.w	r7, [r9], #4
 8006b26:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006b2a:	40cf      	lsrs	r7, r1
 8006b2c:	e7da      	b.n	8006ae4 <rshift+0x4c>
 8006b2e:	f851 cb04 	ldr.w	ip, [r1], #4
 8006b32:	f847 cf04 	str.w	ip, [r7, #4]!
 8006b36:	e7c3      	b.n	8006ac0 <rshift+0x28>
 8006b38:	4623      	mov	r3, r4
 8006b3a:	e7e1      	b.n	8006b00 <rshift+0x68>

08006b3c <__hexdig_fun>:
 8006b3c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006b40:	2b09      	cmp	r3, #9
 8006b42:	d802      	bhi.n	8006b4a <__hexdig_fun+0xe>
 8006b44:	3820      	subs	r0, #32
 8006b46:	b2c0      	uxtb	r0, r0
 8006b48:	4770      	bx	lr
 8006b4a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006b4e:	2b05      	cmp	r3, #5
 8006b50:	d801      	bhi.n	8006b56 <__hexdig_fun+0x1a>
 8006b52:	3847      	subs	r0, #71	@ 0x47
 8006b54:	e7f7      	b.n	8006b46 <__hexdig_fun+0xa>
 8006b56:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006b5a:	2b05      	cmp	r3, #5
 8006b5c:	d801      	bhi.n	8006b62 <__hexdig_fun+0x26>
 8006b5e:	3827      	subs	r0, #39	@ 0x27
 8006b60:	e7f1      	b.n	8006b46 <__hexdig_fun+0xa>
 8006b62:	2000      	movs	r0, #0
 8006b64:	4770      	bx	lr
	...

08006b68 <__gethex>:
 8006b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6c:	b085      	sub	sp, #20
 8006b6e:	468a      	mov	sl, r1
 8006b70:	9302      	str	r3, [sp, #8]
 8006b72:	680b      	ldr	r3, [r1, #0]
 8006b74:	9001      	str	r0, [sp, #4]
 8006b76:	4690      	mov	r8, r2
 8006b78:	1c9c      	adds	r4, r3, #2
 8006b7a:	46a1      	mov	r9, r4
 8006b7c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006b80:	2830      	cmp	r0, #48	@ 0x30
 8006b82:	d0fa      	beq.n	8006b7a <__gethex+0x12>
 8006b84:	eba9 0303 	sub.w	r3, r9, r3
 8006b88:	f1a3 0b02 	sub.w	fp, r3, #2
 8006b8c:	f7ff ffd6 	bl	8006b3c <__hexdig_fun>
 8006b90:	4605      	mov	r5, r0
 8006b92:	2800      	cmp	r0, #0
 8006b94:	d168      	bne.n	8006c68 <__gethex+0x100>
 8006b96:	49a0      	ldr	r1, [pc, #640]	@ (8006e18 <__gethex+0x2b0>)
 8006b98:	2201      	movs	r2, #1
 8006b9a:	4648      	mov	r0, r9
 8006b9c:	f7ff fe11 	bl	80067c2 <strncmp>
 8006ba0:	4607      	mov	r7, r0
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d167      	bne.n	8006c76 <__gethex+0x10e>
 8006ba6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006baa:	4626      	mov	r6, r4
 8006bac:	f7ff ffc6 	bl	8006b3c <__hexdig_fun>
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	d062      	beq.n	8006c7a <__gethex+0x112>
 8006bb4:	4623      	mov	r3, r4
 8006bb6:	7818      	ldrb	r0, [r3, #0]
 8006bb8:	2830      	cmp	r0, #48	@ 0x30
 8006bba:	4699      	mov	r9, r3
 8006bbc:	f103 0301 	add.w	r3, r3, #1
 8006bc0:	d0f9      	beq.n	8006bb6 <__gethex+0x4e>
 8006bc2:	f7ff ffbb 	bl	8006b3c <__hexdig_fun>
 8006bc6:	fab0 f580 	clz	r5, r0
 8006bca:	096d      	lsrs	r5, r5, #5
 8006bcc:	f04f 0b01 	mov.w	fp, #1
 8006bd0:	464a      	mov	r2, r9
 8006bd2:	4616      	mov	r6, r2
 8006bd4:	3201      	adds	r2, #1
 8006bd6:	7830      	ldrb	r0, [r6, #0]
 8006bd8:	f7ff ffb0 	bl	8006b3c <__hexdig_fun>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	d1f8      	bne.n	8006bd2 <__gethex+0x6a>
 8006be0:	498d      	ldr	r1, [pc, #564]	@ (8006e18 <__gethex+0x2b0>)
 8006be2:	2201      	movs	r2, #1
 8006be4:	4630      	mov	r0, r6
 8006be6:	f7ff fdec 	bl	80067c2 <strncmp>
 8006bea:	2800      	cmp	r0, #0
 8006bec:	d13f      	bne.n	8006c6e <__gethex+0x106>
 8006bee:	b944      	cbnz	r4, 8006c02 <__gethex+0x9a>
 8006bf0:	1c74      	adds	r4, r6, #1
 8006bf2:	4622      	mov	r2, r4
 8006bf4:	4616      	mov	r6, r2
 8006bf6:	3201      	adds	r2, #1
 8006bf8:	7830      	ldrb	r0, [r6, #0]
 8006bfa:	f7ff ff9f 	bl	8006b3c <__hexdig_fun>
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	d1f8      	bne.n	8006bf4 <__gethex+0x8c>
 8006c02:	1ba4      	subs	r4, r4, r6
 8006c04:	00a7      	lsls	r7, r4, #2
 8006c06:	7833      	ldrb	r3, [r6, #0]
 8006c08:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006c0c:	2b50      	cmp	r3, #80	@ 0x50
 8006c0e:	d13e      	bne.n	8006c8e <__gethex+0x126>
 8006c10:	7873      	ldrb	r3, [r6, #1]
 8006c12:	2b2b      	cmp	r3, #43	@ 0x2b
 8006c14:	d033      	beq.n	8006c7e <__gethex+0x116>
 8006c16:	2b2d      	cmp	r3, #45	@ 0x2d
 8006c18:	d034      	beq.n	8006c84 <__gethex+0x11c>
 8006c1a:	1c71      	adds	r1, r6, #1
 8006c1c:	2400      	movs	r4, #0
 8006c1e:	7808      	ldrb	r0, [r1, #0]
 8006c20:	f7ff ff8c 	bl	8006b3c <__hexdig_fun>
 8006c24:	1e43      	subs	r3, r0, #1
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b18      	cmp	r3, #24
 8006c2a:	d830      	bhi.n	8006c8e <__gethex+0x126>
 8006c2c:	f1a0 0210 	sub.w	r2, r0, #16
 8006c30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006c34:	f7ff ff82 	bl	8006b3c <__hexdig_fun>
 8006c38:	f100 3cff 	add.w	ip, r0, #4294967295
 8006c3c:	fa5f fc8c 	uxtb.w	ip, ip
 8006c40:	f1bc 0f18 	cmp.w	ip, #24
 8006c44:	f04f 030a 	mov.w	r3, #10
 8006c48:	d91e      	bls.n	8006c88 <__gethex+0x120>
 8006c4a:	b104      	cbz	r4, 8006c4e <__gethex+0xe6>
 8006c4c:	4252      	negs	r2, r2
 8006c4e:	4417      	add	r7, r2
 8006c50:	f8ca 1000 	str.w	r1, [sl]
 8006c54:	b1ed      	cbz	r5, 8006c92 <__gethex+0x12a>
 8006c56:	f1bb 0f00 	cmp.w	fp, #0
 8006c5a:	bf0c      	ite	eq
 8006c5c:	2506      	moveq	r5, #6
 8006c5e:	2500      	movne	r5, #0
 8006c60:	4628      	mov	r0, r5
 8006c62:	b005      	add	sp, #20
 8006c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c68:	2500      	movs	r5, #0
 8006c6a:	462c      	mov	r4, r5
 8006c6c:	e7b0      	b.n	8006bd0 <__gethex+0x68>
 8006c6e:	2c00      	cmp	r4, #0
 8006c70:	d1c7      	bne.n	8006c02 <__gethex+0x9a>
 8006c72:	4627      	mov	r7, r4
 8006c74:	e7c7      	b.n	8006c06 <__gethex+0x9e>
 8006c76:	464e      	mov	r6, r9
 8006c78:	462f      	mov	r7, r5
 8006c7a:	2501      	movs	r5, #1
 8006c7c:	e7c3      	b.n	8006c06 <__gethex+0x9e>
 8006c7e:	2400      	movs	r4, #0
 8006c80:	1cb1      	adds	r1, r6, #2
 8006c82:	e7cc      	b.n	8006c1e <__gethex+0xb6>
 8006c84:	2401      	movs	r4, #1
 8006c86:	e7fb      	b.n	8006c80 <__gethex+0x118>
 8006c88:	fb03 0002 	mla	r0, r3, r2, r0
 8006c8c:	e7ce      	b.n	8006c2c <__gethex+0xc4>
 8006c8e:	4631      	mov	r1, r6
 8006c90:	e7de      	b.n	8006c50 <__gethex+0xe8>
 8006c92:	eba6 0309 	sub.w	r3, r6, r9
 8006c96:	3b01      	subs	r3, #1
 8006c98:	4629      	mov	r1, r5
 8006c9a:	2b07      	cmp	r3, #7
 8006c9c:	dc0a      	bgt.n	8006cb4 <__gethex+0x14c>
 8006c9e:	9801      	ldr	r0, [sp, #4]
 8006ca0:	f000 fafc 	bl	800729c <_Balloc>
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	b940      	cbnz	r0, 8006cba <__gethex+0x152>
 8006ca8:	4b5c      	ldr	r3, [pc, #368]	@ (8006e1c <__gethex+0x2b4>)
 8006caa:	4602      	mov	r2, r0
 8006cac:	21e4      	movs	r1, #228	@ 0xe4
 8006cae:	485c      	ldr	r0, [pc, #368]	@ (8006e20 <__gethex+0x2b8>)
 8006cb0:	f7ff fe8a 	bl	80069c8 <__assert_func>
 8006cb4:	3101      	adds	r1, #1
 8006cb6:	105b      	asrs	r3, r3, #1
 8006cb8:	e7ef      	b.n	8006c9a <__gethex+0x132>
 8006cba:	f100 0a14 	add.w	sl, r0, #20
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	4655      	mov	r5, sl
 8006cc2:	469b      	mov	fp, r3
 8006cc4:	45b1      	cmp	r9, r6
 8006cc6:	d337      	bcc.n	8006d38 <__gethex+0x1d0>
 8006cc8:	f845 bb04 	str.w	fp, [r5], #4
 8006ccc:	eba5 050a 	sub.w	r5, r5, sl
 8006cd0:	10ad      	asrs	r5, r5, #2
 8006cd2:	6125      	str	r5, [r4, #16]
 8006cd4:	4658      	mov	r0, fp
 8006cd6:	f000 fbd3 	bl	8007480 <__hi0bits>
 8006cda:	016d      	lsls	r5, r5, #5
 8006cdc:	f8d8 6000 	ldr.w	r6, [r8]
 8006ce0:	1a2d      	subs	r5, r5, r0
 8006ce2:	42b5      	cmp	r5, r6
 8006ce4:	dd54      	ble.n	8006d90 <__gethex+0x228>
 8006ce6:	1bad      	subs	r5, r5, r6
 8006ce8:	4629      	mov	r1, r5
 8006cea:	4620      	mov	r0, r4
 8006cec:	f000 ff67 	bl	8007bbe <__any_on>
 8006cf0:	4681      	mov	r9, r0
 8006cf2:	b178      	cbz	r0, 8006d14 <__gethex+0x1ac>
 8006cf4:	1e6b      	subs	r3, r5, #1
 8006cf6:	1159      	asrs	r1, r3, #5
 8006cf8:	f003 021f 	and.w	r2, r3, #31
 8006cfc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006d00:	f04f 0901 	mov.w	r9, #1
 8006d04:	fa09 f202 	lsl.w	r2, r9, r2
 8006d08:	420a      	tst	r2, r1
 8006d0a:	d003      	beq.n	8006d14 <__gethex+0x1ac>
 8006d0c:	454b      	cmp	r3, r9
 8006d0e:	dc36      	bgt.n	8006d7e <__gethex+0x216>
 8006d10:	f04f 0902 	mov.w	r9, #2
 8006d14:	4629      	mov	r1, r5
 8006d16:	4620      	mov	r0, r4
 8006d18:	f7ff febe 	bl	8006a98 <rshift>
 8006d1c:	442f      	add	r7, r5
 8006d1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d22:	42bb      	cmp	r3, r7
 8006d24:	da42      	bge.n	8006dac <__gethex+0x244>
 8006d26:	9801      	ldr	r0, [sp, #4]
 8006d28:	4621      	mov	r1, r4
 8006d2a:	f000 faf7 	bl	800731c <_Bfree>
 8006d2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d30:	2300      	movs	r3, #0
 8006d32:	6013      	str	r3, [r2, #0]
 8006d34:	25a3      	movs	r5, #163	@ 0xa3
 8006d36:	e793      	b.n	8006c60 <__gethex+0xf8>
 8006d38:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006d3c:	2a2e      	cmp	r2, #46	@ 0x2e
 8006d3e:	d012      	beq.n	8006d66 <__gethex+0x1fe>
 8006d40:	2b20      	cmp	r3, #32
 8006d42:	d104      	bne.n	8006d4e <__gethex+0x1e6>
 8006d44:	f845 bb04 	str.w	fp, [r5], #4
 8006d48:	f04f 0b00 	mov.w	fp, #0
 8006d4c:	465b      	mov	r3, fp
 8006d4e:	7830      	ldrb	r0, [r6, #0]
 8006d50:	9303      	str	r3, [sp, #12]
 8006d52:	f7ff fef3 	bl	8006b3c <__hexdig_fun>
 8006d56:	9b03      	ldr	r3, [sp, #12]
 8006d58:	f000 000f 	and.w	r0, r0, #15
 8006d5c:	4098      	lsls	r0, r3
 8006d5e:	ea4b 0b00 	orr.w	fp, fp, r0
 8006d62:	3304      	adds	r3, #4
 8006d64:	e7ae      	b.n	8006cc4 <__gethex+0x15c>
 8006d66:	45b1      	cmp	r9, r6
 8006d68:	d8ea      	bhi.n	8006d40 <__gethex+0x1d8>
 8006d6a:	492b      	ldr	r1, [pc, #172]	@ (8006e18 <__gethex+0x2b0>)
 8006d6c:	9303      	str	r3, [sp, #12]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	4630      	mov	r0, r6
 8006d72:	f7ff fd26 	bl	80067c2 <strncmp>
 8006d76:	9b03      	ldr	r3, [sp, #12]
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	d1e1      	bne.n	8006d40 <__gethex+0x1d8>
 8006d7c:	e7a2      	b.n	8006cc4 <__gethex+0x15c>
 8006d7e:	1ea9      	subs	r1, r5, #2
 8006d80:	4620      	mov	r0, r4
 8006d82:	f000 ff1c 	bl	8007bbe <__any_on>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d0c2      	beq.n	8006d10 <__gethex+0x1a8>
 8006d8a:	f04f 0903 	mov.w	r9, #3
 8006d8e:	e7c1      	b.n	8006d14 <__gethex+0x1ac>
 8006d90:	da09      	bge.n	8006da6 <__gethex+0x23e>
 8006d92:	1b75      	subs	r5, r6, r5
 8006d94:	4621      	mov	r1, r4
 8006d96:	9801      	ldr	r0, [sp, #4]
 8006d98:	462a      	mov	r2, r5
 8006d9a:	f000 fcd7 	bl	800774c <__lshift>
 8006d9e:	1b7f      	subs	r7, r7, r5
 8006da0:	4604      	mov	r4, r0
 8006da2:	f100 0a14 	add.w	sl, r0, #20
 8006da6:	f04f 0900 	mov.w	r9, #0
 8006daa:	e7b8      	b.n	8006d1e <__gethex+0x1b6>
 8006dac:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006db0:	42bd      	cmp	r5, r7
 8006db2:	dd6f      	ble.n	8006e94 <__gethex+0x32c>
 8006db4:	1bed      	subs	r5, r5, r7
 8006db6:	42ae      	cmp	r6, r5
 8006db8:	dc34      	bgt.n	8006e24 <__gethex+0x2bc>
 8006dba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d022      	beq.n	8006e08 <__gethex+0x2a0>
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d024      	beq.n	8006e10 <__gethex+0x2a8>
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d115      	bne.n	8006df6 <__gethex+0x28e>
 8006dca:	42ae      	cmp	r6, r5
 8006dcc:	d113      	bne.n	8006df6 <__gethex+0x28e>
 8006dce:	2e01      	cmp	r6, #1
 8006dd0:	d10b      	bne.n	8006dea <__gethex+0x282>
 8006dd2:	9a02      	ldr	r2, [sp, #8]
 8006dd4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006dd8:	6013      	str	r3, [r2, #0]
 8006dda:	2301      	movs	r3, #1
 8006ddc:	6123      	str	r3, [r4, #16]
 8006dde:	f8ca 3000 	str.w	r3, [sl]
 8006de2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006de4:	2562      	movs	r5, #98	@ 0x62
 8006de6:	601c      	str	r4, [r3, #0]
 8006de8:	e73a      	b.n	8006c60 <__gethex+0xf8>
 8006dea:	1e71      	subs	r1, r6, #1
 8006dec:	4620      	mov	r0, r4
 8006dee:	f000 fee6 	bl	8007bbe <__any_on>
 8006df2:	2800      	cmp	r0, #0
 8006df4:	d1ed      	bne.n	8006dd2 <__gethex+0x26a>
 8006df6:	9801      	ldr	r0, [sp, #4]
 8006df8:	4621      	mov	r1, r4
 8006dfa:	f000 fa8f 	bl	800731c <_Bfree>
 8006dfe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e00:	2300      	movs	r3, #0
 8006e02:	6013      	str	r3, [r2, #0]
 8006e04:	2550      	movs	r5, #80	@ 0x50
 8006e06:	e72b      	b.n	8006c60 <__gethex+0xf8>
 8006e08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1f3      	bne.n	8006df6 <__gethex+0x28e>
 8006e0e:	e7e0      	b.n	8006dd2 <__gethex+0x26a>
 8006e10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1dd      	bne.n	8006dd2 <__gethex+0x26a>
 8006e16:	e7ee      	b.n	8006df6 <__gethex+0x28e>
 8006e18:	08008754 	.word	0x08008754
 8006e1c:	0800886d 	.word	0x0800886d
 8006e20:	0800887e 	.word	0x0800887e
 8006e24:	1e6f      	subs	r7, r5, #1
 8006e26:	f1b9 0f00 	cmp.w	r9, #0
 8006e2a:	d130      	bne.n	8006e8e <__gethex+0x326>
 8006e2c:	b127      	cbz	r7, 8006e38 <__gethex+0x2d0>
 8006e2e:	4639      	mov	r1, r7
 8006e30:	4620      	mov	r0, r4
 8006e32:	f000 fec4 	bl	8007bbe <__any_on>
 8006e36:	4681      	mov	r9, r0
 8006e38:	117a      	asrs	r2, r7, #5
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006e40:	f007 071f 	and.w	r7, r7, #31
 8006e44:	40bb      	lsls	r3, r7
 8006e46:	4213      	tst	r3, r2
 8006e48:	4629      	mov	r1, r5
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	bf18      	it	ne
 8006e4e:	f049 0902 	orrne.w	r9, r9, #2
 8006e52:	f7ff fe21 	bl	8006a98 <rshift>
 8006e56:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006e5a:	1b76      	subs	r6, r6, r5
 8006e5c:	2502      	movs	r5, #2
 8006e5e:	f1b9 0f00 	cmp.w	r9, #0
 8006e62:	d047      	beq.n	8006ef4 <__gethex+0x38c>
 8006e64:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d015      	beq.n	8006e98 <__gethex+0x330>
 8006e6c:	2b03      	cmp	r3, #3
 8006e6e:	d017      	beq.n	8006ea0 <__gethex+0x338>
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d109      	bne.n	8006e88 <__gethex+0x320>
 8006e74:	f019 0f02 	tst.w	r9, #2
 8006e78:	d006      	beq.n	8006e88 <__gethex+0x320>
 8006e7a:	f8da 3000 	ldr.w	r3, [sl]
 8006e7e:	ea49 0903 	orr.w	r9, r9, r3
 8006e82:	f019 0f01 	tst.w	r9, #1
 8006e86:	d10e      	bne.n	8006ea6 <__gethex+0x33e>
 8006e88:	f045 0510 	orr.w	r5, r5, #16
 8006e8c:	e032      	b.n	8006ef4 <__gethex+0x38c>
 8006e8e:	f04f 0901 	mov.w	r9, #1
 8006e92:	e7d1      	b.n	8006e38 <__gethex+0x2d0>
 8006e94:	2501      	movs	r5, #1
 8006e96:	e7e2      	b.n	8006e5e <__gethex+0x2f6>
 8006e98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e9a:	f1c3 0301 	rsb	r3, r3, #1
 8006e9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006ea0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d0f0      	beq.n	8006e88 <__gethex+0x320>
 8006ea6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006eaa:	f104 0314 	add.w	r3, r4, #20
 8006eae:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006eb2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006eb6:	f04f 0c00 	mov.w	ip, #0
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ec0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006ec4:	d01b      	beq.n	8006efe <__gethex+0x396>
 8006ec6:	3201      	adds	r2, #1
 8006ec8:	6002      	str	r2, [r0, #0]
 8006eca:	2d02      	cmp	r5, #2
 8006ecc:	f104 0314 	add.w	r3, r4, #20
 8006ed0:	d13c      	bne.n	8006f4c <__gethex+0x3e4>
 8006ed2:	f8d8 2000 	ldr.w	r2, [r8]
 8006ed6:	3a01      	subs	r2, #1
 8006ed8:	42b2      	cmp	r2, r6
 8006eda:	d109      	bne.n	8006ef0 <__gethex+0x388>
 8006edc:	1171      	asrs	r1, r6, #5
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ee4:	f006 061f 	and.w	r6, r6, #31
 8006ee8:	fa02 f606 	lsl.w	r6, r2, r6
 8006eec:	421e      	tst	r6, r3
 8006eee:	d13a      	bne.n	8006f66 <__gethex+0x3fe>
 8006ef0:	f045 0520 	orr.w	r5, r5, #32
 8006ef4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ef6:	601c      	str	r4, [r3, #0]
 8006ef8:	9b02      	ldr	r3, [sp, #8]
 8006efa:	601f      	str	r7, [r3, #0]
 8006efc:	e6b0      	b.n	8006c60 <__gethex+0xf8>
 8006efe:	4299      	cmp	r1, r3
 8006f00:	f843 cc04 	str.w	ip, [r3, #-4]
 8006f04:	d8d9      	bhi.n	8006eba <__gethex+0x352>
 8006f06:	68a3      	ldr	r3, [r4, #8]
 8006f08:	459b      	cmp	fp, r3
 8006f0a:	db17      	blt.n	8006f3c <__gethex+0x3d4>
 8006f0c:	6861      	ldr	r1, [r4, #4]
 8006f0e:	9801      	ldr	r0, [sp, #4]
 8006f10:	3101      	adds	r1, #1
 8006f12:	f000 f9c3 	bl	800729c <_Balloc>
 8006f16:	4681      	mov	r9, r0
 8006f18:	b918      	cbnz	r0, 8006f22 <__gethex+0x3ba>
 8006f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8006f84 <__gethex+0x41c>)
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	2184      	movs	r1, #132	@ 0x84
 8006f20:	e6c5      	b.n	8006cae <__gethex+0x146>
 8006f22:	6922      	ldr	r2, [r4, #16]
 8006f24:	3202      	adds	r2, #2
 8006f26:	f104 010c 	add.w	r1, r4, #12
 8006f2a:	0092      	lsls	r2, r2, #2
 8006f2c:	300c      	adds	r0, #12
 8006f2e:	f7ff fd32 	bl	8006996 <memcpy>
 8006f32:	4621      	mov	r1, r4
 8006f34:	9801      	ldr	r0, [sp, #4]
 8006f36:	f000 f9f1 	bl	800731c <_Bfree>
 8006f3a:	464c      	mov	r4, r9
 8006f3c:	6923      	ldr	r3, [r4, #16]
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f44:	6122      	str	r2, [r4, #16]
 8006f46:	2201      	movs	r2, #1
 8006f48:	615a      	str	r2, [r3, #20]
 8006f4a:	e7be      	b.n	8006eca <__gethex+0x362>
 8006f4c:	6922      	ldr	r2, [r4, #16]
 8006f4e:	455a      	cmp	r2, fp
 8006f50:	dd0b      	ble.n	8006f6a <__gethex+0x402>
 8006f52:	2101      	movs	r1, #1
 8006f54:	4620      	mov	r0, r4
 8006f56:	f7ff fd9f 	bl	8006a98 <rshift>
 8006f5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006f5e:	3701      	adds	r7, #1
 8006f60:	42bb      	cmp	r3, r7
 8006f62:	f6ff aee0 	blt.w	8006d26 <__gethex+0x1be>
 8006f66:	2501      	movs	r5, #1
 8006f68:	e7c2      	b.n	8006ef0 <__gethex+0x388>
 8006f6a:	f016 061f 	ands.w	r6, r6, #31
 8006f6e:	d0fa      	beq.n	8006f66 <__gethex+0x3fe>
 8006f70:	4453      	add	r3, sl
 8006f72:	f1c6 0620 	rsb	r6, r6, #32
 8006f76:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006f7a:	f000 fa81 	bl	8007480 <__hi0bits>
 8006f7e:	42b0      	cmp	r0, r6
 8006f80:	dbe7      	blt.n	8006f52 <__gethex+0x3ea>
 8006f82:	e7f0      	b.n	8006f66 <__gethex+0x3fe>
 8006f84:	0800886d 	.word	0x0800886d

08006f88 <L_shift>:
 8006f88:	f1c2 0208 	rsb	r2, r2, #8
 8006f8c:	0092      	lsls	r2, r2, #2
 8006f8e:	b570      	push	{r4, r5, r6, lr}
 8006f90:	f1c2 0620 	rsb	r6, r2, #32
 8006f94:	6843      	ldr	r3, [r0, #4]
 8006f96:	6804      	ldr	r4, [r0, #0]
 8006f98:	fa03 f506 	lsl.w	r5, r3, r6
 8006f9c:	432c      	orrs	r4, r5
 8006f9e:	40d3      	lsrs	r3, r2
 8006fa0:	6004      	str	r4, [r0, #0]
 8006fa2:	f840 3f04 	str.w	r3, [r0, #4]!
 8006fa6:	4288      	cmp	r0, r1
 8006fa8:	d3f4      	bcc.n	8006f94 <L_shift+0xc>
 8006faa:	bd70      	pop	{r4, r5, r6, pc}

08006fac <__match>:
 8006fac:	b530      	push	{r4, r5, lr}
 8006fae:	6803      	ldr	r3, [r0, #0]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fb6:	b914      	cbnz	r4, 8006fbe <__match+0x12>
 8006fb8:	6003      	str	r3, [r0, #0]
 8006fba:	2001      	movs	r0, #1
 8006fbc:	bd30      	pop	{r4, r5, pc}
 8006fbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fc2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8006fc6:	2d19      	cmp	r5, #25
 8006fc8:	bf98      	it	ls
 8006fca:	3220      	addls	r2, #32
 8006fcc:	42a2      	cmp	r2, r4
 8006fce:	d0f0      	beq.n	8006fb2 <__match+0x6>
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	e7f3      	b.n	8006fbc <__match+0x10>

08006fd4 <__hexnan>:
 8006fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd8:	680b      	ldr	r3, [r1, #0]
 8006fda:	6801      	ldr	r1, [r0, #0]
 8006fdc:	115e      	asrs	r6, r3, #5
 8006fde:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006fe2:	f013 031f 	ands.w	r3, r3, #31
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	bf18      	it	ne
 8006fea:	3604      	addne	r6, #4
 8006fec:	2500      	movs	r5, #0
 8006fee:	1f37      	subs	r7, r6, #4
 8006ff0:	4682      	mov	sl, r0
 8006ff2:	4690      	mov	r8, r2
 8006ff4:	9301      	str	r3, [sp, #4]
 8006ff6:	f846 5c04 	str.w	r5, [r6, #-4]
 8006ffa:	46b9      	mov	r9, r7
 8006ffc:	463c      	mov	r4, r7
 8006ffe:	9502      	str	r5, [sp, #8]
 8007000:	46ab      	mov	fp, r5
 8007002:	784a      	ldrb	r2, [r1, #1]
 8007004:	1c4b      	adds	r3, r1, #1
 8007006:	9303      	str	r3, [sp, #12]
 8007008:	b342      	cbz	r2, 800705c <__hexnan+0x88>
 800700a:	4610      	mov	r0, r2
 800700c:	9105      	str	r1, [sp, #20]
 800700e:	9204      	str	r2, [sp, #16]
 8007010:	f7ff fd94 	bl	8006b3c <__hexdig_fun>
 8007014:	2800      	cmp	r0, #0
 8007016:	d151      	bne.n	80070bc <__hexnan+0xe8>
 8007018:	9a04      	ldr	r2, [sp, #16]
 800701a:	9905      	ldr	r1, [sp, #20]
 800701c:	2a20      	cmp	r2, #32
 800701e:	d818      	bhi.n	8007052 <__hexnan+0x7e>
 8007020:	9b02      	ldr	r3, [sp, #8]
 8007022:	459b      	cmp	fp, r3
 8007024:	dd13      	ble.n	800704e <__hexnan+0x7a>
 8007026:	454c      	cmp	r4, r9
 8007028:	d206      	bcs.n	8007038 <__hexnan+0x64>
 800702a:	2d07      	cmp	r5, #7
 800702c:	dc04      	bgt.n	8007038 <__hexnan+0x64>
 800702e:	462a      	mov	r2, r5
 8007030:	4649      	mov	r1, r9
 8007032:	4620      	mov	r0, r4
 8007034:	f7ff ffa8 	bl	8006f88 <L_shift>
 8007038:	4544      	cmp	r4, r8
 800703a:	d952      	bls.n	80070e2 <__hexnan+0x10e>
 800703c:	2300      	movs	r3, #0
 800703e:	f1a4 0904 	sub.w	r9, r4, #4
 8007042:	f844 3c04 	str.w	r3, [r4, #-4]
 8007046:	f8cd b008 	str.w	fp, [sp, #8]
 800704a:	464c      	mov	r4, r9
 800704c:	461d      	mov	r5, r3
 800704e:	9903      	ldr	r1, [sp, #12]
 8007050:	e7d7      	b.n	8007002 <__hexnan+0x2e>
 8007052:	2a29      	cmp	r2, #41	@ 0x29
 8007054:	d157      	bne.n	8007106 <__hexnan+0x132>
 8007056:	3102      	adds	r1, #2
 8007058:	f8ca 1000 	str.w	r1, [sl]
 800705c:	f1bb 0f00 	cmp.w	fp, #0
 8007060:	d051      	beq.n	8007106 <__hexnan+0x132>
 8007062:	454c      	cmp	r4, r9
 8007064:	d206      	bcs.n	8007074 <__hexnan+0xa0>
 8007066:	2d07      	cmp	r5, #7
 8007068:	dc04      	bgt.n	8007074 <__hexnan+0xa0>
 800706a:	462a      	mov	r2, r5
 800706c:	4649      	mov	r1, r9
 800706e:	4620      	mov	r0, r4
 8007070:	f7ff ff8a 	bl	8006f88 <L_shift>
 8007074:	4544      	cmp	r4, r8
 8007076:	d936      	bls.n	80070e6 <__hexnan+0x112>
 8007078:	f1a8 0204 	sub.w	r2, r8, #4
 800707c:	4623      	mov	r3, r4
 800707e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007082:	f842 1f04 	str.w	r1, [r2, #4]!
 8007086:	429f      	cmp	r7, r3
 8007088:	d2f9      	bcs.n	800707e <__hexnan+0xaa>
 800708a:	1b3b      	subs	r3, r7, r4
 800708c:	f023 0303 	bic.w	r3, r3, #3
 8007090:	3304      	adds	r3, #4
 8007092:	3401      	adds	r4, #1
 8007094:	3e03      	subs	r6, #3
 8007096:	42b4      	cmp	r4, r6
 8007098:	bf88      	it	hi
 800709a:	2304      	movhi	r3, #4
 800709c:	4443      	add	r3, r8
 800709e:	2200      	movs	r2, #0
 80070a0:	f843 2b04 	str.w	r2, [r3], #4
 80070a4:	429f      	cmp	r7, r3
 80070a6:	d2fb      	bcs.n	80070a0 <__hexnan+0xcc>
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	b91b      	cbnz	r3, 80070b4 <__hexnan+0xe0>
 80070ac:	4547      	cmp	r7, r8
 80070ae:	d128      	bne.n	8007102 <__hexnan+0x12e>
 80070b0:	2301      	movs	r3, #1
 80070b2:	603b      	str	r3, [r7, #0]
 80070b4:	2005      	movs	r0, #5
 80070b6:	b007      	add	sp, #28
 80070b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070bc:	3501      	adds	r5, #1
 80070be:	2d08      	cmp	r5, #8
 80070c0:	f10b 0b01 	add.w	fp, fp, #1
 80070c4:	dd06      	ble.n	80070d4 <__hexnan+0x100>
 80070c6:	4544      	cmp	r4, r8
 80070c8:	d9c1      	bls.n	800704e <__hexnan+0x7a>
 80070ca:	2300      	movs	r3, #0
 80070cc:	f844 3c04 	str.w	r3, [r4, #-4]
 80070d0:	2501      	movs	r5, #1
 80070d2:	3c04      	subs	r4, #4
 80070d4:	6822      	ldr	r2, [r4, #0]
 80070d6:	f000 000f 	and.w	r0, r0, #15
 80070da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80070de:	6020      	str	r0, [r4, #0]
 80070e0:	e7b5      	b.n	800704e <__hexnan+0x7a>
 80070e2:	2508      	movs	r5, #8
 80070e4:	e7b3      	b.n	800704e <__hexnan+0x7a>
 80070e6:	9b01      	ldr	r3, [sp, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d0dd      	beq.n	80070a8 <__hexnan+0xd4>
 80070ec:	f1c3 0320 	rsb	r3, r3, #32
 80070f0:	f04f 32ff 	mov.w	r2, #4294967295
 80070f4:	40da      	lsrs	r2, r3
 80070f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80070fa:	4013      	ands	r3, r2
 80070fc:	f846 3c04 	str.w	r3, [r6, #-4]
 8007100:	e7d2      	b.n	80070a8 <__hexnan+0xd4>
 8007102:	3f04      	subs	r7, #4
 8007104:	e7d0      	b.n	80070a8 <__hexnan+0xd4>
 8007106:	2004      	movs	r0, #4
 8007108:	e7d5      	b.n	80070b6 <__hexnan+0xe2>
	...

0800710c <malloc>:
 800710c:	4b02      	ldr	r3, [pc, #8]	@ (8007118 <malloc+0xc>)
 800710e:	4601      	mov	r1, r0
 8007110:	6818      	ldr	r0, [r3, #0]
 8007112:	f000 b825 	b.w	8007160 <_malloc_r>
 8007116:	bf00      	nop
 8007118:	200001a4 	.word	0x200001a4

0800711c <sbrk_aligned>:
 800711c:	b570      	push	{r4, r5, r6, lr}
 800711e:	4e0f      	ldr	r6, [pc, #60]	@ (800715c <sbrk_aligned+0x40>)
 8007120:	460c      	mov	r4, r1
 8007122:	6831      	ldr	r1, [r6, #0]
 8007124:	4605      	mov	r5, r0
 8007126:	b911      	cbnz	r1, 800712e <sbrk_aligned+0x12>
 8007128:	f000 fe36 	bl	8007d98 <_sbrk_r>
 800712c:	6030      	str	r0, [r6, #0]
 800712e:	4621      	mov	r1, r4
 8007130:	4628      	mov	r0, r5
 8007132:	f000 fe31 	bl	8007d98 <_sbrk_r>
 8007136:	1c43      	adds	r3, r0, #1
 8007138:	d103      	bne.n	8007142 <sbrk_aligned+0x26>
 800713a:	f04f 34ff 	mov.w	r4, #4294967295
 800713e:	4620      	mov	r0, r4
 8007140:	bd70      	pop	{r4, r5, r6, pc}
 8007142:	1cc4      	adds	r4, r0, #3
 8007144:	f024 0403 	bic.w	r4, r4, #3
 8007148:	42a0      	cmp	r0, r4
 800714a:	d0f8      	beq.n	800713e <sbrk_aligned+0x22>
 800714c:	1a21      	subs	r1, r4, r0
 800714e:	4628      	mov	r0, r5
 8007150:	f000 fe22 	bl	8007d98 <_sbrk_r>
 8007154:	3001      	adds	r0, #1
 8007156:	d1f2      	bne.n	800713e <sbrk_aligned+0x22>
 8007158:	e7ef      	b.n	800713a <sbrk_aligned+0x1e>
 800715a:	bf00      	nop
 800715c:	200005ec 	.word	0x200005ec

08007160 <_malloc_r>:
 8007160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007164:	1ccd      	adds	r5, r1, #3
 8007166:	f025 0503 	bic.w	r5, r5, #3
 800716a:	3508      	adds	r5, #8
 800716c:	2d0c      	cmp	r5, #12
 800716e:	bf38      	it	cc
 8007170:	250c      	movcc	r5, #12
 8007172:	2d00      	cmp	r5, #0
 8007174:	4606      	mov	r6, r0
 8007176:	db01      	blt.n	800717c <_malloc_r+0x1c>
 8007178:	42a9      	cmp	r1, r5
 800717a:	d904      	bls.n	8007186 <_malloc_r+0x26>
 800717c:	230c      	movs	r3, #12
 800717e:	6033      	str	r3, [r6, #0]
 8007180:	2000      	movs	r0, #0
 8007182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007186:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800725c <_malloc_r+0xfc>
 800718a:	f000 f87b 	bl	8007284 <__malloc_lock>
 800718e:	f8d8 3000 	ldr.w	r3, [r8]
 8007192:	461c      	mov	r4, r3
 8007194:	bb44      	cbnz	r4, 80071e8 <_malloc_r+0x88>
 8007196:	4629      	mov	r1, r5
 8007198:	4630      	mov	r0, r6
 800719a:	f7ff ffbf 	bl	800711c <sbrk_aligned>
 800719e:	1c43      	adds	r3, r0, #1
 80071a0:	4604      	mov	r4, r0
 80071a2:	d158      	bne.n	8007256 <_malloc_r+0xf6>
 80071a4:	f8d8 4000 	ldr.w	r4, [r8]
 80071a8:	4627      	mov	r7, r4
 80071aa:	2f00      	cmp	r7, #0
 80071ac:	d143      	bne.n	8007236 <_malloc_r+0xd6>
 80071ae:	2c00      	cmp	r4, #0
 80071b0:	d04b      	beq.n	800724a <_malloc_r+0xea>
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	4639      	mov	r1, r7
 80071b6:	4630      	mov	r0, r6
 80071b8:	eb04 0903 	add.w	r9, r4, r3
 80071bc:	f000 fdec 	bl	8007d98 <_sbrk_r>
 80071c0:	4581      	cmp	r9, r0
 80071c2:	d142      	bne.n	800724a <_malloc_r+0xea>
 80071c4:	6821      	ldr	r1, [r4, #0]
 80071c6:	1a6d      	subs	r5, r5, r1
 80071c8:	4629      	mov	r1, r5
 80071ca:	4630      	mov	r0, r6
 80071cc:	f7ff ffa6 	bl	800711c <sbrk_aligned>
 80071d0:	3001      	adds	r0, #1
 80071d2:	d03a      	beq.n	800724a <_malloc_r+0xea>
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	442b      	add	r3, r5
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	f8d8 3000 	ldr.w	r3, [r8]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	bb62      	cbnz	r2, 800723c <_malloc_r+0xdc>
 80071e2:	f8c8 7000 	str.w	r7, [r8]
 80071e6:	e00f      	b.n	8007208 <_malloc_r+0xa8>
 80071e8:	6822      	ldr	r2, [r4, #0]
 80071ea:	1b52      	subs	r2, r2, r5
 80071ec:	d420      	bmi.n	8007230 <_malloc_r+0xd0>
 80071ee:	2a0b      	cmp	r2, #11
 80071f0:	d917      	bls.n	8007222 <_malloc_r+0xc2>
 80071f2:	1961      	adds	r1, r4, r5
 80071f4:	42a3      	cmp	r3, r4
 80071f6:	6025      	str	r5, [r4, #0]
 80071f8:	bf18      	it	ne
 80071fa:	6059      	strne	r1, [r3, #4]
 80071fc:	6863      	ldr	r3, [r4, #4]
 80071fe:	bf08      	it	eq
 8007200:	f8c8 1000 	streq.w	r1, [r8]
 8007204:	5162      	str	r2, [r4, r5]
 8007206:	604b      	str	r3, [r1, #4]
 8007208:	4630      	mov	r0, r6
 800720a:	f000 f841 	bl	8007290 <__malloc_unlock>
 800720e:	f104 000b 	add.w	r0, r4, #11
 8007212:	1d23      	adds	r3, r4, #4
 8007214:	f020 0007 	bic.w	r0, r0, #7
 8007218:	1ac2      	subs	r2, r0, r3
 800721a:	bf1c      	itt	ne
 800721c:	1a1b      	subne	r3, r3, r0
 800721e:	50a3      	strne	r3, [r4, r2]
 8007220:	e7af      	b.n	8007182 <_malloc_r+0x22>
 8007222:	6862      	ldr	r2, [r4, #4]
 8007224:	42a3      	cmp	r3, r4
 8007226:	bf0c      	ite	eq
 8007228:	f8c8 2000 	streq.w	r2, [r8]
 800722c:	605a      	strne	r2, [r3, #4]
 800722e:	e7eb      	b.n	8007208 <_malloc_r+0xa8>
 8007230:	4623      	mov	r3, r4
 8007232:	6864      	ldr	r4, [r4, #4]
 8007234:	e7ae      	b.n	8007194 <_malloc_r+0x34>
 8007236:	463c      	mov	r4, r7
 8007238:	687f      	ldr	r7, [r7, #4]
 800723a:	e7b6      	b.n	80071aa <_malloc_r+0x4a>
 800723c:	461a      	mov	r2, r3
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	42a3      	cmp	r3, r4
 8007242:	d1fb      	bne.n	800723c <_malloc_r+0xdc>
 8007244:	2300      	movs	r3, #0
 8007246:	6053      	str	r3, [r2, #4]
 8007248:	e7de      	b.n	8007208 <_malloc_r+0xa8>
 800724a:	230c      	movs	r3, #12
 800724c:	6033      	str	r3, [r6, #0]
 800724e:	4630      	mov	r0, r6
 8007250:	f000 f81e 	bl	8007290 <__malloc_unlock>
 8007254:	e794      	b.n	8007180 <_malloc_r+0x20>
 8007256:	6005      	str	r5, [r0, #0]
 8007258:	e7d6      	b.n	8007208 <_malloc_r+0xa8>
 800725a:	bf00      	nop
 800725c:	200005f0 	.word	0x200005f0

08007260 <__ascii_mbtowc>:
 8007260:	b082      	sub	sp, #8
 8007262:	b901      	cbnz	r1, 8007266 <__ascii_mbtowc+0x6>
 8007264:	a901      	add	r1, sp, #4
 8007266:	b142      	cbz	r2, 800727a <__ascii_mbtowc+0x1a>
 8007268:	b14b      	cbz	r3, 800727e <__ascii_mbtowc+0x1e>
 800726a:	7813      	ldrb	r3, [r2, #0]
 800726c:	600b      	str	r3, [r1, #0]
 800726e:	7812      	ldrb	r2, [r2, #0]
 8007270:	1e10      	subs	r0, r2, #0
 8007272:	bf18      	it	ne
 8007274:	2001      	movne	r0, #1
 8007276:	b002      	add	sp, #8
 8007278:	4770      	bx	lr
 800727a:	4610      	mov	r0, r2
 800727c:	e7fb      	b.n	8007276 <__ascii_mbtowc+0x16>
 800727e:	f06f 0001 	mvn.w	r0, #1
 8007282:	e7f8      	b.n	8007276 <__ascii_mbtowc+0x16>

08007284 <__malloc_lock>:
 8007284:	4801      	ldr	r0, [pc, #4]	@ (800728c <__malloc_lock+0x8>)
 8007286:	f7ff bb7c 	b.w	8006982 <__retarget_lock_acquire_recursive>
 800728a:	bf00      	nop
 800728c:	200005e8 	.word	0x200005e8

08007290 <__malloc_unlock>:
 8007290:	4801      	ldr	r0, [pc, #4]	@ (8007298 <__malloc_unlock+0x8>)
 8007292:	f7ff bb77 	b.w	8006984 <__retarget_lock_release_recursive>
 8007296:	bf00      	nop
 8007298:	200005e8 	.word	0x200005e8

0800729c <_Balloc>:
 800729c:	b570      	push	{r4, r5, r6, lr}
 800729e:	69c6      	ldr	r6, [r0, #28]
 80072a0:	4604      	mov	r4, r0
 80072a2:	460d      	mov	r5, r1
 80072a4:	b976      	cbnz	r6, 80072c4 <_Balloc+0x28>
 80072a6:	2010      	movs	r0, #16
 80072a8:	f7ff ff30 	bl	800710c <malloc>
 80072ac:	4602      	mov	r2, r0
 80072ae:	61e0      	str	r0, [r4, #28]
 80072b0:	b920      	cbnz	r0, 80072bc <_Balloc+0x20>
 80072b2:	4b18      	ldr	r3, [pc, #96]	@ (8007314 <_Balloc+0x78>)
 80072b4:	4818      	ldr	r0, [pc, #96]	@ (8007318 <_Balloc+0x7c>)
 80072b6:	216b      	movs	r1, #107	@ 0x6b
 80072b8:	f7ff fb86 	bl	80069c8 <__assert_func>
 80072bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072c0:	6006      	str	r6, [r0, #0]
 80072c2:	60c6      	str	r6, [r0, #12]
 80072c4:	69e6      	ldr	r6, [r4, #28]
 80072c6:	68f3      	ldr	r3, [r6, #12]
 80072c8:	b183      	cbz	r3, 80072ec <_Balloc+0x50>
 80072ca:	69e3      	ldr	r3, [r4, #28]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072d2:	b9b8      	cbnz	r0, 8007304 <_Balloc+0x68>
 80072d4:	2101      	movs	r1, #1
 80072d6:	fa01 f605 	lsl.w	r6, r1, r5
 80072da:	1d72      	adds	r2, r6, #5
 80072dc:	0092      	lsls	r2, r2, #2
 80072de:	4620      	mov	r0, r4
 80072e0:	f000 fd71 	bl	8007dc6 <_calloc_r>
 80072e4:	b160      	cbz	r0, 8007300 <_Balloc+0x64>
 80072e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072ea:	e00e      	b.n	800730a <_Balloc+0x6e>
 80072ec:	2221      	movs	r2, #33	@ 0x21
 80072ee:	2104      	movs	r1, #4
 80072f0:	4620      	mov	r0, r4
 80072f2:	f000 fd68 	bl	8007dc6 <_calloc_r>
 80072f6:	69e3      	ldr	r3, [r4, #28]
 80072f8:	60f0      	str	r0, [r6, #12]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e4      	bne.n	80072ca <_Balloc+0x2e>
 8007300:	2000      	movs	r0, #0
 8007302:	bd70      	pop	{r4, r5, r6, pc}
 8007304:	6802      	ldr	r2, [r0, #0]
 8007306:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800730a:	2300      	movs	r3, #0
 800730c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007310:	e7f7      	b.n	8007302 <_Balloc+0x66>
 8007312:	bf00      	nop
 8007314:	080087b8 	.word	0x080087b8
 8007318:	080088de 	.word	0x080088de

0800731c <_Bfree>:
 800731c:	b570      	push	{r4, r5, r6, lr}
 800731e:	69c6      	ldr	r6, [r0, #28]
 8007320:	4605      	mov	r5, r0
 8007322:	460c      	mov	r4, r1
 8007324:	b976      	cbnz	r6, 8007344 <_Bfree+0x28>
 8007326:	2010      	movs	r0, #16
 8007328:	f7ff fef0 	bl	800710c <malloc>
 800732c:	4602      	mov	r2, r0
 800732e:	61e8      	str	r0, [r5, #28]
 8007330:	b920      	cbnz	r0, 800733c <_Bfree+0x20>
 8007332:	4b09      	ldr	r3, [pc, #36]	@ (8007358 <_Bfree+0x3c>)
 8007334:	4809      	ldr	r0, [pc, #36]	@ (800735c <_Bfree+0x40>)
 8007336:	218f      	movs	r1, #143	@ 0x8f
 8007338:	f7ff fb46 	bl	80069c8 <__assert_func>
 800733c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007340:	6006      	str	r6, [r0, #0]
 8007342:	60c6      	str	r6, [r0, #12]
 8007344:	b13c      	cbz	r4, 8007356 <_Bfree+0x3a>
 8007346:	69eb      	ldr	r3, [r5, #28]
 8007348:	6862      	ldr	r2, [r4, #4]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007350:	6021      	str	r1, [r4, #0]
 8007352:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007356:	bd70      	pop	{r4, r5, r6, pc}
 8007358:	080087b8 	.word	0x080087b8
 800735c:	080088de 	.word	0x080088de

08007360 <__multadd>:
 8007360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007364:	690d      	ldr	r5, [r1, #16]
 8007366:	4607      	mov	r7, r0
 8007368:	460c      	mov	r4, r1
 800736a:	461e      	mov	r6, r3
 800736c:	f101 0c14 	add.w	ip, r1, #20
 8007370:	2000      	movs	r0, #0
 8007372:	f8dc 3000 	ldr.w	r3, [ip]
 8007376:	b299      	uxth	r1, r3
 8007378:	fb02 6101 	mla	r1, r2, r1, r6
 800737c:	0c1e      	lsrs	r6, r3, #16
 800737e:	0c0b      	lsrs	r3, r1, #16
 8007380:	fb02 3306 	mla	r3, r2, r6, r3
 8007384:	b289      	uxth	r1, r1
 8007386:	3001      	adds	r0, #1
 8007388:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800738c:	4285      	cmp	r5, r0
 800738e:	f84c 1b04 	str.w	r1, [ip], #4
 8007392:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007396:	dcec      	bgt.n	8007372 <__multadd+0x12>
 8007398:	b30e      	cbz	r6, 80073de <__multadd+0x7e>
 800739a:	68a3      	ldr	r3, [r4, #8]
 800739c:	42ab      	cmp	r3, r5
 800739e:	dc19      	bgt.n	80073d4 <__multadd+0x74>
 80073a0:	6861      	ldr	r1, [r4, #4]
 80073a2:	4638      	mov	r0, r7
 80073a4:	3101      	adds	r1, #1
 80073a6:	f7ff ff79 	bl	800729c <_Balloc>
 80073aa:	4680      	mov	r8, r0
 80073ac:	b928      	cbnz	r0, 80073ba <__multadd+0x5a>
 80073ae:	4602      	mov	r2, r0
 80073b0:	4b0c      	ldr	r3, [pc, #48]	@ (80073e4 <__multadd+0x84>)
 80073b2:	480d      	ldr	r0, [pc, #52]	@ (80073e8 <__multadd+0x88>)
 80073b4:	21ba      	movs	r1, #186	@ 0xba
 80073b6:	f7ff fb07 	bl	80069c8 <__assert_func>
 80073ba:	6922      	ldr	r2, [r4, #16]
 80073bc:	3202      	adds	r2, #2
 80073be:	f104 010c 	add.w	r1, r4, #12
 80073c2:	0092      	lsls	r2, r2, #2
 80073c4:	300c      	adds	r0, #12
 80073c6:	f7ff fae6 	bl	8006996 <memcpy>
 80073ca:	4621      	mov	r1, r4
 80073cc:	4638      	mov	r0, r7
 80073ce:	f7ff ffa5 	bl	800731c <_Bfree>
 80073d2:	4644      	mov	r4, r8
 80073d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073d8:	3501      	adds	r5, #1
 80073da:	615e      	str	r6, [r3, #20]
 80073dc:	6125      	str	r5, [r4, #16]
 80073de:	4620      	mov	r0, r4
 80073e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073e4:	0800886d 	.word	0x0800886d
 80073e8:	080088de 	.word	0x080088de

080073ec <__s2b>:
 80073ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073f0:	460c      	mov	r4, r1
 80073f2:	4615      	mov	r5, r2
 80073f4:	461f      	mov	r7, r3
 80073f6:	2209      	movs	r2, #9
 80073f8:	3308      	adds	r3, #8
 80073fa:	4606      	mov	r6, r0
 80073fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007400:	2100      	movs	r1, #0
 8007402:	2201      	movs	r2, #1
 8007404:	429a      	cmp	r2, r3
 8007406:	db09      	blt.n	800741c <__s2b+0x30>
 8007408:	4630      	mov	r0, r6
 800740a:	f7ff ff47 	bl	800729c <_Balloc>
 800740e:	b940      	cbnz	r0, 8007422 <__s2b+0x36>
 8007410:	4602      	mov	r2, r0
 8007412:	4b19      	ldr	r3, [pc, #100]	@ (8007478 <__s2b+0x8c>)
 8007414:	4819      	ldr	r0, [pc, #100]	@ (800747c <__s2b+0x90>)
 8007416:	21d3      	movs	r1, #211	@ 0xd3
 8007418:	f7ff fad6 	bl	80069c8 <__assert_func>
 800741c:	0052      	lsls	r2, r2, #1
 800741e:	3101      	adds	r1, #1
 8007420:	e7f0      	b.n	8007404 <__s2b+0x18>
 8007422:	9b08      	ldr	r3, [sp, #32]
 8007424:	6143      	str	r3, [r0, #20]
 8007426:	2d09      	cmp	r5, #9
 8007428:	f04f 0301 	mov.w	r3, #1
 800742c:	6103      	str	r3, [r0, #16]
 800742e:	dd16      	ble.n	800745e <__s2b+0x72>
 8007430:	f104 0909 	add.w	r9, r4, #9
 8007434:	46c8      	mov	r8, r9
 8007436:	442c      	add	r4, r5
 8007438:	f818 3b01 	ldrb.w	r3, [r8], #1
 800743c:	4601      	mov	r1, r0
 800743e:	3b30      	subs	r3, #48	@ 0x30
 8007440:	220a      	movs	r2, #10
 8007442:	4630      	mov	r0, r6
 8007444:	f7ff ff8c 	bl	8007360 <__multadd>
 8007448:	45a0      	cmp	r8, r4
 800744a:	d1f5      	bne.n	8007438 <__s2b+0x4c>
 800744c:	f1a5 0408 	sub.w	r4, r5, #8
 8007450:	444c      	add	r4, r9
 8007452:	1b2d      	subs	r5, r5, r4
 8007454:	1963      	adds	r3, r4, r5
 8007456:	42bb      	cmp	r3, r7
 8007458:	db04      	blt.n	8007464 <__s2b+0x78>
 800745a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800745e:	340a      	adds	r4, #10
 8007460:	2509      	movs	r5, #9
 8007462:	e7f6      	b.n	8007452 <__s2b+0x66>
 8007464:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007468:	4601      	mov	r1, r0
 800746a:	3b30      	subs	r3, #48	@ 0x30
 800746c:	220a      	movs	r2, #10
 800746e:	4630      	mov	r0, r6
 8007470:	f7ff ff76 	bl	8007360 <__multadd>
 8007474:	e7ee      	b.n	8007454 <__s2b+0x68>
 8007476:	bf00      	nop
 8007478:	0800886d 	.word	0x0800886d
 800747c:	080088de 	.word	0x080088de

08007480 <__hi0bits>:
 8007480:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007484:	4603      	mov	r3, r0
 8007486:	bf36      	itet	cc
 8007488:	0403      	lslcc	r3, r0, #16
 800748a:	2000      	movcs	r0, #0
 800748c:	2010      	movcc	r0, #16
 800748e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007492:	bf3c      	itt	cc
 8007494:	021b      	lslcc	r3, r3, #8
 8007496:	3008      	addcc	r0, #8
 8007498:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800749c:	bf3c      	itt	cc
 800749e:	011b      	lslcc	r3, r3, #4
 80074a0:	3004      	addcc	r0, #4
 80074a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074a6:	bf3c      	itt	cc
 80074a8:	009b      	lslcc	r3, r3, #2
 80074aa:	3002      	addcc	r0, #2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	db05      	blt.n	80074bc <__hi0bits+0x3c>
 80074b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80074b4:	f100 0001 	add.w	r0, r0, #1
 80074b8:	bf08      	it	eq
 80074ba:	2020      	moveq	r0, #32
 80074bc:	4770      	bx	lr

080074be <__lo0bits>:
 80074be:	6803      	ldr	r3, [r0, #0]
 80074c0:	4602      	mov	r2, r0
 80074c2:	f013 0007 	ands.w	r0, r3, #7
 80074c6:	d00b      	beq.n	80074e0 <__lo0bits+0x22>
 80074c8:	07d9      	lsls	r1, r3, #31
 80074ca:	d421      	bmi.n	8007510 <__lo0bits+0x52>
 80074cc:	0798      	lsls	r0, r3, #30
 80074ce:	bf49      	itett	mi
 80074d0:	085b      	lsrmi	r3, r3, #1
 80074d2:	089b      	lsrpl	r3, r3, #2
 80074d4:	2001      	movmi	r0, #1
 80074d6:	6013      	strmi	r3, [r2, #0]
 80074d8:	bf5c      	itt	pl
 80074da:	6013      	strpl	r3, [r2, #0]
 80074dc:	2002      	movpl	r0, #2
 80074de:	4770      	bx	lr
 80074e0:	b299      	uxth	r1, r3
 80074e2:	b909      	cbnz	r1, 80074e8 <__lo0bits+0x2a>
 80074e4:	0c1b      	lsrs	r3, r3, #16
 80074e6:	2010      	movs	r0, #16
 80074e8:	b2d9      	uxtb	r1, r3
 80074ea:	b909      	cbnz	r1, 80074f0 <__lo0bits+0x32>
 80074ec:	3008      	adds	r0, #8
 80074ee:	0a1b      	lsrs	r3, r3, #8
 80074f0:	0719      	lsls	r1, r3, #28
 80074f2:	bf04      	itt	eq
 80074f4:	091b      	lsreq	r3, r3, #4
 80074f6:	3004      	addeq	r0, #4
 80074f8:	0799      	lsls	r1, r3, #30
 80074fa:	bf04      	itt	eq
 80074fc:	089b      	lsreq	r3, r3, #2
 80074fe:	3002      	addeq	r0, #2
 8007500:	07d9      	lsls	r1, r3, #31
 8007502:	d403      	bmi.n	800750c <__lo0bits+0x4e>
 8007504:	085b      	lsrs	r3, r3, #1
 8007506:	f100 0001 	add.w	r0, r0, #1
 800750a:	d003      	beq.n	8007514 <__lo0bits+0x56>
 800750c:	6013      	str	r3, [r2, #0]
 800750e:	4770      	bx	lr
 8007510:	2000      	movs	r0, #0
 8007512:	4770      	bx	lr
 8007514:	2020      	movs	r0, #32
 8007516:	4770      	bx	lr

08007518 <__i2b>:
 8007518:	b510      	push	{r4, lr}
 800751a:	460c      	mov	r4, r1
 800751c:	2101      	movs	r1, #1
 800751e:	f7ff febd 	bl	800729c <_Balloc>
 8007522:	4602      	mov	r2, r0
 8007524:	b928      	cbnz	r0, 8007532 <__i2b+0x1a>
 8007526:	4b05      	ldr	r3, [pc, #20]	@ (800753c <__i2b+0x24>)
 8007528:	4805      	ldr	r0, [pc, #20]	@ (8007540 <__i2b+0x28>)
 800752a:	f240 1145 	movw	r1, #325	@ 0x145
 800752e:	f7ff fa4b 	bl	80069c8 <__assert_func>
 8007532:	2301      	movs	r3, #1
 8007534:	6144      	str	r4, [r0, #20]
 8007536:	6103      	str	r3, [r0, #16]
 8007538:	bd10      	pop	{r4, pc}
 800753a:	bf00      	nop
 800753c:	0800886d 	.word	0x0800886d
 8007540:	080088de 	.word	0x080088de

08007544 <__multiply>:
 8007544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007548:	4614      	mov	r4, r2
 800754a:	690a      	ldr	r2, [r1, #16]
 800754c:	6923      	ldr	r3, [r4, #16]
 800754e:	429a      	cmp	r2, r3
 8007550:	bfa8      	it	ge
 8007552:	4623      	movge	r3, r4
 8007554:	460f      	mov	r7, r1
 8007556:	bfa4      	itt	ge
 8007558:	460c      	movge	r4, r1
 800755a:	461f      	movge	r7, r3
 800755c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007560:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007564:	68a3      	ldr	r3, [r4, #8]
 8007566:	6861      	ldr	r1, [r4, #4]
 8007568:	eb0a 0609 	add.w	r6, sl, r9
 800756c:	42b3      	cmp	r3, r6
 800756e:	b085      	sub	sp, #20
 8007570:	bfb8      	it	lt
 8007572:	3101      	addlt	r1, #1
 8007574:	f7ff fe92 	bl	800729c <_Balloc>
 8007578:	b930      	cbnz	r0, 8007588 <__multiply+0x44>
 800757a:	4602      	mov	r2, r0
 800757c:	4b44      	ldr	r3, [pc, #272]	@ (8007690 <__multiply+0x14c>)
 800757e:	4845      	ldr	r0, [pc, #276]	@ (8007694 <__multiply+0x150>)
 8007580:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007584:	f7ff fa20 	bl	80069c8 <__assert_func>
 8007588:	f100 0514 	add.w	r5, r0, #20
 800758c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007590:	462b      	mov	r3, r5
 8007592:	2200      	movs	r2, #0
 8007594:	4543      	cmp	r3, r8
 8007596:	d321      	bcc.n	80075dc <__multiply+0x98>
 8007598:	f107 0114 	add.w	r1, r7, #20
 800759c:	f104 0214 	add.w	r2, r4, #20
 80075a0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80075a4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80075a8:	9302      	str	r3, [sp, #8]
 80075aa:	1b13      	subs	r3, r2, r4
 80075ac:	3b15      	subs	r3, #21
 80075ae:	f023 0303 	bic.w	r3, r3, #3
 80075b2:	3304      	adds	r3, #4
 80075b4:	f104 0715 	add.w	r7, r4, #21
 80075b8:	42ba      	cmp	r2, r7
 80075ba:	bf38      	it	cc
 80075bc:	2304      	movcc	r3, #4
 80075be:	9301      	str	r3, [sp, #4]
 80075c0:	9b02      	ldr	r3, [sp, #8]
 80075c2:	9103      	str	r1, [sp, #12]
 80075c4:	428b      	cmp	r3, r1
 80075c6:	d80c      	bhi.n	80075e2 <__multiply+0x9e>
 80075c8:	2e00      	cmp	r6, #0
 80075ca:	dd03      	ble.n	80075d4 <__multiply+0x90>
 80075cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d05b      	beq.n	800768c <__multiply+0x148>
 80075d4:	6106      	str	r6, [r0, #16]
 80075d6:	b005      	add	sp, #20
 80075d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075dc:	f843 2b04 	str.w	r2, [r3], #4
 80075e0:	e7d8      	b.n	8007594 <__multiply+0x50>
 80075e2:	f8b1 a000 	ldrh.w	sl, [r1]
 80075e6:	f1ba 0f00 	cmp.w	sl, #0
 80075ea:	d024      	beq.n	8007636 <__multiply+0xf2>
 80075ec:	f104 0e14 	add.w	lr, r4, #20
 80075f0:	46a9      	mov	r9, r5
 80075f2:	f04f 0c00 	mov.w	ip, #0
 80075f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80075fa:	f8d9 3000 	ldr.w	r3, [r9]
 80075fe:	fa1f fb87 	uxth.w	fp, r7
 8007602:	b29b      	uxth	r3, r3
 8007604:	fb0a 330b 	mla	r3, sl, fp, r3
 8007608:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800760c:	f8d9 7000 	ldr.w	r7, [r9]
 8007610:	4463      	add	r3, ip
 8007612:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007616:	fb0a c70b 	mla	r7, sl, fp, ip
 800761a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800761e:	b29b      	uxth	r3, r3
 8007620:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007624:	4572      	cmp	r2, lr
 8007626:	f849 3b04 	str.w	r3, [r9], #4
 800762a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800762e:	d8e2      	bhi.n	80075f6 <__multiply+0xb2>
 8007630:	9b01      	ldr	r3, [sp, #4]
 8007632:	f845 c003 	str.w	ip, [r5, r3]
 8007636:	9b03      	ldr	r3, [sp, #12]
 8007638:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800763c:	3104      	adds	r1, #4
 800763e:	f1b9 0f00 	cmp.w	r9, #0
 8007642:	d021      	beq.n	8007688 <__multiply+0x144>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	f104 0c14 	add.w	ip, r4, #20
 800764a:	46ae      	mov	lr, r5
 800764c:	f04f 0a00 	mov.w	sl, #0
 8007650:	f8bc b000 	ldrh.w	fp, [ip]
 8007654:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007658:	fb09 770b 	mla	r7, r9, fp, r7
 800765c:	4457      	add	r7, sl
 800765e:	b29b      	uxth	r3, r3
 8007660:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007664:	f84e 3b04 	str.w	r3, [lr], #4
 8007668:	f85c 3b04 	ldr.w	r3, [ip], #4
 800766c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007670:	f8be 3000 	ldrh.w	r3, [lr]
 8007674:	fb09 330a 	mla	r3, r9, sl, r3
 8007678:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800767c:	4562      	cmp	r2, ip
 800767e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007682:	d8e5      	bhi.n	8007650 <__multiply+0x10c>
 8007684:	9f01      	ldr	r7, [sp, #4]
 8007686:	51eb      	str	r3, [r5, r7]
 8007688:	3504      	adds	r5, #4
 800768a:	e799      	b.n	80075c0 <__multiply+0x7c>
 800768c:	3e01      	subs	r6, #1
 800768e:	e79b      	b.n	80075c8 <__multiply+0x84>
 8007690:	0800886d 	.word	0x0800886d
 8007694:	080088de 	.word	0x080088de

08007698 <__pow5mult>:
 8007698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800769c:	4615      	mov	r5, r2
 800769e:	f012 0203 	ands.w	r2, r2, #3
 80076a2:	4607      	mov	r7, r0
 80076a4:	460e      	mov	r6, r1
 80076a6:	d007      	beq.n	80076b8 <__pow5mult+0x20>
 80076a8:	4c25      	ldr	r4, [pc, #148]	@ (8007740 <__pow5mult+0xa8>)
 80076aa:	3a01      	subs	r2, #1
 80076ac:	2300      	movs	r3, #0
 80076ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076b2:	f7ff fe55 	bl	8007360 <__multadd>
 80076b6:	4606      	mov	r6, r0
 80076b8:	10ad      	asrs	r5, r5, #2
 80076ba:	d03d      	beq.n	8007738 <__pow5mult+0xa0>
 80076bc:	69fc      	ldr	r4, [r7, #28]
 80076be:	b97c      	cbnz	r4, 80076e0 <__pow5mult+0x48>
 80076c0:	2010      	movs	r0, #16
 80076c2:	f7ff fd23 	bl	800710c <malloc>
 80076c6:	4602      	mov	r2, r0
 80076c8:	61f8      	str	r0, [r7, #28]
 80076ca:	b928      	cbnz	r0, 80076d8 <__pow5mult+0x40>
 80076cc:	4b1d      	ldr	r3, [pc, #116]	@ (8007744 <__pow5mult+0xac>)
 80076ce:	481e      	ldr	r0, [pc, #120]	@ (8007748 <__pow5mult+0xb0>)
 80076d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80076d4:	f7ff f978 	bl	80069c8 <__assert_func>
 80076d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076dc:	6004      	str	r4, [r0, #0]
 80076de:	60c4      	str	r4, [r0, #12]
 80076e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80076e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076e8:	b94c      	cbnz	r4, 80076fe <__pow5mult+0x66>
 80076ea:	f240 2171 	movw	r1, #625	@ 0x271
 80076ee:	4638      	mov	r0, r7
 80076f0:	f7ff ff12 	bl	8007518 <__i2b>
 80076f4:	2300      	movs	r3, #0
 80076f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80076fa:	4604      	mov	r4, r0
 80076fc:	6003      	str	r3, [r0, #0]
 80076fe:	f04f 0900 	mov.w	r9, #0
 8007702:	07eb      	lsls	r3, r5, #31
 8007704:	d50a      	bpl.n	800771c <__pow5mult+0x84>
 8007706:	4631      	mov	r1, r6
 8007708:	4622      	mov	r2, r4
 800770a:	4638      	mov	r0, r7
 800770c:	f7ff ff1a 	bl	8007544 <__multiply>
 8007710:	4631      	mov	r1, r6
 8007712:	4680      	mov	r8, r0
 8007714:	4638      	mov	r0, r7
 8007716:	f7ff fe01 	bl	800731c <_Bfree>
 800771a:	4646      	mov	r6, r8
 800771c:	106d      	asrs	r5, r5, #1
 800771e:	d00b      	beq.n	8007738 <__pow5mult+0xa0>
 8007720:	6820      	ldr	r0, [r4, #0]
 8007722:	b938      	cbnz	r0, 8007734 <__pow5mult+0x9c>
 8007724:	4622      	mov	r2, r4
 8007726:	4621      	mov	r1, r4
 8007728:	4638      	mov	r0, r7
 800772a:	f7ff ff0b 	bl	8007544 <__multiply>
 800772e:	6020      	str	r0, [r4, #0]
 8007730:	f8c0 9000 	str.w	r9, [r0]
 8007734:	4604      	mov	r4, r0
 8007736:	e7e4      	b.n	8007702 <__pow5mult+0x6a>
 8007738:	4630      	mov	r0, r6
 800773a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800773e:	bf00      	nop
 8007740:	08008938 	.word	0x08008938
 8007744:	080087b8 	.word	0x080087b8
 8007748:	080088de 	.word	0x080088de

0800774c <__lshift>:
 800774c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007750:	460c      	mov	r4, r1
 8007752:	6849      	ldr	r1, [r1, #4]
 8007754:	6923      	ldr	r3, [r4, #16]
 8007756:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800775a:	68a3      	ldr	r3, [r4, #8]
 800775c:	4607      	mov	r7, r0
 800775e:	4691      	mov	r9, r2
 8007760:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007764:	f108 0601 	add.w	r6, r8, #1
 8007768:	42b3      	cmp	r3, r6
 800776a:	db0b      	blt.n	8007784 <__lshift+0x38>
 800776c:	4638      	mov	r0, r7
 800776e:	f7ff fd95 	bl	800729c <_Balloc>
 8007772:	4605      	mov	r5, r0
 8007774:	b948      	cbnz	r0, 800778a <__lshift+0x3e>
 8007776:	4602      	mov	r2, r0
 8007778:	4b28      	ldr	r3, [pc, #160]	@ (800781c <__lshift+0xd0>)
 800777a:	4829      	ldr	r0, [pc, #164]	@ (8007820 <__lshift+0xd4>)
 800777c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007780:	f7ff f922 	bl	80069c8 <__assert_func>
 8007784:	3101      	adds	r1, #1
 8007786:	005b      	lsls	r3, r3, #1
 8007788:	e7ee      	b.n	8007768 <__lshift+0x1c>
 800778a:	2300      	movs	r3, #0
 800778c:	f100 0114 	add.w	r1, r0, #20
 8007790:	f100 0210 	add.w	r2, r0, #16
 8007794:	4618      	mov	r0, r3
 8007796:	4553      	cmp	r3, sl
 8007798:	db33      	blt.n	8007802 <__lshift+0xb6>
 800779a:	6920      	ldr	r0, [r4, #16]
 800779c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077a0:	f104 0314 	add.w	r3, r4, #20
 80077a4:	f019 091f 	ands.w	r9, r9, #31
 80077a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80077b0:	d02b      	beq.n	800780a <__lshift+0xbe>
 80077b2:	f1c9 0e20 	rsb	lr, r9, #32
 80077b6:	468a      	mov	sl, r1
 80077b8:	2200      	movs	r2, #0
 80077ba:	6818      	ldr	r0, [r3, #0]
 80077bc:	fa00 f009 	lsl.w	r0, r0, r9
 80077c0:	4310      	orrs	r0, r2
 80077c2:	f84a 0b04 	str.w	r0, [sl], #4
 80077c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80077ca:	459c      	cmp	ip, r3
 80077cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80077d0:	d8f3      	bhi.n	80077ba <__lshift+0x6e>
 80077d2:	ebac 0304 	sub.w	r3, ip, r4
 80077d6:	3b15      	subs	r3, #21
 80077d8:	f023 0303 	bic.w	r3, r3, #3
 80077dc:	3304      	adds	r3, #4
 80077de:	f104 0015 	add.w	r0, r4, #21
 80077e2:	4584      	cmp	ip, r0
 80077e4:	bf38      	it	cc
 80077e6:	2304      	movcc	r3, #4
 80077e8:	50ca      	str	r2, [r1, r3]
 80077ea:	b10a      	cbz	r2, 80077f0 <__lshift+0xa4>
 80077ec:	f108 0602 	add.w	r6, r8, #2
 80077f0:	3e01      	subs	r6, #1
 80077f2:	4638      	mov	r0, r7
 80077f4:	612e      	str	r6, [r5, #16]
 80077f6:	4621      	mov	r1, r4
 80077f8:	f7ff fd90 	bl	800731c <_Bfree>
 80077fc:	4628      	mov	r0, r5
 80077fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007802:	f842 0f04 	str.w	r0, [r2, #4]!
 8007806:	3301      	adds	r3, #1
 8007808:	e7c5      	b.n	8007796 <__lshift+0x4a>
 800780a:	3904      	subs	r1, #4
 800780c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007810:	f841 2f04 	str.w	r2, [r1, #4]!
 8007814:	459c      	cmp	ip, r3
 8007816:	d8f9      	bhi.n	800780c <__lshift+0xc0>
 8007818:	e7ea      	b.n	80077f0 <__lshift+0xa4>
 800781a:	bf00      	nop
 800781c:	0800886d 	.word	0x0800886d
 8007820:	080088de 	.word	0x080088de

08007824 <__mcmp>:
 8007824:	690a      	ldr	r2, [r1, #16]
 8007826:	4603      	mov	r3, r0
 8007828:	6900      	ldr	r0, [r0, #16]
 800782a:	1a80      	subs	r0, r0, r2
 800782c:	b530      	push	{r4, r5, lr}
 800782e:	d10e      	bne.n	800784e <__mcmp+0x2a>
 8007830:	3314      	adds	r3, #20
 8007832:	3114      	adds	r1, #20
 8007834:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007838:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800783c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007840:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007844:	4295      	cmp	r5, r2
 8007846:	d003      	beq.n	8007850 <__mcmp+0x2c>
 8007848:	d205      	bcs.n	8007856 <__mcmp+0x32>
 800784a:	f04f 30ff 	mov.w	r0, #4294967295
 800784e:	bd30      	pop	{r4, r5, pc}
 8007850:	42a3      	cmp	r3, r4
 8007852:	d3f3      	bcc.n	800783c <__mcmp+0x18>
 8007854:	e7fb      	b.n	800784e <__mcmp+0x2a>
 8007856:	2001      	movs	r0, #1
 8007858:	e7f9      	b.n	800784e <__mcmp+0x2a>
	...

0800785c <__mdiff>:
 800785c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007860:	4689      	mov	r9, r1
 8007862:	4606      	mov	r6, r0
 8007864:	4611      	mov	r1, r2
 8007866:	4648      	mov	r0, r9
 8007868:	4614      	mov	r4, r2
 800786a:	f7ff ffdb 	bl	8007824 <__mcmp>
 800786e:	1e05      	subs	r5, r0, #0
 8007870:	d112      	bne.n	8007898 <__mdiff+0x3c>
 8007872:	4629      	mov	r1, r5
 8007874:	4630      	mov	r0, r6
 8007876:	f7ff fd11 	bl	800729c <_Balloc>
 800787a:	4602      	mov	r2, r0
 800787c:	b928      	cbnz	r0, 800788a <__mdiff+0x2e>
 800787e:	4b3f      	ldr	r3, [pc, #252]	@ (800797c <__mdiff+0x120>)
 8007880:	f240 2137 	movw	r1, #567	@ 0x237
 8007884:	483e      	ldr	r0, [pc, #248]	@ (8007980 <__mdiff+0x124>)
 8007886:	f7ff f89f 	bl	80069c8 <__assert_func>
 800788a:	2301      	movs	r3, #1
 800788c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007890:	4610      	mov	r0, r2
 8007892:	b003      	add	sp, #12
 8007894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007898:	bfbc      	itt	lt
 800789a:	464b      	movlt	r3, r9
 800789c:	46a1      	movlt	r9, r4
 800789e:	4630      	mov	r0, r6
 80078a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80078a4:	bfba      	itte	lt
 80078a6:	461c      	movlt	r4, r3
 80078a8:	2501      	movlt	r5, #1
 80078aa:	2500      	movge	r5, #0
 80078ac:	f7ff fcf6 	bl	800729c <_Balloc>
 80078b0:	4602      	mov	r2, r0
 80078b2:	b918      	cbnz	r0, 80078bc <__mdiff+0x60>
 80078b4:	4b31      	ldr	r3, [pc, #196]	@ (800797c <__mdiff+0x120>)
 80078b6:	f240 2145 	movw	r1, #581	@ 0x245
 80078ba:	e7e3      	b.n	8007884 <__mdiff+0x28>
 80078bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80078c0:	6926      	ldr	r6, [r4, #16]
 80078c2:	60c5      	str	r5, [r0, #12]
 80078c4:	f109 0310 	add.w	r3, r9, #16
 80078c8:	f109 0514 	add.w	r5, r9, #20
 80078cc:	f104 0e14 	add.w	lr, r4, #20
 80078d0:	f100 0b14 	add.w	fp, r0, #20
 80078d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80078d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80078dc:	9301      	str	r3, [sp, #4]
 80078de:	46d9      	mov	r9, fp
 80078e0:	f04f 0c00 	mov.w	ip, #0
 80078e4:	9b01      	ldr	r3, [sp, #4]
 80078e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80078ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80078ee:	9301      	str	r3, [sp, #4]
 80078f0:	fa1f f38a 	uxth.w	r3, sl
 80078f4:	4619      	mov	r1, r3
 80078f6:	b283      	uxth	r3, r0
 80078f8:	1acb      	subs	r3, r1, r3
 80078fa:	0c00      	lsrs	r0, r0, #16
 80078fc:	4463      	add	r3, ip
 80078fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007902:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007906:	b29b      	uxth	r3, r3
 8007908:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800790c:	4576      	cmp	r6, lr
 800790e:	f849 3b04 	str.w	r3, [r9], #4
 8007912:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007916:	d8e5      	bhi.n	80078e4 <__mdiff+0x88>
 8007918:	1b33      	subs	r3, r6, r4
 800791a:	3b15      	subs	r3, #21
 800791c:	f023 0303 	bic.w	r3, r3, #3
 8007920:	3415      	adds	r4, #21
 8007922:	3304      	adds	r3, #4
 8007924:	42a6      	cmp	r6, r4
 8007926:	bf38      	it	cc
 8007928:	2304      	movcc	r3, #4
 800792a:	441d      	add	r5, r3
 800792c:	445b      	add	r3, fp
 800792e:	461e      	mov	r6, r3
 8007930:	462c      	mov	r4, r5
 8007932:	4544      	cmp	r4, r8
 8007934:	d30e      	bcc.n	8007954 <__mdiff+0xf8>
 8007936:	f108 0103 	add.w	r1, r8, #3
 800793a:	1b49      	subs	r1, r1, r5
 800793c:	f021 0103 	bic.w	r1, r1, #3
 8007940:	3d03      	subs	r5, #3
 8007942:	45a8      	cmp	r8, r5
 8007944:	bf38      	it	cc
 8007946:	2100      	movcc	r1, #0
 8007948:	440b      	add	r3, r1
 800794a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800794e:	b191      	cbz	r1, 8007976 <__mdiff+0x11a>
 8007950:	6117      	str	r7, [r2, #16]
 8007952:	e79d      	b.n	8007890 <__mdiff+0x34>
 8007954:	f854 1b04 	ldr.w	r1, [r4], #4
 8007958:	46e6      	mov	lr, ip
 800795a:	0c08      	lsrs	r0, r1, #16
 800795c:	fa1c fc81 	uxtah	ip, ip, r1
 8007960:	4471      	add	r1, lr
 8007962:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007966:	b289      	uxth	r1, r1
 8007968:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800796c:	f846 1b04 	str.w	r1, [r6], #4
 8007970:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007974:	e7dd      	b.n	8007932 <__mdiff+0xd6>
 8007976:	3f01      	subs	r7, #1
 8007978:	e7e7      	b.n	800794a <__mdiff+0xee>
 800797a:	bf00      	nop
 800797c:	0800886d 	.word	0x0800886d
 8007980:	080088de 	.word	0x080088de

08007984 <__ulp>:
 8007984:	b082      	sub	sp, #8
 8007986:	ed8d 0b00 	vstr	d0, [sp]
 800798a:	9a01      	ldr	r2, [sp, #4]
 800798c:	4b0f      	ldr	r3, [pc, #60]	@ (80079cc <__ulp+0x48>)
 800798e:	4013      	ands	r3, r2
 8007990:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007994:	2b00      	cmp	r3, #0
 8007996:	dc08      	bgt.n	80079aa <__ulp+0x26>
 8007998:	425b      	negs	r3, r3
 800799a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800799e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80079a2:	da04      	bge.n	80079ae <__ulp+0x2a>
 80079a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80079a8:	4113      	asrs	r3, r2
 80079aa:	2200      	movs	r2, #0
 80079ac:	e008      	b.n	80079c0 <__ulp+0x3c>
 80079ae:	f1a2 0314 	sub.w	r3, r2, #20
 80079b2:	2b1e      	cmp	r3, #30
 80079b4:	bfda      	itte	le
 80079b6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80079ba:	40da      	lsrle	r2, r3
 80079bc:	2201      	movgt	r2, #1
 80079be:	2300      	movs	r3, #0
 80079c0:	4619      	mov	r1, r3
 80079c2:	4610      	mov	r0, r2
 80079c4:	ec41 0b10 	vmov	d0, r0, r1
 80079c8:	b002      	add	sp, #8
 80079ca:	4770      	bx	lr
 80079cc:	7ff00000 	.word	0x7ff00000

080079d0 <__b2d>:
 80079d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079d4:	6906      	ldr	r6, [r0, #16]
 80079d6:	f100 0814 	add.w	r8, r0, #20
 80079da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80079de:	1f37      	subs	r7, r6, #4
 80079e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80079e4:	4610      	mov	r0, r2
 80079e6:	f7ff fd4b 	bl	8007480 <__hi0bits>
 80079ea:	f1c0 0320 	rsb	r3, r0, #32
 80079ee:	280a      	cmp	r0, #10
 80079f0:	600b      	str	r3, [r1, #0]
 80079f2:	491b      	ldr	r1, [pc, #108]	@ (8007a60 <__b2d+0x90>)
 80079f4:	dc15      	bgt.n	8007a22 <__b2d+0x52>
 80079f6:	f1c0 0c0b 	rsb	ip, r0, #11
 80079fa:	fa22 f30c 	lsr.w	r3, r2, ip
 80079fe:	45b8      	cmp	r8, r7
 8007a00:	ea43 0501 	orr.w	r5, r3, r1
 8007a04:	bf34      	ite	cc
 8007a06:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007a0a:	2300      	movcs	r3, #0
 8007a0c:	3015      	adds	r0, #21
 8007a0e:	fa02 f000 	lsl.w	r0, r2, r0
 8007a12:	fa23 f30c 	lsr.w	r3, r3, ip
 8007a16:	4303      	orrs	r3, r0
 8007a18:	461c      	mov	r4, r3
 8007a1a:	ec45 4b10 	vmov	d0, r4, r5
 8007a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a22:	45b8      	cmp	r8, r7
 8007a24:	bf3a      	itte	cc
 8007a26:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007a2a:	f1a6 0708 	subcc.w	r7, r6, #8
 8007a2e:	2300      	movcs	r3, #0
 8007a30:	380b      	subs	r0, #11
 8007a32:	d012      	beq.n	8007a5a <__b2d+0x8a>
 8007a34:	f1c0 0120 	rsb	r1, r0, #32
 8007a38:	fa23 f401 	lsr.w	r4, r3, r1
 8007a3c:	4082      	lsls	r2, r0
 8007a3e:	4322      	orrs	r2, r4
 8007a40:	4547      	cmp	r7, r8
 8007a42:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007a46:	bf8c      	ite	hi
 8007a48:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007a4c:	2200      	movls	r2, #0
 8007a4e:	4083      	lsls	r3, r0
 8007a50:	40ca      	lsrs	r2, r1
 8007a52:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007a56:	4313      	orrs	r3, r2
 8007a58:	e7de      	b.n	8007a18 <__b2d+0x48>
 8007a5a:	ea42 0501 	orr.w	r5, r2, r1
 8007a5e:	e7db      	b.n	8007a18 <__b2d+0x48>
 8007a60:	3ff00000 	.word	0x3ff00000

08007a64 <__d2b>:
 8007a64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a68:	460f      	mov	r7, r1
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	ec59 8b10 	vmov	r8, r9, d0
 8007a70:	4616      	mov	r6, r2
 8007a72:	f7ff fc13 	bl	800729c <_Balloc>
 8007a76:	4604      	mov	r4, r0
 8007a78:	b930      	cbnz	r0, 8007a88 <__d2b+0x24>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	4b23      	ldr	r3, [pc, #140]	@ (8007b0c <__d2b+0xa8>)
 8007a7e:	4824      	ldr	r0, [pc, #144]	@ (8007b10 <__d2b+0xac>)
 8007a80:	f240 310f 	movw	r1, #783	@ 0x30f
 8007a84:	f7fe ffa0 	bl	80069c8 <__assert_func>
 8007a88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a90:	b10d      	cbz	r5, 8007a96 <__d2b+0x32>
 8007a92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a96:	9301      	str	r3, [sp, #4]
 8007a98:	f1b8 0300 	subs.w	r3, r8, #0
 8007a9c:	d023      	beq.n	8007ae6 <__d2b+0x82>
 8007a9e:	4668      	mov	r0, sp
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	f7ff fd0c 	bl	80074be <__lo0bits>
 8007aa6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007aaa:	b1d0      	cbz	r0, 8007ae2 <__d2b+0x7e>
 8007aac:	f1c0 0320 	rsb	r3, r0, #32
 8007ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab4:	430b      	orrs	r3, r1
 8007ab6:	40c2      	lsrs	r2, r0
 8007ab8:	6163      	str	r3, [r4, #20]
 8007aba:	9201      	str	r2, [sp, #4]
 8007abc:	9b01      	ldr	r3, [sp, #4]
 8007abe:	61a3      	str	r3, [r4, #24]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	bf0c      	ite	eq
 8007ac4:	2201      	moveq	r2, #1
 8007ac6:	2202      	movne	r2, #2
 8007ac8:	6122      	str	r2, [r4, #16]
 8007aca:	b1a5      	cbz	r5, 8007af6 <__d2b+0x92>
 8007acc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007ad0:	4405      	add	r5, r0
 8007ad2:	603d      	str	r5, [r7, #0]
 8007ad4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007ad8:	6030      	str	r0, [r6, #0]
 8007ada:	4620      	mov	r0, r4
 8007adc:	b003      	add	sp, #12
 8007ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ae2:	6161      	str	r1, [r4, #20]
 8007ae4:	e7ea      	b.n	8007abc <__d2b+0x58>
 8007ae6:	a801      	add	r0, sp, #4
 8007ae8:	f7ff fce9 	bl	80074be <__lo0bits>
 8007aec:	9b01      	ldr	r3, [sp, #4]
 8007aee:	6163      	str	r3, [r4, #20]
 8007af0:	3020      	adds	r0, #32
 8007af2:	2201      	movs	r2, #1
 8007af4:	e7e8      	b.n	8007ac8 <__d2b+0x64>
 8007af6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007afa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007afe:	6038      	str	r0, [r7, #0]
 8007b00:	6918      	ldr	r0, [r3, #16]
 8007b02:	f7ff fcbd 	bl	8007480 <__hi0bits>
 8007b06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b0a:	e7e5      	b.n	8007ad8 <__d2b+0x74>
 8007b0c:	0800886d 	.word	0x0800886d
 8007b10:	080088de 	.word	0x080088de

08007b14 <__ratio>:
 8007b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b18:	b085      	sub	sp, #20
 8007b1a:	e9cd 1000 	strd	r1, r0, [sp]
 8007b1e:	a902      	add	r1, sp, #8
 8007b20:	f7ff ff56 	bl	80079d0 <__b2d>
 8007b24:	9800      	ldr	r0, [sp, #0]
 8007b26:	a903      	add	r1, sp, #12
 8007b28:	ec55 4b10 	vmov	r4, r5, d0
 8007b2c:	f7ff ff50 	bl	80079d0 <__b2d>
 8007b30:	9b01      	ldr	r3, [sp, #4]
 8007b32:	6919      	ldr	r1, [r3, #16]
 8007b34:	9b00      	ldr	r3, [sp, #0]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	1ac9      	subs	r1, r1, r3
 8007b3a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007b3e:	1a9b      	subs	r3, r3, r2
 8007b40:	ec5b ab10 	vmov	sl, fp, d0
 8007b44:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	bfce      	itee	gt
 8007b4c:	462a      	movgt	r2, r5
 8007b4e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007b52:	465a      	movle	r2, fp
 8007b54:	462f      	mov	r7, r5
 8007b56:	46d9      	mov	r9, fp
 8007b58:	bfcc      	ite	gt
 8007b5a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007b5e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007b62:	464b      	mov	r3, r9
 8007b64:	4652      	mov	r2, sl
 8007b66:	4620      	mov	r0, r4
 8007b68:	4639      	mov	r1, r7
 8007b6a:	f7f8 fe97 	bl	800089c <__aeabi_ddiv>
 8007b6e:	ec41 0b10 	vmov	d0, r0, r1
 8007b72:	b005      	add	sp, #20
 8007b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b78 <__copybits>:
 8007b78:	3901      	subs	r1, #1
 8007b7a:	b570      	push	{r4, r5, r6, lr}
 8007b7c:	1149      	asrs	r1, r1, #5
 8007b7e:	6914      	ldr	r4, [r2, #16]
 8007b80:	3101      	adds	r1, #1
 8007b82:	f102 0314 	add.w	r3, r2, #20
 8007b86:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007b8a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007b8e:	1f05      	subs	r5, r0, #4
 8007b90:	42a3      	cmp	r3, r4
 8007b92:	d30c      	bcc.n	8007bae <__copybits+0x36>
 8007b94:	1aa3      	subs	r3, r4, r2
 8007b96:	3b11      	subs	r3, #17
 8007b98:	f023 0303 	bic.w	r3, r3, #3
 8007b9c:	3211      	adds	r2, #17
 8007b9e:	42a2      	cmp	r2, r4
 8007ba0:	bf88      	it	hi
 8007ba2:	2300      	movhi	r3, #0
 8007ba4:	4418      	add	r0, r3
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	4288      	cmp	r0, r1
 8007baa:	d305      	bcc.n	8007bb8 <__copybits+0x40>
 8007bac:	bd70      	pop	{r4, r5, r6, pc}
 8007bae:	f853 6b04 	ldr.w	r6, [r3], #4
 8007bb2:	f845 6f04 	str.w	r6, [r5, #4]!
 8007bb6:	e7eb      	b.n	8007b90 <__copybits+0x18>
 8007bb8:	f840 3b04 	str.w	r3, [r0], #4
 8007bbc:	e7f4      	b.n	8007ba8 <__copybits+0x30>

08007bbe <__any_on>:
 8007bbe:	f100 0214 	add.w	r2, r0, #20
 8007bc2:	6900      	ldr	r0, [r0, #16]
 8007bc4:	114b      	asrs	r3, r1, #5
 8007bc6:	4298      	cmp	r0, r3
 8007bc8:	b510      	push	{r4, lr}
 8007bca:	db11      	blt.n	8007bf0 <__any_on+0x32>
 8007bcc:	dd0a      	ble.n	8007be4 <__any_on+0x26>
 8007bce:	f011 011f 	ands.w	r1, r1, #31
 8007bd2:	d007      	beq.n	8007be4 <__any_on+0x26>
 8007bd4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007bd8:	fa24 f001 	lsr.w	r0, r4, r1
 8007bdc:	fa00 f101 	lsl.w	r1, r0, r1
 8007be0:	428c      	cmp	r4, r1
 8007be2:	d10b      	bne.n	8007bfc <__any_on+0x3e>
 8007be4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d803      	bhi.n	8007bf4 <__any_on+0x36>
 8007bec:	2000      	movs	r0, #0
 8007bee:	bd10      	pop	{r4, pc}
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	e7f7      	b.n	8007be4 <__any_on+0x26>
 8007bf4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007bf8:	2900      	cmp	r1, #0
 8007bfa:	d0f5      	beq.n	8007be8 <__any_on+0x2a>
 8007bfc:	2001      	movs	r0, #1
 8007bfe:	e7f6      	b.n	8007bee <__any_on+0x30>

08007c00 <__ascii_wctomb>:
 8007c00:	4603      	mov	r3, r0
 8007c02:	4608      	mov	r0, r1
 8007c04:	b141      	cbz	r1, 8007c18 <__ascii_wctomb+0x18>
 8007c06:	2aff      	cmp	r2, #255	@ 0xff
 8007c08:	d904      	bls.n	8007c14 <__ascii_wctomb+0x14>
 8007c0a:	228a      	movs	r2, #138	@ 0x8a
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c12:	4770      	bx	lr
 8007c14:	700a      	strb	r2, [r1, #0]
 8007c16:	2001      	movs	r0, #1
 8007c18:	4770      	bx	lr
	...

08007c1c <__sflush_r>:
 8007c1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c24:	0716      	lsls	r6, r2, #28
 8007c26:	4605      	mov	r5, r0
 8007c28:	460c      	mov	r4, r1
 8007c2a:	d454      	bmi.n	8007cd6 <__sflush_r+0xba>
 8007c2c:	684b      	ldr	r3, [r1, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	dc02      	bgt.n	8007c38 <__sflush_r+0x1c>
 8007c32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	dd48      	ble.n	8007cca <__sflush_r+0xae>
 8007c38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c3a:	2e00      	cmp	r6, #0
 8007c3c:	d045      	beq.n	8007cca <__sflush_r+0xae>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007c44:	682f      	ldr	r7, [r5, #0]
 8007c46:	6a21      	ldr	r1, [r4, #32]
 8007c48:	602b      	str	r3, [r5, #0]
 8007c4a:	d030      	beq.n	8007cae <__sflush_r+0x92>
 8007c4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007c4e:	89a3      	ldrh	r3, [r4, #12]
 8007c50:	0759      	lsls	r1, r3, #29
 8007c52:	d505      	bpl.n	8007c60 <__sflush_r+0x44>
 8007c54:	6863      	ldr	r3, [r4, #4]
 8007c56:	1ad2      	subs	r2, r2, r3
 8007c58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c5a:	b10b      	cbz	r3, 8007c60 <__sflush_r+0x44>
 8007c5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c5e:	1ad2      	subs	r2, r2, r3
 8007c60:	2300      	movs	r3, #0
 8007c62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c64:	6a21      	ldr	r1, [r4, #32]
 8007c66:	4628      	mov	r0, r5
 8007c68:	47b0      	blx	r6
 8007c6a:	1c43      	adds	r3, r0, #1
 8007c6c:	89a3      	ldrh	r3, [r4, #12]
 8007c6e:	d106      	bne.n	8007c7e <__sflush_r+0x62>
 8007c70:	6829      	ldr	r1, [r5, #0]
 8007c72:	291d      	cmp	r1, #29
 8007c74:	d82b      	bhi.n	8007cce <__sflush_r+0xb2>
 8007c76:	4a2a      	ldr	r2, [pc, #168]	@ (8007d20 <__sflush_r+0x104>)
 8007c78:	410a      	asrs	r2, r1
 8007c7a:	07d6      	lsls	r6, r2, #31
 8007c7c:	d427      	bmi.n	8007cce <__sflush_r+0xb2>
 8007c7e:	2200      	movs	r2, #0
 8007c80:	6062      	str	r2, [r4, #4]
 8007c82:	04d9      	lsls	r1, r3, #19
 8007c84:	6922      	ldr	r2, [r4, #16]
 8007c86:	6022      	str	r2, [r4, #0]
 8007c88:	d504      	bpl.n	8007c94 <__sflush_r+0x78>
 8007c8a:	1c42      	adds	r2, r0, #1
 8007c8c:	d101      	bne.n	8007c92 <__sflush_r+0x76>
 8007c8e:	682b      	ldr	r3, [r5, #0]
 8007c90:	b903      	cbnz	r3, 8007c94 <__sflush_r+0x78>
 8007c92:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c96:	602f      	str	r7, [r5, #0]
 8007c98:	b1b9      	cbz	r1, 8007cca <__sflush_r+0xae>
 8007c9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c9e:	4299      	cmp	r1, r3
 8007ca0:	d002      	beq.n	8007ca8 <__sflush_r+0x8c>
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	f7fe feae 	bl	8006a04 <_free_r>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cac:	e00d      	b.n	8007cca <__sflush_r+0xae>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	47b0      	blx	r6
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	1c50      	adds	r0, r2, #1
 8007cb8:	d1c9      	bne.n	8007c4e <__sflush_r+0x32>
 8007cba:	682b      	ldr	r3, [r5, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d0c6      	beq.n	8007c4e <__sflush_r+0x32>
 8007cc0:	2b1d      	cmp	r3, #29
 8007cc2:	d001      	beq.n	8007cc8 <__sflush_r+0xac>
 8007cc4:	2b16      	cmp	r3, #22
 8007cc6:	d11e      	bne.n	8007d06 <__sflush_r+0xea>
 8007cc8:	602f      	str	r7, [r5, #0]
 8007cca:	2000      	movs	r0, #0
 8007ccc:	e022      	b.n	8007d14 <__sflush_r+0xf8>
 8007cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cd2:	b21b      	sxth	r3, r3
 8007cd4:	e01b      	b.n	8007d0e <__sflush_r+0xf2>
 8007cd6:	690f      	ldr	r7, [r1, #16]
 8007cd8:	2f00      	cmp	r7, #0
 8007cda:	d0f6      	beq.n	8007cca <__sflush_r+0xae>
 8007cdc:	0793      	lsls	r3, r2, #30
 8007cde:	680e      	ldr	r6, [r1, #0]
 8007ce0:	bf08      	it	eq
 8007ce2:	694b      	ldreq	r3, [r1, #20]
 8007ce4:	600f      	str	r7, [r1, #0]
 8007ce6:	bf18      	it	ne
 8007ce8:	2300      	movne	r3, #0
 8007cea:	eba6 0807 	sub.w	r8, r6, r7
 8007cee:	608b      	str	r3, [r1, #8]
 8007cf0:	f1b8 0f00 	cmp.w	r8, #0
 8007cf4:	dde9      	ble.n	8007cca <__sflush_r+0xae>
 8007cf6:	6a21      	ldr	r1, [r4, #32]
 8007cf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007cfa:	4643      	mov	r3, r8
 8007cfc:	463a      	mov	r2, r7
 8007cfe:	4628      	mov	r0, r5
 8007d00:	47b0      	blx	r6
 8007d02:	2800      	cmp	r0, #0
 8007d04:	dc08      	bgt.n	8007d18 <__sflush_r+0xfc>
 8007d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d0e:	81a3      	strh	r3, [r4, #12]
 8007d10:	f04f 30ff 	mov.w	r0, #4294967295
 8007d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d18:	4407      	add	r7, r0
 8007d1a:	eba8 0800 	sub.w	r8, r8, r0
 8007d1e:	e7e7      	b.n	8007cf0 <__sflush_r+0xd4>
 8007d20:	dfbffffe 	.word	0xdfbffffe

08007d24 <_fflush_r>:
 8007d24:	b538      	push	{r3, r4, r5, lr}
 8007d26:	690b      	ldr	r3, [r1, #16]
 8007d28:	4605      	mov	r5, r0
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	b913      	cbnz	r3, 8007d34 <_fflush_r+0x10>
 8007d2e:	2500      	movs	r5, #0
 8007d30:	4628      	mov	r0, r5
 8007d32:	bd38      	pop	{r3, r4, r5, pc}
 8007d34:	b118      	cbz	r0, 8007d3e <_fflush_r+0x1a>
 8007d36:	6a03      	ldr	r3, [r0, #32]
 8007d38:	b90b      	cbnz	r3, 8007d3e <_fflush_r+0x1a>
 8007d3a:	f7fe fcc1 	bl	80066c0 <__sinit>
 8007d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d0f3      	beq.n	8007d2e <_fflush_r+0xa>
 8007d46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007d48:	07d0      	lsls	r0, r2, #31
 8007d4a:	d404      	bmi.n	8007d56 <_fflush_r+0x32>
 8007d4c:	0599      	lsls	r1, r3, #22
 8007d4e:	d402      	bmi.n	8007d56 <_fflush_r+0x32>
 8007d50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d52:	f7fe fe16 	bl	8006982 <__retarget_lock_acquire_recursive>
 8007d56:	4628      	mov	r0, r5
 8007d58:	4621      	mov	r1, r4
 8007d5a:	f7ff ff5f 	bl	8007c1c <__sflush_r>
 8007d5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d60:	07da      	lsls	r2, r3, #31
 8007d62:	4605      	mov	r5, r0
 8007d64:	d4e4      	bmi.n	8007d30 <_fflush_r+0xc>
 8007d66:	89a3      	ldrh	r3, [r4, #12]
 8007d68:	059b      	lsls	r3, r3, #22
 8007d6a:	d4e1      	bmi.n	8007d30 <_fflush_r+0xc>
 8007d6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d6e:	f7fe fe09 	bl	8006984 <__retarget_lock_release_recursive>
 8007d72:	e7dd      	b.n	8007d30 <_fflush_r+0xc>

08007d74 <fiprintf>:
 8007d74:	b40e      	push	{r1, r2, r3}
 8007d76:	b503      	push	{r0, r1, lr}
 8007d78:	4601      	mov	r1, r0
 8007d7a:	ab03      	add	r3, sp, #12
 8007d7c:	4805      	ldr	r0, [pc, #20]	@ (8007d94 <fiprintf+0x20>)
 8007d7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d82:	6800      	ldr	r0, [r0, #0]
 8007d84:	9301      	str	r3, [sp, #4]
 8007d86:	f000 f85b 	bl	8007e40 <_vfiprintf_r>
 8007d8a:	b002      	add	sp, #8
 8007d8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d90:	b003      	add	sp, #12
 8007d92:	4770      	bx	lr
 8007d94:	200001a4 	.word	0x200001a4

08007d98 <_sbrk_r>:
 8007d98:	b538      	push	{r3, r4, r5, lr}
 8007d9a:	4d06      	ldr	r5, [pc, #24]	@ (8007db4 <_sbrk_r+0x1c>)
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	4604      	mov	r4, r0
 8007da0:	4608      	mov	r0, r1
 8007da2:	602b      	str	r3, [r5, #0]
 8007da4:	f7fb fb0a 	bl	80033bc <_sbrk>
 8007da8:	1c43      	adds	r3, r0, #1
 8007daa:	d102      	bne.n	8007db2 <_sbrk_r+0x1a>
 8007dac:	682b      	ldr	r3, [r5, #0]
 8007dae:	b103      	cbz	r3, 8007db2 <_sbrk_r+0x1a>
 8007db0:	6023      	str	r3, [r4, #0]
 8007db2:	bd38      	pop	{r3, r4, r5, pc}
 8007db4:	200005e4 	.word	0x200005e4

08007db8 <abort>:
 8007db8:	b508      	push	{r3, lr}
 8007dba:	2006      	movs	r0, #6
 8007dbc:	f000 fba2 	bl	8008504 <raise>
 8007dc0:	2001      	movs	r0, #1
 8007dc2:	f7fb fa83 	bl	80032cc <_exit>

08007dc6 <_calloc_r>:
 8007dc6:	b570      	push	{r4, r5, r6, lr}
 8007dc8:	fba1 5402 	umull	r5, r4, r1, r2
 8007dcc:	b93c      	cbnz	r4, 8007dde <_calloc_r+0x18>
 8007dce:	4629      	mov	r1, r5
 8007dd0:	f7ff f9c6 	bl	8007160 <_malloc_r>
 8007dd4:	4606      	mov	r6, r0
 8007dd6:	b928      	cbnz	r0, 8007de4 <_calloc_r+0x1e>
 8007dd8:	2600      	movs	r6, #0
 8007dda:	4630      	mov	r0, r6
 8007ddc:	bd70      	pop	{r4, r5, r6, pc}
 8007dde:	220c      	movs	r2, #12
 8007de0:	6002      	str	r2, [r0, #0]
 8007de2:	e7f9      	b.n	8007dd8 <_calloc_r+0x12>
 8007de4:	462a      	mov	r2, r5
 8007de6:	4621      	mov	r1, r4
 8007de8:	f7fe fce3 	bl	80067b2 <memset>
 8007dec:	e7f5      	b.n	8007dda <_calloc_r+0x14>

08007dee <__sfputc_r>:
 8007dee:	6893      	ldr	r3, [r2, #8]
 8007df0:	3b01      	subs	r3, #1
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	b410      	push	{r4}
 8007df6:	6093      	str	r3, [r2, #8]
 8007df8:	da08      	bge.n	8007e0c <__sfputc_r+0x1e>
 8007dfa:	6994      	ldr	r4, [r2, #24]
 8007dfc:	42a3      	cmp	r3, r4
 8007dfe:	db01      	blt.n	8007e04 <__sfputc_r+0x16>
 8007e00:	290a      	cmp	r1, #10
 8007e02:	d103      	bne.n	8007e0c <__sfputc_r+0x1e>
 8007e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e08:	f000 bac0 	b.w	800838c <__swbuf_r>
 8007e0c:	6813      	ldr	r3, [r2, #0]
 8007e0e:	1c58      	adds	r0, r3, #1
 8007e10:	6010      	str	r0, [r2, #0]
 8007e12:	7019      	strb	r1, [r3, #0]
 8007e14:	4608      	mov	r0, r1
 8007e16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <__sfputs_r>:
 8007e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1e:	4606      	mov	r6, r0
 8007e20:	460f      	mov	r7, r1
 8007e22:	4614      	mov	r4, r2
 8007e24:	18d5      	adds	r5, r2, r3
 8007e26:	42ac      	cmp	r4, r5
 8007e28:	d101      	bne.n	8007e2e <__sfputs_r+0x12>
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	e007      	b.n	8007e3e <__sfputs_r+0x22>
 8007e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e32:	463a      	mov	r2, r7
 8007e34:	4630      	mov	r0, r6
 8007e36:	f7ff ffda 	bl	8007dee <__sfputc_r>
 8007e3a:	1c43      	adds	r3, r0, #1
 8007e3c:	d1f3      	bne.n	8007e26 <__sfputs_r+0xa>
 8007e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007e40 <_vfiprintf_r>:
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	460d      	mov	r5, r1
 8007e46:	b09d      	sub	sp, #116	@ 0x74
 8007e48:	4614      	mov	r4, r2
 8007e4a:	4698      	mov	r8, r3
 8007e4c:	4606      	mov	r6, r0
 8007e4e:	b118      	cbz	r0, 8007e58 <_vfiprintf_r+0x18>
 8007e50:	6a03      	ldr	r3, [r0, #32]
 8007e52:	b90b      	cbnz	r3, 8007e58 <_vfiprintf_r+0x18>
 8007e54:	f7fe fc34 	bl	80066c0 <__sinit>
 8007e58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e5a:	07d9      	lsls	r1, r3, #31
 8007e5c:	d405      	bmi.n	8007e6a <_vfiprintf_r+0x2a>
 8007e5e:	89ab      	ldrh	r3, [r5, #12]
 8007e60:	059a      	lsls	r2, r3, #22
 8007e62:	d402      	bmi.n	8007e6a <_vfiprintf_r+0x2a>
 8007e64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e66:	f7fe fd8c 	bl	8006982 <__retarget_lock_acquire_recursive>
 8007e6a:	89ab      	ldrh	r3, [r5, #12]
 8007e6c:	071b      	lsls	r3, r3, #28
 8007e6e:	d501      	bpl.n	8007e74 <_vfiprintf_r+0x34>
 8007e70:	692b      	ldr	r3, [r5, #16]
 8007e72:	b99b      	cbnz	r3, 8007e9c <_vfiprintf_r+0x5c>
 8007e74:	4629      	mov	r1, r5
 8007e76:	4630      	mov	r0, r6
 8007e78:	f000 fac6 	bl	8008408 <__swsetup_r>
 8007e7c:	b170      	cbz	r0, 8007e9c <_vfiprintf_r+0x5c>
 8007e7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e80:	07dc      	lsls	r4, r3, #31
 8007e82:	d504      	bpl.n	8007e8e <_vfiprintf_r+0x4e>
 8007e84:	f04f 30ff 	mov.w	r0, #4294967295
 8007e88:	b01d      	add	sp, #116	@ 0x74
 8007e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e8e:	89ab      	ldrh	r3, [r5, #12]
 8007e90:	0598      	lsls	r0, r3, #22
 8007e92:	d4f7      	bmi.n	8007e84 <_vfiprintf_r+0x44>
 8007e94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e96:	f7fe fd75 	bl	8006984 <__retarget_lock_release_recursive>
 8007e9a:	e7f3      	b.n	8007e84 <_vfiprintf_r+0x44>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ea0:	2320      	movs	r3, #32
 8007ea2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ea6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007eaa:	2330      	movs	r3, #48	@ 0x30
 8007eac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800805c <_vfiprintf_r+0x21c>
 8007eb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007eb4:	f04f 0901 	mov.w	r9, #1
 8007eb8:	4623      	mov	r3, r4
 8007eba:	469a      	mov	sl, r3
 8007ebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ec0:	b10a      	cbz	r2, 8007ec6 <_vfiprintf_r+0x86>
 8007ec2:	2a25      	cmp	r2, #37	@ 0x25
 8007ec4:	d1f9      	bne.n	8007eba <_vfiprintf_r+0x7a>
 8007ec6:	ebba 0b04 	subs.w	fp, sl, r4
 8007eca:	d00b      	beq.n	8007ee4 <_vfiprintf_r+0xa4>
 8007ecc:	465b      	mov	r3, fp
 8007ece:	4622      	mov	r2, r4
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f7ff ffa2 	bl	8007e1c <__sfputs_r>
 8007ed8:	3001      	adds	r0, #1
 8007eda:	f000 80a7 	beq.w	800802c <_vfiprintf_r+0x1ec>
 8007ede:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ee0:	445a      	add	r2, fp
 8007ee2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 809f 	beq.w	800802c <_vfiprintf_r+0x1ec>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ef8:	f10a 0a01 	add.w	sl, sl, #1
 8007efc:	9304      	str	r3, [sp, #16]
 8007efe:	9307      	str	r3, [sp, #28]
 8007f00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f04:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f06:	4654      	mov	r4, sl
 8007f08:	2205      	movs	r2, #5
 8007f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f0e:	4853      	ldr	r0, [pc, #332]	@ (800805c <_vfiprintf_r+0x21c>)
 8007f10:	f7f8 f98e 	bl	8000230 <memchr>
 8007f14:	9a04      	ldr	r2, [sp, #16]
 8007f16:	b9d8      	cbnz	r0, 8007f50 <_vfiprintf_r+0x110>
 8007f18:	06d1      	lsls	r1, r2, #27
 8007f1a:	bf44      	itt	mi
 8007f1c:	2320      	movmi	r3, #32
 8007f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f22:	0713      	lsls	r3, r2, #28
 8007f24:	bf44      	itt	mi
 8007f26:	232b      	movmi	r3, #43	@ 0x2b
 8007f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f30:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f32:	d015      	beq.n	8007f60 <_vfiprintf_r+0x120>
 8007f34:	9a07      	ldr	r2, [sp, #28]
 8007f36:	4654      	mov	r4, sl
 8007f38:	2000      	movs	r0, #0
 8007f3a:	f04f 0c0a 	mov.w	ip, #10
 8007f3e:	4621      	mov	r1, r4
 8007f40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f44:	3b30      	subs	r3, #48	@ 0x30
 8007f46:	2b09      	cmp	r3, #9
 8007f48:	d94b      	bls.n	8007fe2 <_vfiprintf_r+0x1a2>
 8007f4a:	b1b0      	cbz	r0, 8007f7a <_vfiprintf_r+0x13a>
 8007f4c:	9207      	str	r2, [sp, #28]
 8007f4e:	e014      	b.n	8007f7a <_vfiprintf_r+0x13a>
 8007f50:	eba0 0308 	sub.w	r3, r0, r8
 8007f54:	fa09 f303 	lsl.w	r3, r9, r3
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	9304      	str	r3, [sp, #16]
 8007f5c:	46a2      	mov	sl, r4
 8007f5e:	e7d2      	b.n	8007f06 <_vfiprintf_r+0xc6>
 8007f60:	9b03      	ldr	r3, [sp, #12]
 8007f62:	1d19      	adds	r1, r3, #4
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	9103      	str	r1, [sp, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	bfbb      	ittet	lt
 8007f6c:	425b      	neglt	r3, r3
 8007f6e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f72:	9307      	strge	r3, [sp, #28]
 8007f74:	9307      	strlt	r3, [sp, #28]
 8007f76:	bfb8      	it	lt
 8007f78:	9204      	strlt	r2, [sp, #16]
 8007f7a:	7823      	ldrb	r3, [r4, #0]
 8007f7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f7e:	d10a      	bne.n	8007f96 <_vfiprintf_r+0x156>
 8007f80:	7863      	ldrb	r3, [r4, #1]
 8007f82:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f84:	d132      	bne.n	8007fec <_vfiprintf_r+0x1ac>
 8007f86:	9b03      	ldr	r3, [sp, #12]
 8007f88:	1d1a      	adds	r2, r3, #4
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	9203      	str	r2, [sp, #12]
 8007f8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f92:	3402      	adds	r4, #2
 8007f94:	9305      	str	r3, [sp, #20]
 8007f96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800806c <_vfiprintf_r+0x22c>
 8007f9a:	7821      	ldrb	r1, [r4, #0]
 8007f9c:	2203      	movs	r2, #3
 8007f9e:	4650      	mov	r0, sl
 8007fa0:	f7f8 f946 	bl	8000230 <memchr>
 8007fa4:	b138      	cbz	r0, 8007fb6 <_vfiprintf_r+0x176>
 8007fa6:	9b04      	ldr	r3, [sp, #16]
 8007fa8:	eba0 000a 	sub.w	r0, r0, sl
 8007fac:	2240      	movs	r2, #64	@ 0x40
 8007fae:	4082      	lsls	r2, r0
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	3401      	adds	r4, #1
 8007fb4:	9304      	str	r3, [sp, #16]
 8007fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fba:	4829      	ldr	r0, [pc, #164]	@ (8008060 <_vfiprintf_r+0x220>)
 8007fbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007fc0:	2206      	movs	r2, #6
 8007fc2:	f7f8 f935 	bl	8000230 <memchr>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	d03f      	beq.n	800804a <_vfiprintf_r+0x20a>
 8007fca:	4b26      	ldr	r3, [pc, #152]	@ (8008064 <_vfiprintf_r+0x224>)
 8007fcc:	bb1b      	cbnz	r3, 8008016 <_vfiprintf_r+0x1d6>
 8007fce:	9b03      	ldr	r3, [sp, #12]
 8007fd0:	3307      	adds	r3, #7
 8007fd2:	f023 0307 	bic.w	r3, r3, #7
 8007fd6:	3308      	adds	r3, #8
 8007fd8:	9303      	str	r3, [sp, #12]
 8007fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fdc:	443b      	add	r3, r7
 8007fde:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fe0:	e76a      	b.n	8007eb8 <_vfiprintf_r+0x78>
 8007fe2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	2001      	movs	r0, #1
 8007fea:	e7a8      	b.n	8007f3e <_vfiprintf_r+0xfe>
 8007fec:	2300      	movs	r3, #0
 8007fee:	3401      	adds	r4, #1
 8007ff0:	9305      	str	r3, [sp, #20]
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	f04f 0c0a 	mov.w	ip, #10
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ffe:	3a30      	subs	r2, #48	@ 0x30
 8008000:	2a09      	cmp	r2, #9
 8008002:	d903      	bls.n	800800c <_vfiprintf_r+0x1cc>
 8008004:	2b00      	cmp	r3, #0
 8008006:	d0c6      	beq.n	8007f96 <_vfiprintf_r+0x156>
 8008008:	9105      	str	r1, [sp, #20]
 800800a:	e7c4      	b.n	8007f96 <_vfiprintf_r+0x156>
 800800c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008010:	4604      	mov	r4, r0
 8008012:	2301      	movs	r3, #1
 8008014:	e7f0      	b.n	8007ff8 <_vfiprintf_r+0x1b8>
 8008016:	ab03      	add	r3, sp, #12
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	462a      	mov	r2, r5
 800801c:	4b12      	ldr	r3, [pc, #72]	@ (8008068 <_vfiprintf_r+0x228>)
 800801e:	a904      	add	r1, sp, #16
 8008020:	4630      	mov	r0, r6
 8008022:	f3af 8000 	nop.w
 8008026:	4607      	mov	r7, r0
 8008028:	1c78      	adds	r0, r7, #1
 800802a:	d1d6      	bne.n	8007fda <_vfiprintf_r+0x19a>
 800802c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800802e:	07d9      	lsls	r1, r3, #31
 8008030:	d405      	bmi.n	800803e <_vfiprintf_r+0x1fe>
 8008032:	89ab      	ldrh	r3, [r5, #12]
 8008034:	059a      	lsls	r2, r3, #22
 8008036:	d402      	bmi.n	800803e <_vfiprintf_r+0x1fe>
 8008038:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800803a:	f7fe fca3 	bl	8006984 <__retarget_lock_release_recursive>
 800803e:	89ab      	ldrh	r3, [r5, #12]
 8008040:	065b      	lsls	r3, r3, #25
 8008042:	f53f af1f 	bmi.w	8007e84 <_vfiprintf_r+0x44>
 8008046:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008048:	e71e      	b.n	8007e88 <_vfiprintf_r+0x48>
 800804a:	ab03      	add	r3, sp, #12
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	462a      	mov	r2, r5
 8008050:	4b05      	ldr	r3, [pc, #20]	@ (8008068 <_vfiprintf_r+0x228>)
 8008052:	a904      	add	r1, sp, #16
 8008054:	4630      	mov	r0, r6
 8008056:	f000 f879 	bl	800814c <_printf_i>
 800805a:	e7e4      	b.n	8008026 <_vfiprintf_r+0x1e6>
 800805c:	08008b39 	.word	0x08008b39
 8008060:	08008b43 	.word	0x08008b43
 8008064:	00000000 	.word	0x00000000
 8008068:	08007e1d 	.word	0x08007e1d
 800806c:	08008b3f 	.word	0x08008b3f

08008070 <_printf_common>:
 8008070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008074:	4616      	mov	r6, r2
 8008076:	4698      	mov	r8, r3
 8008078:	688a      	ldr	r2, [r1, #8]
 800807a:	690b      	ldr	r3, [r1, #16]
 800807c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008080:	4293      	cmp	r3, r2
 8008082:	bfb8      	it	lt
 8008084:	4613      	movlt	r3, r2
 8008086:	6033      	str	r3, [r6, #0]
 8008088:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800808c:	4607      	mov	r7, r0
 800808e:	460c      	mov	r4, r1
 8008090:	b10a      	cbz	r2, 8008096 <_printf_common+0x26>
 8008092:	3301      	adds	r3, #1
 8008094:	6033      	str	r3, [r6, #0]
 8008096:	6823      	ldr	r3, [r4, #0]
 8008098:	0699      	lsls	r1, r3, #26
 800809a:	bf42      	ittt	mi
 800809c:	6833      	ldrmi	r3, [r6, #0]
 800809e:	3302      	addmi	r3, #2
 80080a0:	6033      	strmi	r3, [r6, #0]
 80080a2:	6825      	ldr	r5, [r4, #0]
 80080a4:	f015 0506 	ands.w	r5, r5, #6
 80080a8:	d106      	bne.n	80080b8 <_printf_common+0x48>
 80080aa:	f104 0a19 	add.w	sl, r4, #25
 80080ae:	68e3      	ldr	r3, [r4, #12]
 80080b0:	6832      	ldr	r2, [r6, #0]
 80080b2:	1a9b      	subs	r3, r3, r2
 80080b4:	42ab      	cmp	r3, r5
 80080b6:	dc26      	bgt.n	8008106 <_printf_common+0x96>
 80080b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80080bc:	6822      	ldr	r2, [r4, #0]
 80080be:	3b00      	subs	r3, #0
 80080c0:	bf18      	it	ne
 80080c2:	2301      	movne	r3, #1
 80080c4:	0692      	lsls	r2, r2, #26
 80080c6:	d42b      	bmi.n	8008120 <_printf_common+0xb0>
 80080c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80080cc:	4641      	mov	r1, r8
 80080ce:	4638      	mov	r0, r7
 80080d0:	47c8      	blx	r9
 80080d2:	3001      	adds	r0, #1
 80080d4:	d01e      	beq.n	8008114 <_printf_common+0xa4>
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	6922      	ldr	r2, [r4, #16]
 80080da:	f003 0306 	and.w	r3, r3, #6
 80080de:	2b04      	cmp	r3, #4
 80080e0:	bf02      	ittt	eq
 80080e2:	68e5      	ldreq	r5, [r4, #12]
 80080e4:	6833      	ldreq	r3, [r6, #0]
 80080e6:	1aed      	subeq	r5, r5, r3
 80080e8:	68a3      	ldr	r3, [r4, #8]
 80080ea:	bf0c      	ite	eq
 80080ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080f0:	2500      	movne	r5, #0
 80080f2:	4293      	cmp	r3, r2
 80080f4:	bfc4      	itt	gt
 80080f6:	1a9b      	subgt	r3, r3, r2
 80080f8:	18ed      	addgt	r5, r5, r3
 80080fa:	2600      	movs	r6, #0
 80080fc:	341a      	adds	r4, #26
 80080fe:	42b5      	cmp	r5, r6
 8008100:	d11a      	bne.n	8008138 <_printf_common+0xc8>
 8008102:	2000      	movs	r0, #0
 8008104:	e008      	b.n	8008118 <_printf_common+0xa8>
 8008106:	2301      	movs	r3, #1
 8008108:	4652      	mov	r2, sl
 800810a:	4641      	mov	r1, r8
 800810c:	4638      	mov	r0, r7
 800810e:	47c8      	blx	r9
 8008110:	3001      	adds	r0, #1
 8008112:	d103      	bne.n	800811c <_printf_common+0xac>
 8008114:	f04f 30ff 	mov.w	r0, #4294967295
 8008118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800811c:	3501      	adds	r5, #1
 800811e:	e7c6      	b.n	80080ae <_printf_common+0x3e>
 8008120:	18e1      	adds	r1, r4, r3
 8008122:	1c5a      	adds	r2, r3, #1
 8008124:	2030      	movs	r0, #48	@ 0x30
 8008126:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800812a:	4422      	add	r2, r4
 800812c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008130:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008134:	3302      	adds	r3, #2
 8008136:	e7c7      	b.n	80080c8 <_printf_common+0x58>
 8008138:	2301      	movs	r3, #1
 800813a:	4622      	mov	r2, r4
 800813c:	4641      	mov	r1, r8
 800813e:	4638      	mov	r0, r7
 8008140:	47c8      	blx	r9
 8008142:	3001      	adds	r0, #1
 8008144:	d0e6      	beq.n	8008114 <_printf_common+0xa4>
 8008146:	3601      	adds	r6, #1
 8008148:	e7d9      	b.n	80080fe <_printf_common+0x8e>
	...

0800814c <_printf_i>:
 800814c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008150:	7e0f      	ldrb	r7, [r1, #24]
 8008152:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008154:	2f78      	cmp	r7, #120	@ 0x78
 8008156:	4691      	mov	r9, r2
 8008158:	4680      	mov	r8, r0
 800815a:	460c      	mov	r4, r1
 800815c:	469a      	mov	sl, r3
 800815e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008162:	d807      	bhi.n	8008174 <_printf_i+0x28>
 8008164:	2f62      	cmp	r7, #98	@ 0x62
 8008166:	d80a      	bhi.n	800817e <_printf_i+0x32>
 8008168:	2f00      	cmp	r7, #0
 800816a:	f000 80d2 	beq.w	8008312 <_printf_i+0x1c6>
 800816e:	2f58      	cmp	r7, #88	@ 0x58
 8008170:	f000 80b9 	beq.w	80082e6 <_printf_i+0x19a>
 8008174:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008178:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800817c:	e03a      	b.n	80081f4 <_printf_i+0xa8>
 800817e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008182:	2b15      	cmp	r3, #21
 8008184:	d8f6      	bhi.n	8008174 <_printf_i+0x28>
 8008186:	a101      	add	r1, pc, #4	@ (adr r1, 800818c <_printf_i+0x40>)
 8008188:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800818c:	080081e5 	.word	0x080081e5
 8008190:	080081f9 	.word	0x080081f9
 8008194:	08008175 	.word	0x08008175
 8008198:	08008175 	.word	0x08008175
 800819c:	08008175 	.word	0x08008175
 80081a0:	08008175 	.word	0x08008175
 80081a4:	080081f9 	.word	0x080081f9
 80081a8:	08008175 	.word	0x08008175
 80081ac:	08008175 	.word	0x08008175
 80081b0:	08008175 	.word	0x08008175
 80081b4:	08008175 	.word	0x08008175
 80081b8:	080082f9 	.word	0x080082f9
 80081bc:	08008223 	.word	0x08008223
 80081c0:	080082b3 	.word	0x080082b3
 80081c4:	08008175 	.word	0x08008175
 80081c8:	08008175 	.word	0x08008175
 80081cc:	0800831b 	.word	0x0800831b
 80081d0:	08008175 	.word	0x08008175
 80081d4:	08008223 	.word	0x08008223
 80081d8:	08008175 	.word	0x08008175
 80081dc:	08008175 	.word	0x08008175
 80081e0:	080082bb 	.word	0x080082bb
 80081e4:	6833      	ldr	r3, [r6, #0]
 80081e6:	1d1a      	adds	r2, r3, #4
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	6032      	str	r2, [r6, #0]
 80081ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80081f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80081f4:	2301      	movs	r3, #1
 80081f6:	e09d      	b.n	8008334 <_printf_i+0x1e8>
 80081f8:	6833      	ldr	r3, [r6, #0]
 80081fa:	6820      	ldr	r0, [r4, #0]
 80081fc:	1d19      	adds	r1, r3, #4
 80081fe:	6031      	str	r1, [r6, #0]
 8008200:	0606      	lsls	r6, r0, #24
 8008202:	d501      	bpl.n	8008208 <_printf_i+0xbc>
 8008204:	681d      	ldr	r5, [r3, #0]
 8008206:	e003      	b.n	8008210 <_printf_i+0xc4>
 8008208:	0645      	lsls	r5, r0, #25
 800820a:	d5fb      	bpl.n	8008204 <_printf_i+0xb8>
 800820c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008210:	2d00      	cmp	r5, #0
 8008212:	da03      	bge.n	800821c <_printf_i+0xd0>
 8008214:	232d      	movs	r3, #45	@ 0x2d
 8008216:	426d      	negs	r5, r5
 8008218:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800821c:	4859      	ldr	r0, [pc, #356]	@ (8008384 <_printf_i+0x238>)
 800821e:	230a      	movs	r3, #10
 8008220:	e011      	b.n	8008246 <_printf_i+0xfa>
 8008222:	6821      	ldr	r1, [r4, #0]
 8008224:	6833      	ldr	r3, [r6, #0]
 8008226:	0608      	lsls	r0, r1, #24
 8008228:	f853 5b04 	ldr.w	r5, [r3], #4
 800822c:	d402      	bmi.n	8008234 <_printf_i+0xe8>
 800822e:	0649      	lsls	r1, r1, #25
 8008230:	bf48      	it	mi
 8008232:	b2ad      	uxthmi	r5, r5
 8008234:	2f6f      	cmp	r7, #111	@ 0x6f
 8008236:	4853      	ldr	r0, [pc, #332]	@ (8008384 <_printf_i+0x238>)
 8008238:	6033      	str	r3, [r6, #0]
 800823a:	bf14      	ite	ne
 800823c:	230a      	movne	r3, #10
 800823e:	2308      	moveq	r3, #8
 8008240:	2100      	movs	r1, #0
 8008242:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008246:	6866      	ldr	r6, [r4, #4]
 8008248:	60a6      	str	r6, [r4, #8]
 800824a:	2e00      	cmp	r6, #0
 800824c:	bfa2      	ittt	ge
 800824e:	6821      	ldrge	r1, [r4, #0]
 8008250:	f021 0104 	bicge.w	r1, r1, #4
 8008254:	6021      	strge	r1, [r4, #0]
 8008256:	b90d      	cbnz	r5, 800825c <_printf_i+0x110>
 8008258:	2e00      	cmp	r6, #0
 800825a:	d04b      	beq.n	80082f4 <_printf_i+0x1a8>
 800825c:	4616      	mov	r6, r2
 800825e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008262:	fb03 5711 	mls	r7, r3, r1, r5
 8008266:	5dc7      	ldrb	r7, [r0, r7]
 8008268:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800826c:	462f      	mov	r7, r5
 800826e:	42bb      	cmp	r3, r7
 8008270:	460d      	mov	r5, r1
 8008272:	d9f4      	bls.n	800825e <_printf_i+0x112>
 8008274:	2b08      	cmp	r3, #8
 8008276:	d10b      	bne.n	8008290 <_printf_i+0x144>
 8008278:	6823      	ldr	r3, [r4, #0]
 800827a:	07df      	lsls	r7, r3, #31
 800827c:	d508      	bpl.n	8008290 <_printf_i+0x144>
 800827e:	6923      	ldr	r3, [r4, #16]
 8008280:	6861      	ldr	r1, [r4, #4]
 8008282:	4299      	cmp	r1, r3
 8008284:	bfde      	ittt	le
 8008286:	2330      	movle	r3, #48	@ 0x30
 8008288:	f806 3c01 	strble.w	r3, [r6, #-1]
 800828c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008290:	1b92      	subs	r2, r2, r6
 8008292:	6122      	str	r2, [r4, #16]
 8008294:	f8cd a000 	str.w	sl, [sp]
 8008298:	464b      	mov	r3, r9
 800829a:	aa03      	add	r2, sp, #12
 800829c:	4621      	mov	r1, r4
 800829e:	4640      	mov	r0, r8
 80082a0:	f7ff fee6 	bl	8008070 <_printf_common>
 80082a4:	3001      	adds	r0, #1
 80082a6:	d14a      	bne.n	800833e <_printf_i+0x1f2>
 80082a8:	f04f 30ff 	mov.w	r0, #4294967295
 80082ac:	b004      	add	sp, #16
 80082ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b2:	6823      	ldr	r3, [r4, #0]
 80082b4:	f043 0320 	orr.w	r3, r3, #32
 80082b8:	6023      	str	r3, [r4, #0]
 80082ba:	4833      	ldr	r0, [pc, #204]	@ (8008388 <_printf_i+0x23c>)
 80082bc:	2778      	movs	r7, #120	@ 0x78
 80082be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	6831      	ldr	r1, [r6, #0]
 80082c6:	061f      	lsls	r7, r3, #24
 80082c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80082cc:	d402      	bmi.n	80082d4 <_printf_i+0x188>
 80082ce:	065f      	lsls	r7, r3, #25
 80082d0:	bf48      	it	mi
 80082d2:	b2ad      	uxthmi	r5, r5
 80082d4:	6031      	str	r1, [r6, #0]
 80082d6:	07d9      	lsls	r1, r3, #31
 80082d8:	bf44      	itt	mi
 80082da:	f043 0320 	orrmi.w	r3, r3, #32
 80082de:	6023      	strmi	r3, [r4, #0]
 80082e0:	b11d      	cbz	r5, 80082ea <_printf_i+0x19e>
 80082e2:	2310      	movs	r3, #16
 80082e4:	e7ac      	b.n	8008240 <_printf_i+0xf4>
 80082e6:	4827      	ldr	r0, [pc, #156]	@ (8008384 <_printf_i+0x238>)
 80082e8:	e7e9      	b.n	80082be <_printf_i+0x172>
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	f023 0320 	bic.w	r3, r3, #32
 80082f0:	6023      	str	r3, [r4, #0]
 80082f2:	e7f6      	b.n	80082e2 <_printf_i+0x196>
 80082f4:	4616      	mov	r6, r2
 80082f6:	e7bd      	b.n	8008274 <_printf_i+0x128>
 80082f8:	6833      	ldr	r3, [r6, #0]
 80082fa:	6825      	ldr	r5, [r4, #0]
 80082fc:	6961      	ldr	r1, [r4, #20]
 80082fe:	1d18      	adds	r0, r3, #4
 8008300:	6030      	str	r0, [r6, #0]
 8008302:	062e      	lsls	r6, r5, #24
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	d501      	bpl.n	800830c <_printf_i+0x1c0>
 8008308:	6019      	str	r1, [r3, #0]
 800830a:	e002      	b.n	8008312 <_printf_i+0x1c6>
 800830c:	0668      	lsls	r0, r5, #25
 800830e:	d5fb      	bpl.n	8008308 <_printf_i+0x1bc>
 8008310:	8019      	strh	r1, [r3, #0]
 8008312:	2300      	movs	r3, #0
 8008314:	6123      	str	r3, [r4, #16]
 8008316:	4616      	mov	r6, r2
 8008318:	e7bc      	b.n	8008294 <_printf_i+0x148>
 800831a:	6833      	ldr	r3, [r6, #0]
 800831c:	1d1a      	adds	r2, r3, #4
 800831e:	6032      	str	r2, [r6, #0]
 8008320:	681e      	ldr	r6, [r3, #0]
 8008322:	6862      	ldr	r2, [r4, #4]
 8008324:	2100      	movs	r1, #0
 8008326:	4630      	mov	r0, r6
 8008328:	f7f7 ff82 	bl	8000230 <memchr>
 800832c:	b108      	cbz	r0, 8008332 <_printf_i+0x1e6>
 800832e:	1b80      	subs	r0, r0, r6
 8008330:	6060      	str	r0, [r4, #4]
 8008332:	6863      	ldr	r3, [r4, #4]
 8008334:	6123      	str	r3, [r4, #16]
 8008336:	2300      	movs	r3, #0
 8008338:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800833c:	e7aa      	b.n	8008294 <_printf_i+0x148>
 800833e:	6923      	ldr	r3, [r4, #16]
 8008340:	4632      	mov	r2, r6
 8008342:	4649      	mov	r1, r9
 8008344:	4640      	mov	r0, r8
 8008346:	47d0      	blx	sl
 8008348:	3001      	adds	r0, #1
 800834a:	d0ad      	beq.n	80082a8 <_printf_i+0x15c>
 800834c:	6823      	ldr	r3, [r4, #0]
 800834e:	079b      	lsls	r3, r3, #30
 8008350:	d413      	bmi.n	800837a <_printf_i+0x22e>
 8008352:	68e0      	ldr	r0, [r4, #12]
 8008354:	9b03      	ldr	r3, [sp, #12]
 8008356:	4298      	cmp	r0, r3
 8008358:	bfb8      	it	lt
 800835a:	4618      	movlt	r0, r3
 800835c:	e7a6      	b.n	80082ac <_printf_i+0x160>
 800835e:	2301      	movs	r3, #1
 8008360:	4632      	mov	r2, r6
 8008362:	4649      	mov	r1, r9
 8008364:	4640      	mov	r0, r8
 8008366:	47d0      	blx	sl
 8008368:	3001      	adds	r0, #1
 800836a:	d09d      	beq.n	80082a8 <_printf_i+0x15c>
 800836c:	3501      	adds	r5, #1
 800836e:	68e3      	ldr	r3, [r4, #12]
 8008370:	9903      	ldr	r1, [sp, #12]
 8008372:	1a5b      	subs	r3, r3, r1
 8008374:	42ab      	cmp	r3, r5
 8008376:	dcf2      	bgt.n	800835e <_printf_i+0x212>
 8008378:	e7eb      	b.n	8008352 <_printf_i+0x206>
 800837a:	2500      	movs	r5, #0
 800837c:	f104 0619 	add.w	r6, r4, #25
 8008380:	e7f5      	b.n	800836e <_printf_i+0x222>
 8008382:	bf00      	nop
 8008384:	08008b4a 	.word	0x08008b4a
 8008388:	08008b5b 	.word	0x08008b5b

0800838c <__swbuf_r>:
 800838c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838e:	460e      	mov	r6, r1
 8008390:	4614      	mov	r4, r2
 8008392:	4605      	mov	r5, r0
 8008394:	b118      	cbz	r0, 800839e <__swbuf_r+0x12>
 8008396:	6a03      	ldr	r3, [r0, #32]
 8008398:	b90b      	cbnz	r3, 800839e <__swbuf_r+0x12>
 800839a:	f7fe f991 	bl	80066c0 <__sinit>
 800839e:	69a3      	ldr	r3, [r4, #24]
 80083a0:	60a3      	str	r3, [r4, #8]
 80083a2:	89a3      	ldrh	r3, [r4, #12]
 80083a4:	071a      	lsls	r2, r3, #28
 80083a6:	d501      	bpl.n	80083ac <__swbuf_r+0x20>
 80083a8:	6923      	ldr	r3, [r4, #16]
 80083aa:	b943      	cbnz	r3, 80083be <__swbuf_r+0x32>
 80083ac:	4621      	mov	r1, r4
 80083ae:	4628      	mov	r0, r5
 80083b0:	f000 f82a 	bl	8008408 <__swsetup_r>
 80083b4:	b118      	cbz	r0, 80083be <__swbuf_r+0x32>
 80083b6:	f04f 37ff 	mov.w	r7, #4294967295
 80083ba:	4638      	mov	r0, r7
 80083bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083be:	6823      	ldr	r3, [r4, #0]
 80083c0:	6922      	ldr	r2, [r4, #16]
 80083c2:	1a98      	subs	r0, r3, r2
 80083c4:	6963      	ldr	r3, [r4, #20]
 80083c6:	b2f6      	uxtb	r6, r6
 80083c8:	4283      	cmp	r3, r0
 80083ca:	4637      	mov	r7, r6
 80083cc:	dc05      	bgt.n	80083da <__swbuf_r+0x4e>
 80083ce:	4621      	mov	r1, r4
 80083d0:	4628      	mov	r0, r5
 80083d2:	f7ff fca7 	bl	8007d24 <_fflush_r>
 80083d6:	2800      	cmp	r0, #0
 80083d8:	d1ed      	bne.n	80083b6 <__swbuf_r+0x2a>
 80083da:	68a3      	ldr	r3, [r4, #8]
 80083dc:	3b01      	subs	r3, #1
 80083de:	60a3      	str	r3, [r4, #8]
 80083e0:	6823      	ldr	r3, [r4, #0]
 80083e2:	1c5a      	adds	r2, r3, #1
 80083e4:	6022      	str	r2, [r4, #0]
 80083e6:	701e      	strb	r6, [r3, #0]
 80083e8:	6962      	ldr	r2, [r4, #20]
 80083ea:	1c43      	adds	r3, r0, #1
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d004      	beq.n	80083fa <__swbuf_r+0x6e>
 80083f0:	89a3      	ldrh	r3, [r4, #12]
 80083f2:	07db      	lsls	r3, r3, #31
 80083f4:	d5e1      	bpl.n	80083ba <__swbuf_r+0x2e>
 80083f6:	2e0a      	cmp	r6, #10
 80083f8:	d1df      	bne.n	80083ba <__swbuf_r+0x2e>
 80083fa:	4621      	mov	r1, r4
 80083fc:	4628      	mov	r0, r5
 80083fe:	f7ff fc91 	bl	8007d24 <_fflush_r>
 8008402:	2800      	cmp	r0, #0
 8008404:	d0d9      	beq.n	80083ba <__swbuf_r+0x2e>
 8008406:	e7d6      	b.n	80083b6 <__swbuf_r+0x2a>

08008408 <__swsetup_r>:
 8008408:	b538      	push	{r3, r4, r5, lr}
 800840a:	4b29      	ldr	r3, [pc, #164]	@ (80084b0 <__swsetup_r+0xa8>)
 800840c:	4605      	mov	r5, r0
 800840e:	6818      	ldr	r0, [r3, #0]
 8008410:	460c      	mov	r4, r1
 8008412:	b118      	cbz	r0, 800841c <__swsetup_r+0x14>
 8008414:	6a03      	ldr	r3, [r0, #32]
 8008416:	b90b      	cbnz	r3, 800841c <__swsetup_r+0x14>
 8008418:	f7fe f952 	bl	80066c0 <__sinit>
 800841c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008420:	0719      	lsls	r1, r3, #28
 8008422:	d422      	bmi.n	800846a <__swsetup_r+0x62>
 8008424:	06da      	lsls	r2, r3, #27
 8008426:	d407      	bmi.n	8008438 <__swsetup_r+0x30>
 8008428:	2209      	movs	r2, #9
 800842a:	602a      	str	r2, [r5, #0]
 800842c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008430:	81a3      	strh	r3, [r4, #12]
 8008432:	f04f 30ff 	mov.w	r0, #4294967295
 8008436:	e033      	b.n	80084a0 <__swsetup_r+0x98>
 8008438:	0758      	lsls	r0, r3, #29
 800843a:	d512      	bpl.n	8008462 <__swsetup_r+0x5a>
 800843c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800843e:	b141      	cbz	r1, 8008452 <__swsetup_r+0x4a>
 8008440:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008444:	4299      	cmp	r1, r3
 8008446:	d002      	beq.n	800844e <__swsetup_r+0x46>
 8008448:	4628      	mov	r0, r5
 800844a:	f7fe fadb 	bl	8006a04 <_free_r>
 800844e:	2300      	movs	r3, #0
 8008450:	6363      	str	r3, [r4, #52]	@ 0x34
 8008452:	89a3      	ldrh	r3, [r4, #12]
 8008454:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008458:	81a3      	strh	r3, [r4, #12]
 800845a:	2300      	movs	r3, #0
 800845c:	6063      	str	r3, [r4, #4]
 800845e:	6923      	ldr	r3, [r4, #16]
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	f043 0308 	orr.w	r3, r3, #8
 8008468:	81a3      	strh	r3, [r4, #12]
 800846a:	6923      	ldr	r3, [r4, #16]
 800846c:	b94b      	cbnz	r3, 8008482 <__swsetup_r+0x7a>
 800846e:	89a3      	ldrh	r3, [r4, #12]
 8008470:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008474:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008478:	d003      	beq.n	8008482 <__swsetup_r+0x7a>
 800847a:	4621      	mov	r1, r4
 800847c:	4628      	mov	r0, r5
 800847e:	f000 f883 	bl	8008588 <__smakebuf_r>
 8008482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008486:	f013 0201 	ands.w	r2, r3, #1
 800848a:	d00a      	beq.n	80084a2 <__swsetup_r+0x9a>
 800848c:	2200      	movs	r2, #0
 800848e:	60a2      	str	r2, [r4, #8]
 8008490:	6962      	ldr	r2, [r4, #20]
 8008492:	4252      	negs	r2, r2
 8008494:	61a2      	str	r2, [r4, #24]
 8008496:	6922      	ldr	r2, [r4, #16]
 8008498:	b942      	cbnz	r2, 80084ac <__swsetup_r+0xa4>
 800849a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800849e:	d1c5      	bne.n	800842c <__swsetup_r+0x24>
 80084a0:	bd38      	pop	{r3, r4, r5, pc}
 80084a2:	0799      	lsls	r1, r3, #30
 80084a4:	bf58      	it	pl
 80084a6:	6962      	ldrpl	r2, [r4, #20]
 80084a8:	60a2      	str	r2, [r4, #8]
 80084aa:	e7f4      	b.n	8008496 <__swsetup_r+0x8e>
 80084ac:	2000      	movs	r0, #0
 80084ae:	e7f7      	b.n	80084a0 <__swsetup_r+0x98>
 80084b0:	200001a4 	.word	0x200001a4

080084b4 <_raise_r>:
 80084b4:	291f      	cmp	r1, #31
 80084b6:	b538      	push	{r3, r4, r5, lr}
 80084b8:	4605      	mov	r5, r0
 80084ba:	460c      	mov	r4, r1
 80084bc:	d904      	bls.n	80084c8 <_raise_r+0x14>
 80084be:	2316      	movs	r3, #22
 80084c0:	6003      	str	r3, [r0, #0]
 80084c2:	f04f 30ff 	mov.w	r0, #4294967295
 80084c6:	bd38      	pop	{r3, r4, r5, pc}
 80084c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80084ca:	b112      	cbz	r2, 80084d2 <_raise_r+0x1e>
 80084cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084d0:	b94b      	cbnz	r3, 80084e6 <_raise_r+0x32>
 80084d2:	4628      	mov	r0, r5
 80084d4:	f000 f830 	bl	8008538 <_getpid_r>
 80084d8:	4622      	mov	r2, r4
 80084da:	4601      	mov	r1, r0
 80084dc:	4628      	mov	r0, r5
 80084de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084e2:	f000 b817 	b.w	8008514 <_kill_r>
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d00a      	beq.n	8008500 <_raise_r+0x4c>
 80084ea:	1c59      	adds	r1, r3, #1
 80084ec:	d103      	bne.n	80084f6 <_raise_r+0x42>
 80084ee:	2316      	movs	r3, #22
 80084f0:	6003      	str	r3, [r0, #0]
 80084f2:	2001      	movs	r0, #1
 80084f4:	e7e7      	b.n	80084c6 <_raise_r+0x12>
 80084f6:	2100      	movs	r1, #0
 80084f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80084fc:	4620      	mov	r0, r4
 80084fe:	4798      	blx	r3
 8008500:	2000      	movs	r0, #0
 8008502:	e7e0      	b.n	80084c6 <_raise_r+0x12>

08008504 <raise>:
 8008504:	4b02      	ldr	r3, [pc, #8]	@ (8008510 <raise+0xc>)
 8008506:	4601      	mov	r1, r0
 8008508:	6818      	ldr	r0, [r3, #0]
 800850a:	f7ff bfd3 	b.w	80084b4 <_raise_r>
 800850e:	bf00      	nop
 8008510:	200001a4 	.word	0x200001a4

08008514 <_kill_r>:
 8008514:	b538      	push	{r3, r4, r5, lr}
 8008516:	4d07      	ldr	r5, [pc, #28]	@ (8008534 <_kill_r+0x20>)
 8008518:	2300      	movs	r3, #0
 800851a:	4604      	mov	r4, r0
 800851c:	4608      	mov	r0, r1
 800851e:	4611      	mov	r1, r2
 8008520:	602b      	str	r3, [r5, #0]
 8008522:	f7fa fec3 	bl	80032ac <_kill>
 8008526:	1c43      	adds	r3, r0, #1
 8008528:	d102      	bne.n	8008530 <_kill_r+0x1c>
 800852a:	682b      	ldr	r3, [r5, #0]
 800852c:	b103      	cbz	r3, 8008530 <_kill_r+0x1c>
 800852e:	6023      	str	r3, [r4, #0]
 8008530:	bd38      	pop	{r3, r4, r5, pc}
 8008532:	bf00      	nop
 8008534:	200005e4 	.word	0x200005e4

08008538 <_getpid_r>:
 8008538:	f7fa beb0 	b.w	800329c <_getpid>

0800853c <__swhatbuf_r>:
 800853c:	b570      	push	{r4, r5, r6, lr}
 800853e:	460c      	mov	r4, r1
 8008540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008544:	2900      	cmp	r1, #0
 8008546:	b096      	sub	sp, #88	@ 0x58
 8008548:	4615      	mov	r5, r2
 800854a:	461e      	mov	r6, r3
 800854c:	da0d      	bge.n	800856a <__swhatbuf_r+0x2e>
 800854e:	89a3      	ldrh	r3, [r4, #12]
 8008550:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008554:	f04f 0100 	mov.w	r1, #0
 8008558:	bf14      	ite	ne
 800855a:	2340      	movne	r3, #64	@ 0x40
 800855c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008560:	2000      	movs	r0, #0
 8008562:	6031      	str	r1, [r6, #0]
 8008564:	602b      	str	r3, [r5, #0]
 8008566:	b016      	add	sp, #88	@ 0x58
 8008568:	bd70      	pop	{r4, r5, r6, pc}
 800856a:	466a      	mov	r2, sp
 800856c:	f000 f848 	bl	8008600 <_fstat_r>
 8008570:	2800      	cmp	r0, #0
 8008572:	dbec      	blt.n	800854e <__swhatbuf_r+0x12>
 8008574:	9901      	ldr	r1, [sp, #4]
 8008576:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800857a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800857e:	4259      	negs	r1, r3
 8008580:	4159      	adcs	r1, r3
 8008582:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008586:	e7eb      	b.n	8008560 <__swhatbuf_r+0x24>

08008588 <__smakebuf_r>:
 8008588:	898b      	ldrh	r3, [r1, #12]
 800858a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800858c:	079d      	lsls	r5, r3, #30
 800858e:	4606      	mov	r6, r0
 8008590:	460c      	mov	r4, r1
 8008592:	d507      	bpl.n	80085a4 <__smakebuf_r+0x1c>
 8008594:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	6123      	str	r3, [r4, #16]
 800859c:	2301      	movs	r3, #1
 800859e:	6163      	str	r3, [r4, #20]
 80085a0:	b003      	add	sp, #12
 80085a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085a4:	ab01      	add	r3, sp, #4
 80085a6:	466a      	mov	r2, sp
 80085a8:	f7ff ffc8 	bl	800853c <__swhatbuf_r>
 80085ac:	9f00      	ldr	r7, [sp, #0]
 80085ae:	4605      	mov	r5, r0
 80085b0:	4639      	mov	r1, r7
 80085b2:	4630      	mov	r0, r6
 80085b4:	f7fe fdd4 	bl	8007160 <_malloc_r>
 80085b8:	b948      	cbnz	r0, 80085ce <__smakebuf_r+0x46>
 80085ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085be:	059a      	lsls	r2, r3, #22
 80085c0:	d4ee      	bmi.n	80085a0 <__smakebuf_r+0x18>
 80085c2:	f023 0303 	bic.w	r3, r3, #3
 80085c6:	f043 0302 	orr.w	r3, r3, #2
 80085ca:	81a3      	strh	r3, [r4, #12]
 80085cc:	e7e2      	b.n	8008594 <__smakebuf_r+0xc>
 80085ce:	89a3      	ldrh	r3, [r4, #12]
 80085d0:	6020      	str	r0, [r4, #0]
 80085d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085d6:	81a3      	strh	r3, [r4, #12]
 80085d8:	9b01      	ldr	r3, [sp, #4]
 80085da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80085de:	b15b      	cbz	r3, 80085f8 <__smakebuf_r+0x70>
 80085e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085e4:	4630      	mov	r0, r6
 80085e6:	f000 f81d 	bl	8008624 <_isatty_r>
 80085ea:	b128      	cbz	r0, 80085f8 <__smakebuf_r+0x70>
 80085ec:	89a3      	ldrh	r3, [r4, #12]
 80085ee:	f023 0303 	bic.w	r3, r3, #3
 80085f2:	f043 0301 	orr.w	r3, r3, #1
 80085f6:	81a3      	strh	r3, [r4, #12]
 80085f8:	89a3      	ldrh	r3, [r4, #12]
 80085fa:	431d      	orrs	r5, r3
 80085fc:	81a5      	strh	r5, [r4, #12]
 80085fe:	e7cf      	b.n	80085a0 <__smakebuf_r+0x18>

08008600 <_fstat_r>:
 8008600:	b538      	push	{r3, r4, r5, lr}
 8008602:	4d07      	ldr	r5, [pc, #28]	@ (8008620 <_fstat_r+0x20>)
 8008604:	2300      	movs	r3, #0
 8008606:	4604      	mov	r4, r0
 8008608:	4608      	mov	r0, r1
 800860a:	4611      	mov	r1, r2
 800860c:	602b      	str	r3, [r5, #0]
 800860e:	f7fa fead 	bl	800336c <_fstat>
 8008612:	1c43      	adds	r3, r0, #1
 8008614:	d102      	bne.n	800861c <_fstat_r+0x1c>
 8008616:	682b      	ldr	r3, [r5, #0]
 8008618:	b103      	cbz	r3, 800861c <_fstat_r+0x1c>
 800861a:	6023      	str	r3, [r4, #0]
 800861c:	bd38      	pop	{r3, r4, r5, pc}
 800861e:	bf00      	nop
 8008620:	200005e4 	.word	0x200005e4

08008624 <_isatty_r>:
 8008624:	b538      	push	{r3, r4, r5, lr}
 8008626:	4d06      	ldr	r5, [pc, #24]	@ (8008640 <_isatty_r+0x1c>)
 8008628:	2300      	movs	r3, #0
 800862a:	4604      	mov	r4, r0
 800862c:	4608      	mov	r0, r1
 800862e:	602b      	str	r3, [r5, #0]
 8008630:	f7fa feac 	bl	800338c <_isatty>
 8008634:	1c43      	adds	r3, r0, #1
 8008636:	d102      	bne.n	800863e <_isatty_r+0x1a>
 8008638:	682b      	ldr	r3, [r5, #0]
 800863a:	b103      	cbz	r3, 800863e <_isatty_r+0x1a>
 800863c:	6023      	str	r3, [r4, #0]
 800863e:	bd38      	pop	{r3, r4, r5, pc}
 8008640:	200005e4 	.word	0x200005e4

08008644 <_init>:
 8008644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008646:	bf00      	nop
 8008648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800864a:	bc08      	pop	{r3}
 800864c:	469e      	mov	lr, r3
 800864e:	4770      	bx	lr

08008650 <_fini>:
 8008650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008652:	bf00      	nop
 8008654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008656:	bc08      	pop	{r3}
 8008658:	469e      	mov	lr, r3
 800865a:	4770      	bx	lr
